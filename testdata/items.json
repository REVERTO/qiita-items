[
    {
        "rendered_body": "<p>多層ニューラルネットワークを解釈しようとするとき、主に次の4つの方法があると考えています。<br>\n- 数学的<br>\n- 幾何学的<br>\n- 抽象概念<br>\n- プログラム<br>\nここでは、このうち「幾何学的」な解釈を目的に、ネットワークの可視化を行います。深層学習は、現実はGPUのメモリやメインメモリ上でのデータの流れであり、全ての要素を可視化するのは容易ではありません。そこで、データの側面から考え、概念的なレベルでデータがどのようにネットワークを伝播してゆくかを見ていくことにします。</p>\n\n<h2>\n<span id=\"目的\" class=\"fragment\"></span><a href=\"#%E7%9B%AE%E7%9A%84\"><i class=\"fa fa-link\"></i></a>目的</h2>\n\n<p>多層ニューラルネットワークでのデータ構造を、実際の比率で立体的なダイヤグラムとして表現します。その際、遠近法を使うことで実際の縮尺で可視化することが容易になります。</p>\n\n<h2>\n<span id=\"ネットワーク構造\" class=\"fragment\"></span><a href=\"#%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E6%A7%8B%E9%80%A0\"><i class=\"fa fa-link\"></i></a>ネットワーク構造</h2>\n\n<p>1998年に、AT&amp;TのYann LeCun氏ら[1]によって、畳み込みニューラルネットワークの原型であるLeNetが発表されました。主に手書き文字の認識を目的に開発されたネットワークで、2層の畳み込み層と、2層の全結合層によって構成されています。データサンプルは、1辺28ピクセルの画像で、5ピクセルのカーネルによりた2回の畳み込みが行われます。また、出力に際しては、2回の全結合が行われます。以下が、全体図となります。</p>\n\n<h2>\n<span id=\"可視化\" class=\"fragment\"></span><a href=\"#%E5%8F%AF%E8%A6%96%E5%8C%96\"><i class=\"fa fa-link\"></i></a>可視化</h2>\n\n<p><a href=\"https://camo.qiitausercontent.com/1271554ff65911280954d883036b1cb37b84eb10/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234323630322f38623262316536332d323333372d303636302d653538642d3165643234323462343566652e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/1271554ff65911280954d883036b1cb37b84eb10/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234323630322f38623262316536332d323333372d303636302d653538642d3165643234323462343566652e6a706567\" alt=\"tensor0.jpg\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/242602/8b2b1e63-2337-0660-e58d-1ed2424b45fe.jpeg\"></a></p>\n\n<p>左から、2次元の画像が入力として与えられ、畳み込み層で直方体のテンソルに変換されます。プーリング層では水平方向で小さくなり、全結合で一気に膨大な長さのベクトルに変換されています。直感的には、畳み込み層1でチャンネル数が一気に20になる部分で、かなりデータ量が多くなっている印象です。また、実際は複数の画像をまとめてミニバッチで処理されるため、直方体のテンソルの部分は高次元になり、そうなると可視化するのは困難です。</p>\n\n<p>また、全結合層を横から見ると、以下の図になります。<br>\n<a href=\"https://camo.qiitausercontent.com/30a5686cc083b9a7fd51f163cfd76cdd8a07536a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234323630322f61396631663032322d363362662d363361392d313535302d3930363231656166616361632e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/30a5686cc083b9a7fd51f163cfd76cdd8a07536a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234323630322f61396631663032322d363362662d363361392d313535302d3930363231656166616361632e6a706567\" alt=\"tensor1.jpg\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/242602/a9f1f022-63bf-63a9-1550-90621eafacac.jpeg\"></a></p>\n\n<p>これにより、全結合層の計算コストがいかに高いかが想像できるのではないでしょうか。GoogLeNetやResNetなどのモダンなCNNでは、この全結合層をなるべく小さくするような工夫がされています。</p>\n\n<h2>\n<span id=\"課題\" class=\"fragment\"></span><a href=\"#%E8%AA%B2%E9%A1%8C\"><i class=\"fa fa-link\"></i></a>課題</h2>\n\n<p>課題としては、各層での活性化関数が視覚的に表現されていないこと、また、学習パラメータである重みやバイアスの可視化も今後取り組んで見たいと思います。</p>\n\n<h2>\n<span id=\"参考情報\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E6%83%85%E5%A0%B1\"><i class=\"fa fa-link\"></i></a>参考情報</h2>\n\n<p>[1] <a href=\"http://vision.stanford.edu/cs598_spring07/papers/Lecun98.pdf\" title=\"Gradient Based Learning Applied to Document Recognition\" rel=\"nofollow noopener\" target=\"_blank\">Gradient Based Learning Applied to Document Recognition</a><br>\n<a href=\"http://vision.stanford.edu/cs598_spring07/papers/Lecun98.pdf\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://vision.stanford.edu/cs598_spring07/papers/Lecun98.pdf</a></p>\n",
        "body": "多層ニューラルネットワークを解釈しようとするとき、主に次の4つの方法があると考えています。\n- 数学的\n- 幾何学的\n- 抽象概念\n- プログラム\nここでは、このうち「幾何学的」な解釈を目的に、ネットワークの可視化を行います。深層学習は、現実はGPUのメモリやメインメモリ上でのデータの流れであり、全ての要素を可視化するのは容易ではありません。そこで、データの側面から考え、概念的なレベルでデータがどのようにネットワークを伝播してゆくかを見ていくことにします。\n\n##目的\n多層ニューラルネットワークでのデータ構造を、実際の比率で立体的なダイヤグラムとして表現します。その際、遠近法を使うことで実際の縮尺で可視化することが容易になります。\n\n##ネットワーク構造\n1998年に、AT&TのYann LeCun氏ら[1]によって、畳み込みニューラルネットワークの原型であるLeNetが発表されました。主に手書き文字の認識を目的に開発されたネットワークで、2層の畳み込み層と、2層の全結合層によって構成されています。データサンプルは、1辺28ピクセルの画像で、5ピクセルのカーネルによりた2回の畳み込みが行われます。また、出力に際しては、2回の全結合が行われます。以下が、全体図となります。\n\n##可視化\n![tensor0.jpg](https://qiita-image-store.s3.amazonaws.com/0/242602/8b2b1e63-2337-0660-e58d-1ed2424b45fe.jpeg)\n\n左から、2次元の画像が入力として与えられ、畳み込み層で直方体のテンソルに変換されます。プーリング層では水平方向で小さくなり、全結合で一気に膨大な長さのベクトルに変換されています。直感的には、畳み込み層1でチャンネル数が一気に20になる部分で、かなりデータ量が多くなっている印象です。また、実際は複数の画像をまとめてミニバッチで処理されるため、直方体のテンソルの部分は高次元になり、そうなると可視化するのは困難です。\n\nまた、全結合層を横から見ると、以下の図になります。\n![tensor1.jpg](https://qiita-image-store.s3.amazonaws.com/0/242602/a9f1f022-63bf-63a9-1550-90621eafacac.jpeg)\n\nこれにより、全結合層の計算コストがいかに高いかが想像できるのではないでしょうか。GoogLeNetやResNetなどのモダンなCNNでは、この全結合層をなるべく小さくするような工夫がされています。\n\n##課題\n課題としては、各層での活性化関数が視覚的に表現されていないこと、また、学習パラメータである重みやバイアスの可視化も今後取り組んで見たいと思います。\n\n##参考情報\n[1] [Gradient Based Learning Applied to Document Recognition](http://vision.stanford.edu/cs598_spring07/papers/Lecun98.pdf \"Gradient Based Learning Applied to Document Recognition\")\nhttp://vision.stanford.edu/cs598_spring07/papers/Lecun98.pdf\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T16:10:46+09:00",
        "group": null,
        "id": "d7ea616fa2a16565ca3b",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "可視化",
                "versions": []
            },
            {
                "name": "深層学習",
                "versions": []
            },
            {
                "name": "CNN",
                "versions": []
            }
        ],
        "title": "多層ニューラルネットワークの立体表示",
        "updated_at": "2018-03-24T16:10:46+09:00",
        "url": "https://qiita.com/sudamasahiko/items/d7ea616fa2a16565ca3b",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 1,
            "followers_count": 0,
            "github_login_name": null,
            "id": "sudamasahiko",
            "items_count": 2,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 242602,
            "profile_image_url": "https://lh6.googleusercontent.com/-vbgcoAtrOvA/AAAAAAAAAAI/AAAAAAAAA0c/VoosCyAFaJA/photo.jpg?sz=50",
            "twitter_screen_name": null,
            "website_url": null
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h2>\n<span id=\"動機\" class=\"fragment\"></span><a href=\"#%E5%8B%95%E6%A9%9F\"><i class=\"fa fa-link\"></i></a>動機</h2>\n\n<p>WildFly Swarm 2018.3.3 で Eclipse MicroProfile 1.3 が追加されたということで、MicroProfile 1.3 の仕様のうちの一つである MicroProfile OpenAPI 1.0 を試してみたかった。</p>\n\n<h2>\n<span id=\"openapi-specification-はかつての-swagger-specification\" class=\"fragment\"></span><a href=\"#openapi-specification-%E3%81%AF%E3%81%8B%E3%81%A4%E3%81%A6%E3%81%AE-swagger-specification\"><i class=\"fa fa-link\"></i></a>OpenAPI Specification はかつての Swagger Specification</h2>\n\n<p><strong>OpenAPI Specification</strong> (OAS) はかつて、<strong>Swagger Specification</strong> だったもので、<a href=\"https://smartbear.com/\" rel=\"nofollow noopener\" target=\"_blank\">SmartBear社</a>のプロダクトである<a href=\"https://swagger.io/\" rel=\"nofollow noopener\" target=\"_blank\">Swagger</a>固有とされていたものが、<strong>OpenAPI Initiative</strong> (Linux Foundation の共同プロジェクト) なるところに寄贈され、パブリックな仕様となっている。<br>\nOpenAPIの仕様に沿った YAML または JSON があれば、REST API のリファレンスが作れるし、各言語の REST API の実装を生成したりもできる。</p>\n\n<h2>\n<span id=\"microprofile-openapi-10-とは\" class=\"fragment\"></span><a href=\"#microprofile-openapi-10-%E3%81%A8%E3%81%AF\"><i class=\"fa fa-link\"></i></a>MicroProfile OpenAPI 1.0 とは</h2>\n\n<p>今回 MicroProfile 1.3 に追加された <strong>MicroProfile OpenAPI 1.0</strong> では JAX-RS Resource を作ると、その仕様が YAML または JSON として自動で提供されるようになった。<br>\nつまり、はじめはデザイン(ドキュメント)ファーストで OAS の YAML でAPIの仕様を決め、コードに落ちた後に仕様の変更をしたとしてもそれがダイレクトにAPIドキュメントに反映できるので、仕様の書き直しをすることがなくなる。</p>\n\n<h2>\n<span id=\"やることやったこと\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%82%8B%E3%81%93%E3%81%A8%E3%82%84%E3%81%A3%E3%81%9F%E3%81%93%E3%81%A8\"><i class=\"fa fa-link\"></i></a>やること。やったこと。</h2>\n\n<p>今回はコーディングファーストで WildFly Swarm 2018.3.3 で JAX-RS Resource を作り、OpenAPI準拠の仕様(YAML)が生成されることを確認してみる。</p>\n\n<h3>\n<span id=\"プロジェクト生成\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E7%94%9F%E6%88%90\"><i class=\"fa fa-link\"></i></a>プロジェクト生成</h3>\n\n<p><a href=\"http://wildfly-swarm.io/generator/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://wildfly-swarm.io/generator/</a> にアクセスして、<code>Dependencies</code>のフォームに <code>MicroProrfile</code> と入力すると、<code>MicroProfile OpenAPI Fraction</code> がサジェストされるので、選択して、 \"Generate Project\" を押すと、MicroProfileが使える WildFly Swarm のプロジェクト(zipファイル) がダウンロードされる。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/430b32d9d0758a39ddd0ce927c8cebd8b726ead8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f35373936372f35356134623539322d396134372d346639332d663335322d3639366434623735313866382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/430b32d9d0758a39ddd0ce927c8cebd8b726ead8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f35373936372f35356134623539322d396134372d346639332d663335322d3639366434623735313866382e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/57967/55a4b592-9a47-4f93-f352-696d4b7518f8.png\"></a></p>\n\n<h3>\n<span id=\"ビルドして起動してみる\" class=\"fragment\"></span><a href=\"#%E3%83%93%E3%83%AB%E3%83%89%E3%81%97%E3%81%A6%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ビルドして起動してみる</h3>\n\n<p>ダウンロードされた zip を展開して、ビルドするだけで、すでに JAX-RS のアプリとして機能する。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">ダウンロードしたzipを展開してビルド</span></div>\n<div class=\"highlight\"><pre>unzip demo.zip\n<span class=\"nb\">cd </span>demo\nmvn package\n</pre></div>\n</div>\n\n<p>ビルドするとtarget配下には、 事項可能な JARファイル (Uber JAR) が出来上がっているので、javaコマンドで起動する。</p>\n\n<div class=\"code-frame\" data-lang=\"bash\">\n<div class=\"code-lang\"><span class=\"bold\">ビルドしたアプリを起動</span></div>\n<div class=\"highlight\"><pre>java <span class=\"nt\">-jar</span> target/demo-swarm.jar\n</pre></div>\n</div>\n\n<h3>\n<span id=\"起動したアプリにアクセスしてみる\" class=\"fragment\"></span><a href=\"#%E8%B5%B7%E5%8B%95%E3%81%97%E3%81%9F%E3%82%A2%E3%83%97%E3%83%AA%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>起動したアプリにアクセスしてみる</h3>\n\n<p><a href=\"http://localhost:8080/hello\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080/hello</a> にアクセスると、<code>Hello from WildFly Swarm!</code>が得られる</p>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>curl <span class=\"nt\">-i</span> http://localhost:8080/hello                                                                                                  <span class=\"o\">[</span>03/24 15:15]\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: text/plain<span class=\"p\">;</span><span class=\"nv\">charset</span><span class=\"o\">=</span>UTF-8\nContent-Length: 25\nDate: Sat, 24 Mar 2018 06:17:20 GMT\n\nHello from WildFly Swarm!\n</pre></div></div>\n\n<p>実はもうこの時点で、このAPIの仕様は公開されている。<br>\n<a href=\"http://localhost:8080/openapi\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080/openapi</a> にアクセスすると、OpenAPI Specification 準拠のYAML形式のファイルが得られる。<br>\nこれが<strong>APIの仕様書</strong>となる。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ curl -i http://localhost:8080/openapi\n---\nopenapi: 3.0.1\ninfo:\n  title: MicroProfile OpenAPI with WildFly Swarm\n  description: This is a sample server for a MicroProfile OpenAPI.\n  version: 1.0.0-SNAPSHOT\npaths:\n  /hello:\n    get:\n      responses:\n        200:\n          content:\n            text/plain: {}\n</pre></div></div>\n\n<h3>\n<span id=\"人が見て分かりやすいページにする\" class=\"fragment\"></span><a href=\"#%E4%BA%BA%E3%81%8C%E8%A6%8B%E3%81%A6%E5%88%86%E3%81%8B%E3%82%8A%E3%82%84%E3%81%99%E3%81%84%E3%83%9A%E3%83%BC%E3%82%B8%E3%81%AB%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>人が見て分かりやすいページにする</h3>\n\n<p>これだけでAPIの仕様として読めなくもないが、人に優しくないので、ちゃんとドキュメントとして読める形にしてあげることにする。<br>\nいろいろ調べた結果、<a href=\"https://github.com/Rebilly/ReDoc\" rel=\"nofollow noopener\" target=\"_blank\">ReDoc</a> が良さそうだった。<a href=\"https://docs.docker.com/engine/api/v1.25/\" rel=\"nofollow noopener\" target=\"_blank\">Docker Engine</a> の APIリファレンス もこれを使用しているようだ。</p>\n\n<h4>\n<span id=\"jax-rsのパスを変更する\" class=\"fragment\"></span><a href=\"#jax-rs%E3%81%AE%E3%83%91%E3%82%B9%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>JAX-RSのパスを変更する</h4>\n\n<p>HTMLを置きたいけど、デフォルトではルートパスがJAX-RSのパスとしているため、<code>/api</code>に変更する。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">JaxRsActivator.java</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">// package, import は省略</span>\n\n<span class=\"nd\">@ApplicationPath</span><span class=\"o\">(</span><span class=\"s\">\"api\"</span><span class=\"o\">)</span>\n<span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">JaxRsActivator</span> <span class=\"kd\">extends</span> <span class=\"n\">Application</span> <span class=\"o\">{</span>\n\n<span class=\"o\">}</span>\n\n</pre></div>\n</div>\n\n<p>これにより、<code>/hello</code>のリソースは<code>/api/hello</code>に変わる。</p>\n\n<h4>\n<span id=\"redocのhtmlを作る\" class=\"fragment\"></span><a href=\"#redoc%E3%81%AEhtml%E3%82%92%E4%BD%9C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>ReDocのHTMLを作る</h4>\n\n<p><a href=\"https://github.com/Rebilly/ReDoc/blob/master/README.md\" rel=\"nofollow noopener\" target=\"_blank\">ReDocのREADME.md</a>にも書いてあるが、以下のように一つHTMLファイルをおいてあげる。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">src/main/webapp/index.html</span></div>\n<div class=\"highlight\"><pre><span class=\"cp\">&lt;!DOCTYPE html&gt;</span>\n<span class=\"nt\">&lt;html&gt;</span>\n    <span class=\"nt\">&lt;head&gt;</span>\n        <span class=\"nt\">&lt;title&gt;</span>ReDoc<span class=\"nt\">&lt;/title&gt;</span>\n        <span class=\"c\">&lt;!-- needed for adaptive design --&gt;</span>\n        <span class=\"nt\">&lt;meta</span> <span class=\"na\">charset=</span><span class=\"s\">\"utf-8\"</span><span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;meta</span> <span class=\"na\">name=</span><span class=\"s\">\"viewport\"</span> <span class=\"na\">content=</span><span class=\"s\">\"width=device-width, initial-scale=1\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;link</span> <span class=\"na\">href=</span><span class=\"s\">\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\"</span> <span class=\"na\">rel=</span><span class=\"s\">\"stylesheet\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"c\">&lt;!--\n        ReDoc doesn't change outer page styles\n        --&gt;</span>\n        <span class=\"nt\">&lt;style&gt;</span>\n            <span class=\"nt\">body</span> <span class=\"p\">{</span>\n                <span class=\"nl\">margin</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n                <span class=\"nl\">padding</span><span class=\"p\">:</span> <span class=\"m\">0</span><span class=\"p\">;</span>\n            <span class=\"p\">}</span>\n        <span class=\"nt\">&lt;/style&gt;</span>\n    <span class=\"nt\">&lt;/head&gt;</span>\n    <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"c\">&lt;!-- ここで /openapi を参照するようにしてあげる！ --&gt;</span>\n    <span class=\"nt\">&lt;redoc</span> <span class=\"na\">spec-url=</span><span class=\"s\">'/openapi'</span><span class=\"nt\">&gt;&lt;/redoc&gt;</span>\n    <span class=\"nt\">&lt;script </span><span class=\"na\">src=</span><span class=\"s\">\"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\"</span><span class=\"nt\">&gt;&lt;/script&gt;</span>\n<span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</pre></div>\n</div>\n\n<p>あとは、同様にビルドしなおして、起動してあげれば<br>\n。<br>\n<a href=\"http://localhost:8080/api/hello\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080/api/hello</a> でJAX-RS リソースが提供されているし、<br>\n<a href=\"http://localhost:8080/openapi\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080/openapi</a> で OpenAPI Specification 準拠のYAML見れるし<br>\n<a href=\"http://localhost:8080/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080/</a> ではカッコイイAPIドキュメント出来上がってる！</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/472435e010854a77eb689c622f09317213eed17e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f35373936372f32356662366463312d636438332d333931662d393935372d3032646232383335643838382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/472435e010854a77eb689c622f09317213eed17e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f35373936372f32356662366463312d636438332d333931662d393935372d3032646232383335643838382e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/57967/25fb6dc1-cd83-391f-9957-02db2835d888.png\"></a></p>\n\n<p>タイトルやライセンス、コンタクト情報など、さまざまな情報を設定したい場合 <code>src/main/resources/META-INF/openapi.json</code> を <a href=\"https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#specification\" rel=\"nofollow noopener\" target=\"_blank\">OpenAPI Specification に従った形式</a> で修正してあげればページにも反映される。</p>\n\n<h3>\n<span id=\"さらにドキュメンテーションを充実させるには\" class=\"fragment\"></span><a href=\"#%E3%81%95%E3%82%89%E3%81%AB%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%86%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%85%85%E5%AE%9F%E3%81%95%E3%81%9B%E3%82%8B%E3%81%AB%E3%81%AF\"><i class=\"fa fa-link\"></i></a>さらにドキュメンテーションを充実させるには</h3>\n\n<p>MicroProfile OpenAPI では様々な<a href=\"https://github.com/eclipse/microprofile-open-api/blob/master/spec/src/main/asciidoc/microprofile-openapi-spec.adoc#annotations\" rel=\"nofollow noopener\" target=\"_blank\">アノテーション</a>が用意されており、適切にJAX-RS Resource につけてあげれば、OpenAPI Specification 準拠の情報を付加することができる。</p>\n\n<p>さらに、ReDoc に対応する <a href=\"https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#x-examples\" rel=\"nofollow noopener\" target=\"_blank\">Extension</a> を設定してあげることで、APIのクライアント用のサンプルコードを生成する機能を付加したり、<code>POST</code>する JSON の Example などの情報が付加できるようだ。</p>\n\n<h2>\n<span id=\"デモ用に作ったコード\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%A2%E7%94%A8%E3%81%AB%E4%BD%9C%E3%81%A3%E3%81%9F%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>デモ用に作ったコード</h2>\n\n<p>GitHub <a href=\"https://github.com/sightseeker/wildfly-swarm-mp-demo\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/sightseeker/wildfly-swarm-mp-demo</a> に上げていますので、すぐに試したい方はこちらをどうぞ。</p>\n\n<h3>\n<span id=\"files\" class=\"fragment\"></span><a href=\"#files\"><i class=\"fa fa-link\"></i></a>Files</h3>\n\n<p>ファイルはたったこれだけ。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>├── pom.xml\n└── src\n    └── main\n        ├── java/com/sightseekerstudio/wildflyswarmmpdemo/rest\n        │   ├── HelloWorldEndpoint.java\n        │   └── JaxRsActivator.java\n        ├── resources\n        │   └── META-INF\n        │       └── openapi.json\n        └── webapp\n            └── index.html\n</pre></div></div>\n",
        "body": "## 動機\n\nWildFly Swarm 2018.3.3 で Eclipse MicroProfile 1.3 が追加されたということで、MicroProfile 1.3 の仕様のうちの一つである MicroProfile OpenAPI 1.0 を試してみたかった。\n\n## OpenAPI Specification はかつての Swagger Specification\n\n**OpenAPI Specification** (OAS) はかつて、**Swagger Specification** だったもので、[SmartBear社](https://smartbear.com/)のプロダクトである[Swagger](https://swagger.io/)固有とされていたものが、**OpenAPI Initiative** (Linux Foundation の共同プロジェクト) なるところに寄贈され、パブリックな仕様となっている。\nOpenAPIの仕様に沿った YAML または JSON があれば、REST API のリファレンスが作れるし、各言語の REST API の実装を生成したりもできる。\n\n## MicroProfile OpenAPI 1.0 とは\n今回 MicroProfile 1.3 に追加された **MicroProfile OpenAPI 1.0** では JAX-RS Resource を作ると、その仕様が YAML または JSON として自動で提供されるようになった。\nつまり、はじめはデザイン(ドキュメント)ファーストで OAS の YAML でAPIの仕様を決め、コードに落ちた後に仕様の変更をしたとしてもそれがダイレクトにAPIドキュメントに反映できるので、仕様の書き直しをすることがなくなる。\n\n## やること。やったこと。\n\n今回はコーディングファーストで WildFly Swarm 2018.3.3 で JAX-RS Resource を作り、OpenAPI準拠の仕様(YAML)が生成されることを確認してみる。\n\n### プロジェクト生成\n\nhttp://wildfly-swarm.io/generator/ にアクセスして、`Dependencies`のフォームに `MicroProrfile` と入力すると、`MicroProfile OpenAPI Fraction` がサジェストされるので、選択して、 \"Generate Project\" を押すと、MicroProfileが使える WildFly Swarm のプロジェクト(zipファイル) がダウンロードされる。\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/57967/55a4b592-9a47-4f93-f352-696d4b7518f8.png)\n\n### ビルドして起動してみる\n\nダウンロードされた zip を展開して、ビルドするだけで、すでに JAX-RS のアプリとして機能する。\n\n```bash:ダウンロードしたzipを展開してビルド\nunzip demo.zip\ncd demo\nmvn package\n```\n\nビルドするとtarget配下には、 事項可能な JARファイル (Uber JAR) が出来上がっているので、javaコマンドで起動する。\n\n```bash:ビルドしたアプリを起動\njava -jar target/demo-swarm.jar\n```\n\n### 起動したアプリにアクセスしてみる\n\nhttp://localhost:8080/hello にアクセスると、`Hello from WildFly Swarm!`が得られる\n\n```bash\n$ curl -i http://localhost:8080/hello                                                                                                  [03/24 15:15]\nHTTP/1.1 200 OK\nConnection: keep-alive\nContent-Type: text/plain;charset=UTF-8\nContent-Length: 25\nDate: Sat, 24 Mar 2018 06:17:20 GMT\n\nHello from WildFly Swarm!\n```\n\n実はもうこの時点で、このAPIの仕様は公開されている。\nhttp://localhost:8080/openapi にアクセスすると、OpenAPI Specification 準拠のYAML形式のファイルが得られる。\nこれが**APIの仕様書**となる。\n\n```\n$ curl -i http://localhost:8080/openapi\n---\nopenapi: 3.0.1\ninfo:\n  title: MicroProfile OpenAPI with WildFly Swarm\n  description: This is a sample server for a MicroProfile OpenAPI.\n  version: 1.0.0-SNAPSHOT\npaths:\n  /hello:\n    get:\n      responses:\n        200:\n          content:\n            text/plain: {}\n```\n\n### 人が見て分かりやすいページにする\n\nこれだけでAPIの仕様として読めなくもないが、人に優しくないので、ちゃんとドキュメントとして読める形にしてあげることにする。\nいろいろ調べた結果、[ReDoc](https://github.com/Rebilly/ReDoc) が良さそうだった。[Docker Engine](https://docs.docker.com/engine/api/v1.25/) の APIリファレンス もこれを使用しているようだ。\n\n#### JAX-RSのパスを変更する\n\nHTMLを置きたいけど、デフォルトではルートパスがJAX-RSのパスとしているため、`/api`に変更する。\n\n```java:JaxRsActivator.java\n// package, import は省略\n\n@ApplicationPath(\"api\")\npublic class JaxRsActivator extends Application {\n\n}\n\n```\n\nこれにより、`/hello`のリソースは`/api/hello`に変わる。\n\n#### ReDocのHTMLを作る\n\n[ReDocのREADME.md](https://github.com/Rebilly/ReDoc/blob/master/README.md)にも書いてあるが、以下のように一つHTMLファイルをおいてあげる。\n\n```html:src/main/webapp/index.html\n<!DOCTYPE html>\n<html>\n    <head>\n        <title>ReDoc</title>\n        <!-- needed for adaptive design -->\n        <meta charset=\"utf-8\"/>\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n        <link href=\"https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700\" rel=\"stylesheet\">\n        <!--\n        ReDoc doesn't change outer page styles\n        -->\n        <style>\n            body {\n                margin: 0;\n                padding: 0;\n            }\n        </style>\n    </head>\n    <body>\n    <!-- ここで /openapi を参照するようにしてあげる！ -->\n    <redoc spec-url='/openapi'></redoc>\n    <script src=\"https://cdn.jsdelivr.net/npm/redoc@next/bundles/redoc.standalone.js\"></script>\n</body>\n</html>\n```\n\nあとは、同様にビルドしなおして、起動してあげれば\n。\nhttp://localhost:8080/api/hello でJAX-RS リソースが提供されているし、\nhttp://localhost:8080/openapi で OpenAPI Specification 準拠のYAML見れるし\nhttp://localhost:8080/ ではカッコイイAPIドキュメント出来上がってる！\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/57967/25fb6dc1-cd83-391f-9957-02db2835d888.png)\n\nタイトルやライセンス、コンタクト情報など、さまざまな情報を設定したい場合 `src/main/resources/META-INF/openapi.json` を [OpenAPI Specification に従った形式](https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md#specification) で修正してあげればページにも反映される。\n\n### さらにドキュメンテーションを充実させるには\n\nMicroProfile OpenAPI では様々な[アノテーション](https://github.com/eclipse/microprofile-open-api/blob/master/spec/src/main/asciidoc/microprofile-openapi-spec.adoc#annotations)が用意されており、適切にJAX-RS Resource につけてあげれば、OpenAPI Specification 準拠の情報を付加することができる。\n\nさらに、ReDoc に対応する [Extension](https://github.com/Rebilly/ReDoc/blob/master/docs/redoc-vendor-extensions.md#x-examples) を設定してあげることで、APIのクライアント用のサンプルコードを生成する機能を付加したり、`POST`する JSON の Example などの情報が付加できるようだ。\n\n## デモ用に作ったコード\n\nGitHub https://github.com/sightseeker/wildfly-swarm-mp-demo に上げていますので、すぐに試したい方はこちらをどうぞ。\n\n### Files\n\nファイルはたったこれだけ。\n\n```\n├── pom.xml\n└── src\n    └── main\n        ├── java/com/sightseekerstudio/wildflyswarmmpdemo/rest\n        │   ├── HelloWorldEndpoint.java\n        │   └── JaxRsActivator.java\n        ├── resources\n        │   └── META-INF\n        │       └── openapi.json\n        └── webapp\n            └── index.html\n```\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T16:08:18+09:00",
        "group": null,
        "id": "9ca1f8f70a7e4f9bed8a",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Java",
                "versions": []
            },
            {
                "name": "JavaEE",
                "versions": []
            },
            {
                "name": "OpenAPI",
                "versions": []
            },
            {
                "name": "WildFly-Swarm",
                "versions": []
            }
        ],
        "title": "WildFly Swarm でJAX-RSリソースを作ると、勝手に APIリファレンス(仕様書) が作られるようにしてみた",
        "updated_at": "2018-03-24T16:08:18+09:00",
        "url": "https://qiita.com/SightSeekerTw/items/9ca1f8f70a7e4f9bed8a",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 7,
            "followers_count": 6,
            "github_login_name": null,
            "id": "SightSeekerTw",
            "items_count": 11,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 57967,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/57967/profile-images/1473761403",
            "twitter_screen_name": "SightSeekerTw",
            "website_url": null
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p>共同開発をするために使う、Gitのコマンドを習ったので、まとめておきたいと思います。</p>\n\n<h3>\n<span id=\"gitの準備\" class=\"fragment\"></span><a href=\"#git%E3%81%AE%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a><strong>Gitの準備</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git init\n\n</span><span class=\"gp\">#</span>initは初期化を意味するinitializeの略\n</pre></div></div>\n\n<h3>\n<span id=\"共有するファイルの選択アド\" class=\"fragment\"></span><a href=\"#%E5%85%B1%E6%9C%89%E3%81%99%E3%82%8B%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E9%81%B8%E6%8A%9E%E3%82%A2%E3%83%89\"><i class=\"fa fa-link\"></i></a><strong>共有するファイルの選択（アド）</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git add index.html\n</span></pre></div></div>\n\n<h3>\n<span id=\"選択したファイルの記録コミット\" class=\"fragment\"></span><a href=\"#%E9%81%B8%E6%8A%9E%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%AE%E8%A8%98%E9%8C%B2%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a><strong>選択したファイルの記録（コミット）</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git commit -m \"Create index.html\"\n\n</span><span class=\"gp\">#</span><span class=\"s2\">\"\"</span>内はコミットメッセージ。そのコミットがどのような内容かがわかるようなメッセージにしておく。\n<span class=\"gp\">#</span>（例）サブタイトルの色を変更した場合、<span class=\"s2\">\"Change subtitle color\"</span> \n</pre></div></div>\n\n<h3>\n<span id=\"リモートを登録\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%82%92%E7%99%BB%E9%8C%B2\"><i class=\"fa fa-link\"></i></a><strong>リモートを登録</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git remote add origin https://...\n\n</span><span class=\"gp\">#</span>リモートの名前をoriginとして登録、アップロード先のurlを指定\n</pre></div></div>\n\n<h3>\n<span id=\"リモートにファイルをアップロードプッシュ\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%82%A2%E3%83%83%E3%83%97%E3%83%AD%E3%83%BC%E3%83%89%E3%83%97%E3%83%83%E3%82%B7%E3%83%A5\"><i class=\"fa fa-link\"></i></a><strong>リモートにファイルをアップロード（プッシュ）</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git push origin master\n</span></pre></div></div>\n\n<h3>\n<span id=\"リモートのファイルをダウンロードプル\" class=\"fragment\"></span><a href=\"#%E3%83%AA%E3%83%A2%E3%83%BC%E3%83%88%E3%81%AE%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%83%97%E3%83%AB\"><i class=\"fa fa-link\"></i></a><strong>リモートのファイルをダウンロード（プル）</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git pull origin master\n</span></pre></div></div>\n\n<h3>\n<span id=\"変更書き換えたしたファイルを把握\" class=\"fragment\"></span><a href=\"#%E5%A4%89%E6%9B%B4%E6%9B%B8%E3%81%8D%E6%8F%9B%E3%81%88%E3%81%9F%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E6%8A%8A%E6%8F%A1\"><i class=\"fa fa-link\"></i></a><strong>変更（書き換えた）したファイルを把握</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git status\n</span></pre></div></div>\n\n<h3>\n<span id=\"変更内容を把握\" class=\"fragment\"></span><a href=\"#%E5%A4%89%E6%9B%B4%E5%86%85%E5%AE%B9%E3%82%92%E6%8A%8A%E6%8F%A1\"><i class=\"fa fa-link\"></i></a><strong>変更内容を把握</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git diff\n\n</span><span class=\"gp\">#</span>変更前のコードが赤色（-）,変更後のコードが緑色（+）で表示される\n</pre></div></div>\n\n<h3>\n<span id=\"選択アドしたファイルを確認\" class=\"fragment\"></span><a href=\"#%E9%81%B8%E6%8A%9E%E3%82%A2%E3%83%89%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a><strong>選択（アド）したファイルを確認</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git status\n</span></pre></div></div>\n\n<h3>\n<span id=\"コミットメッセージを確認する\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%83%A1%E3%83%83%E3%82%BB%E3%83%BC%E3%82%B8%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a><strong>コミットメッセージを確認する</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git log\n</span></pre></div></div>\n\n<h3>\n<span id=\"変更内容を確認する\" class=\"fragment\"></span><a href=\"#%E5%A4%89%E6%9B%B4%E5%86%85%E5%AE%B9%E3%82%92%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a><strong>変更内容を確認する</strong>\n</h3>\n\n<div class=\"code-frame\" data-lang=\"terminal\"><div class=\"highlight\"><pre><span class=\"go\">git log -p\n\n</span><span class=\"gp\">#</span>表示が矢印キーでの操作に変わったら,qで終了\n</pre></div></div>\n",
        "body": "共同開発をするために使う、Gitのコマンドを習ったので、まとめておきたいと思います。\n\n###**Gitの準備**\n\n```terminal\ngit init\n\n#initは初期化を意味するinitializeの略\n```\n###**共有するファイルの選択（アド）**\n\n```terminal\ngit add index.html\n```\n###**選択したファイルの記録（コミット）**\n\n```terminal\ngit commit -m \"Create index.html\"\n\n#\"\"内はコミットメッセージ。そのコミットがどのような内容かがわかるようなメッセージにしておく。\n#（例）サブタイトルの色を変更した場合、\"Change subtitle color\" \n```\n###**リモートを登録**\n\n```terminal\ngit remote add origin https://...\n\n#リモートの名前をoriginとして登録、アップロード先のurlを指定\n```\n###**リモートにファイルをアップロード（プッシュ）**\n\n```terminal\ngit push origin master\n```\n###**リモートのファイルをダウンロード（プル）**\n\n```terminal\ngit pull origin master\n```\n###**変更（書き換えた）したファイルを把握**\n\n```terminal\ngit status\n```\n###**変更内容を把握**\n\n```terminal\ngit diff\n\n#変更前のコードが赤色（-）,変更後のコードが緑色（+）で表示される\n```\n###**選択（アド）したファイルを確認**\n\n```terminal\ngit status\n```\n###**コミットメッセージを確認する**\n\n```terminal\ngit log\n```\n###**変更内容を確認する**\n\n```terminal\ngit log -p\n\n#表示が矢印キーでの操作に変わったら,qで終了\n```\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T16:04:22+09:00",
        "group": null,
        "id": "c040b3a7d8180de55f44",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Git",
                "versions": []
            }
        ],
        "title": "Gitで共同編集を行うためのコマンドまとめ",
        "updated_at": "2018-03-24T16:04:22+09:00",
        "url": "https://qiita.com/TakayaTkmr/items/c040b3a7d8180de55f44",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 1,
            "followers_count": 0,
            "github_login_name": null,
            "id": "TakayaTkmr",
            "items_count": 3,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 191397,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/191397/profile-images/1521465249",
            "twitter_screen_name": "TakayaTkmr",
            "website_url": null
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p><a href=\"https://qiita.com/hf7777hi/items/cd1f146895d487f3b60a\" id=\"reference-65c6fef437c3a87ba9c4\">CloudWatch カスタムメトリクスを色々監視する</a><br>\nにてカスタムメトリクスを導入しました。</p>\n\n<p>これでアラートを設定すると登録したメールアドレスに対して通知が来ます。<br>\nこれでは、見落としがちなので、今回はSlackに通知するようにしたいと思います。</p>\n\n<p>CloudWatch → Lambda → Slack<br>\nの流れでSlackに通知します。<br>\nCloudWatchのアラートをLambdaで受けてSlackに流す形です。</p>\n\n<h1>\n<span id=\"アラーム設定\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%A9%E3%83%BC%E3%83%A0%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>アラーム設定</h1>\n\n<p>まずはアラームを設定します。</p>\n\n<h4>\n<span id=\"監視したいメトリクスにチェックを入れる\" class=\"fragment\"></span><a href=\"#%E7%9B%A3%E8%A6%96%E3%81%97%E3%81%9F%E3%81%84%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9%E3%81%AB%E3%83%81%E3%82%A7%E3%83%83%E3%82%AF%E3%82%92%E5%85%A5%E3%82%8C%E3%82%8B\"><i class=\"fa fa-link\"></i></a>監視したいメトリクスにチェックを入れる</h4>\n\n<p><a href=\"https://camo.qiitausercontent.com/84dba5827f55e1015bb389323e1a134f8846ac3c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f31383939626334382d316236392d636234362d376664662d6439613735353336333733382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/84dba5827f55e1015bb389323e1a134f8846ac3c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f31383939626334382d316236392d636234362d376664662d6439613735353336333733382e706e67\" alt=\"スクリーンショット 2018-03-24 14.29.32.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/1899bc48-1b69-cb46-7fdf-d9a755363738.png\"></a></p>\n\n<h4>\n<span id=\"グラフ化したメトリクスタブを開く\" class=\"fragment\"></span><a href=\"#%E3%82%B0%E3%83%A9%E3%83%95%E5%8C%96%E3%81%97%E3%81%9F%E3%83%A1%E3%83%88%E3%83%AA%E3%82%AF%E3%82%B9%E3%82%BF%E3%83%96%E3%82%92%E9%96%8B%E3%81%8F\"><i class=\"fa fa-link\"></i></a>グラフ化したメトリクスタブを開く</h4>\n\n<p>ベールマークをクリックする。<br>\n<a href=\"https://camo.qiitausercontent.com/3ef5e116077f9f07ec4c4dd53e405861c6972d9d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f64333939313933312d323930362d363332332d383833632d6334663833656536396661312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/3ef5e116077f9f07ec4c4dd53e405861c6972d9d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f64333939313933312d323930362d363332332d383833632d6334663833656536396661312e706e67\" alt=\"スクリーンショット 2018-03-24 14.31.06.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/d3991931-2906-6323-883c-c4f83ee69fa1.png\"></a></p>\n\n<h4>\n<span id=\"アラーム登録\" class=\"fragment\"></span><a href=\"#%E3%82%A2%E3%83%A9%E3%83%BC%E3%83%A0%E7%99%BB%E9%8C%B2\"><i class=\"fa fa-link\"></i></a>アラーム登録</h4>\n\n<p><a href=\"https://camo.qiitausercontent.com/9ba0a1f351e87ab65d47f3c090ec9ef190bf354d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f31316566323566302d636664312d326636312d376136362d3538373132623630383339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/9ba0a1f351e87ab65d47f3c090ec9ef190bf354d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f31316566323566302d636664312d326636312d376136362d3538373132623630383339642e706e67\" alt=\"スクリーンショット 2018-03-24 14.35.52.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/11ef25f0-cfd1-2f61-7a66-58712b60839d.png\"></a></p>\n\n<p>通知メールは受信可能なメールアドレスを登録します。</p>\n\n<p>通知は、状態が切り替わった時に一回だけされます。<br>\nそのため、OKと警告の通知はセットで登録しておくことをおすすめします（+不足も登録しておいてもいいです）。不足状態は、アラーム設定対象のメトリクスが計測不可能な状態になった時になります。</p>\n\n<p>例）<br>\nOK→警告　警告の通知が来ます。<br>\n警告→OK　OKの通知が来ます。</p>\n\n<p>これで、設定したメールアドレスに対してアラートの通知が来ます。</p>\n\n<h1>\n<span id=\"slackの準備\" class=\"fragment\"></span><a href=\"#slack%E3%81%AE%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>Slackの準備</h1>\n\n<p><a href=\"https://slack.com/apps\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://slack.com/apps</a><br>\nから、「Incoming WebHooks」を「Add Configuration」を押して、追加します。<br>\n<a href=\"https://camo.qiitausercontent.com/3295c8f24922913e77f87b74cbe16b9e331e021e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f38303062633739622d346237312d336438302d646137312d3736353036663564346531392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/3295c8f24922913e77f87b74cbe16b9e331e021e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f38303062633739622d346237312d336438302d646137312d3736353036663564346531392e706e67\" alt=\"スクリーンショット 2018-03-24 14.50.25.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/800bc79b-4b71-3d80-da71-76506f5d4e19.png\"></a></p>\n\n<p>通知するチャンネルを選択します（cloudwatchチャンネルを選択しました）。<br>\n<a href=\"https://camo.qiitausercontent.com/b3e10030157e35688b634425c3bf0ae14dfc103b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f33663265663634362d376464382d333934382d653264372d3662666261376234656333312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b3e10030157e35688b634425c3bf0ae14dfc103b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f33663265663634362d376464382d333934382d653264372d3662666261376234656333312e706e67\" alt=\"スクリーンショット 2018-03-24 14.52.48.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/3f2ef646-7dd8-3948-e2d7-6bfba7b4ec31.png\"></a></p>\n\n<p>登録すると、以下の「Webhook URL」が発行されるので記憶しておく。<br>\n<a href=\"https://camo.qiitausercontent.com/df99aef6bf271fd3c40e73f987e762e644fe8c46/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f38336232626636612d656437322d633333362d316638342d3966623633616362633631382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/df99aef6bf271fd3c40e73f987e762e644fe8c46/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f38336232626636612d656437322d633333362d316638342d3966623633616362633631382e706e67\" alt=\"スクリーンショット 2018-03-24 14.54.06.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/83b2bf6a-ed72-c336-1f84-9fb63acbc618.png\"></a></p>\n\n<h1>\n<span id=\"lambdaの設定\" class=\"fragment\"></span><a href=\"#lambda%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Lambdaの設定</h1>\n\n<p>一応料金確認。まあアラームだけでそんなにいかないので無料枠で全然いけます。<br>\n<a href=\"https://aws.amazon.com/jp/lambda/pricing/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://aws.amazon.com/jp/lambda/pricing/</a></p>\n\n<blockquote>\n<p>無料利用枠<br>\n1,000,000 件のリクエスト<br>\nUSD/月<br>\n400 GB-秒<br>\n1 か月あたりのコンピューティング時間.</p>\n\n<p>Lambda の無料利用枠は、12 か月間の AWS 無料利用枠の期間が終了しても自動的に期限切れになることはありません。既存および新規の AWS のお客様は、無期限にご利用いただけます。</p>\n</blockquote>\n\n<h3>\n<span id=\"iamのkmsで暗号キーでwebhookurlを暗号化\" class=\"fragment\"></span><a href=\"#iam%E3%81%AEkms%E3%81%A7%E6%9A%97%E5%8F%B7%E3%82%AD%E3%83%BC%E3%81%A7webhookurl%E3%82%92%E6%9A%97%E5%8F%B7%E5%8C%96\"><i class=\"fa fa-link\"></i></a>IAMのKMSで暗号キーでWebhookURLを暗号化</h3>\n\n<p>IAM &gt; 暗号化キー &gt; キーの作成　から暗号化キーを作成します。</p>\n\n<p>名前は「cloudwatch-alarm-to-slack」にしました。<br>\n<a href=\"https://camo.qiitausercontent.com/ab0647d0488bcb337b9dd1c4be9d791d4c081bf7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f38623863333138352d383938632d373931632d316364632d6436646361343366646363632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/ab0647d0488bcb337b9dd1c4be9d791d4c081bf7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f38623863333138352d383938632d373931632d316364632d6436646361343366646363632e706e67\" alt=\"スクリーンショット 2018-03-24 15.13.14.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/8b8c3185-898c-791c-1cdc-d6dca43fdccc.png\"></a><br>\nタグ名は適当に。<br>\n<a href=\"https://camo.qiitausercontent.com/52e995142b4927516027fd3ba1823efc0804494b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f39643931663866642d343339632d613232372d636163632d6338336438353534333733392e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/52e995142b4927516027fd3ba1823efc0804494b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f39643931663866642d343339632d613232372d636163632d6338336438353534333733392e706e67\" alt=\"スクリーンショット 2018-03-24 15.13.40.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/9d91f8fd-439c-a227-cacc-c83d85543739.png\"></a><br>\nキーの管理および使用許可を設定します。今回はどっちも「admin」にしました。<br>\n<a href=\"https://camo.qiitausercontent.com/37c244f3268dae06a929cba5d327d9f64fc6c121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f66326361623066382d646632382d666336342d643466382d6261363237646366613338342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/37c244f3268dae06a929cba5d327d9f64fc6c121/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f66326361623066382d646632382d666336342d643466382d6261363237646366613338342e706e67\" alt=\"スクリーンショット 2018-03-24 15.13.57.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/f2cab0f8-df28-fc64-d4f8-ba627dcfa384.png\"></a><br>\n<a href=\"https://camo.qiitausercontent.com/e129fd020bd2e2be552c4bbc89d51b5176b3ee7c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f64623630393731342d636434652d633733382d313433642d3138346661303635333939352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e129fd020bd2e2be552c4bbc89d51b5176b3ee7c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f64623630393731342d636434652d633733382d313433642d3138346661303635333939352e706e67\" alt=\"スクリーンショット 2018-03-24 15.14.09.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/db609714-cd4e-c738-143d-184fa0653995.png\"></a><br>\n以下のようにできました。<br>\n<a href=\"https://camo.qiitausercontent.com/bb2ba373ad413017112f88fe36b797b65dc890f8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f37316435376161302d646233352d663731382d326331612d3139373463363936356338632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/bb2ba373ad413017112f88fe36b797b65dc890f8/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f37316435376161302d646233352d663731382d326331612d3139373463363936356338632e706e67\" alt=\"スクリーンショット 2018-03-24 15.14.33.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/71d57aa0-db35-f718-2c1a-1974c6965c8c.png\"></a></p>\n\n<p>EC2へログインし、以下コマンドを実行します(aws configureしていない場合はしてください)。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ aws kms encrypt --key-id alias/cloudwatch-alarm-to-slack --plaintext \"hooks.slack.com/services/************************\"\n</pre></div></div>\n\n<p>うまくいくと以下のように暗号化されたWebhookURLが取得できます。<br>\n「CiphertextBlob」がそうです。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>{\n    \"KeyId\": \"arn:aws:kms:ap-northeast-1:392373650705:key/**************\", \n    \"CiphertextBlob\": \"*********************************\"\n}\n</pre></div></div>\n\n<p>※以下のようにnot foundと言われる時は暗号化キーのリージョンを確認してみてください。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ aws kms encrypt --key-id alias/cloudwatch-alarm-to-slack --plaintext \"hooks.slack.com/services/************************\"\n\nAn error occurred (NotFoundException) when calling the Encrypt operation: Alias arn:aws:kms:ap-northeast-1:*********:alias/cloudwatch-alarm-to-slack is not found.\n</pre></div></div>\n\n<h3>\n<span id=\"関数作成\" class=\"fragment\"></span><a href=\"#%E9%96%A2%E6%95%B0%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>関数作成</h3>\n\n<p>「cloudwatch-alarm-to-slack」にします(node.jsです)。<br>\n<a href=\"https://camo.qiitausercontent.com/50a3552d7e091208b1d02f85e969311d4a6dd729/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f35373433626131332d633339342d353039632d326566392d6666626365396563323061652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/50a3552d7e091208b1d02f85e969311d4a6dd729/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f35373433626131332d633339342d353039632d326566392d6666626365396563323061652e706e67\" alt=\"スクリーンショット 2018-03-24 15.02.32.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/5743ba13-c394-509c-2ef9-ffbce9ec20ae.png\"></a></p>\n\n<h3>\n<span id=\"関数登録\" class=\"fragment\"></span><a href=\"#%E9%96%A2%E6%95%B0%E7%99%BB%E9%8C%B2\"><i class=\"fa fa-link\"></i></a>関数登録</h3>\n\n<p>以下のように登録しました。<br>\n<a href=\"https://camo.qiitausercontent.com/a85a6acb39cdc1c27ee4c296a6cd19bc5920d885/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f62646163656231612d396131312d336439342d396637302d6332333662623865626339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a85a6acb39cdc1c27ee4c296a6cd19bc5920d885/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f62646163656231612d396131312d336439342d396637302d6332333662623865626339642e706e67\" alt=\"スクリーンショット 2018-03-24 15.32.47.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/bdaceb1a-9a11-3d94-9f70-c236bb8ebc9d.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/9cf2b8c9e8cc58f07045d5895c1995789b69ee8c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f33313861643437302d626232302d366665382d363262342d3437663263313466333361632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/9cf2b8c9e8cc58f07045d5895c1995789b69ee8c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f33313861643437302d626232302d366665382d363262342d3437663263313466333361632e706e67\" alt=\"スクリーンショット 2018-03-24 15.32.56.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/318ad470-bb20-6fe8-62b4-47f2c14f33ac.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/2c146c11013b36976e3fdee176ddd434bd055b37/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f38653165656563332d663734372d313533652d653633362d6136383163313064326539312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2c146c11013b36976e3fdee176ddd434bd055b37/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f38653165656563332d663734372d313533652d653633362d6136383163313064326539312e706e67\" alt=\"スクリーンショット 2018-03-24 15.33.20.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/8e1eeec3-f747-153e-e636-a681c10d2e91.png\"></a><br>\n「slackChannel」は流したいチャンネル。<br>\n「kmsEncryptedHookUrl」は暗号化したWebhookURLを設定する。</p>\n\n<p>登録するとSlackにアラートが通知されるようになります。</p>\n\n<h3>\n<span id=\"コード修正\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89%E4%BF%AE%E6%AD%A3\"><i class=\"fa fa-link\"></i></a>コード修正</h3>\n\n<p>processEvent()のslackMessageを編集することで通知メッセージをいじることができます。<br>\n以下のように設定しました。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>function processEvent(event, callback) {\n    const message = JSON.parse(event.Records[0].Sns.Message);\n\n    const alarmName = message.AlarmName;\n    //var oldState = message.OldStateValue;\n    const newState = message.NewStateValue;\n    const reason = message.NewStateReason;\n\n    var stamp;\n    if (newState === \"ALARM\") {\n        stamp = \":warning:\";\n    } else {\n        stamp = \":ok_woman:\";\n    }\n    const slackMessage = {\n        channel: slackChannel,\n        text: `*${stamp} ${newState}: ${alarmName} ${stamp}*\\n${reason}`,\n    };\n</pre></div></div>\n\n<h3>\n<span id=\"確認\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D\"><i class=\"fa fa-link\"></i></a>確認</h3>\n\n<p>わざとNG、OKとなるようにいじってslackに届くか確認します。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/9502846de661e10c9f1f50af19d728fcc376b5ae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f66333763646230662d363535632d333832372d363936652d6566393766643865333138652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/9502846de661e10c9f1f50af19d728fcc376b5ae/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f38363630352f66333763646230662d363535632d333832372d363936652d6566393766643865333138652e706e67\" alt=\"スクリーンショット 2018-03-24 16.03.29.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/86605/f37cdb0f-655c-3827-696e-ef97fd8e318e.png\"></a><br>\nGoodですね。</p>\n\n<p>以上です。</p>\n",
        "body": "[CloudWatch カスタムメトリクスを色々監視する](https://qiita.com/hf7777hi/items/cd1f146895d487f3b60a)\nにてカスタムメトリクスを導入しました。\n\nこれでアラートを設定すると登録したメールアドレスに対して通知が来ます。\nこれでは、見落としがちなので、今回はSlackに通知するようにしたいと思います。\n\nCloudWatch → Lambda → Slack\nの流れでSlackに通知します。\nCloudWatchのアラートをLambdaで受けてSlackに流す形です。\n\n#アラーム設定\nまずはアラームを設定します。\n####監視したいメトリクスにチェックを入れる\n![スクリーンショット 2018-03-24 14.29.32.png](https://qiita-image-store.s3.amazonaws.com/0/86605/1899bc48-1b69-cb46-7fdf-d9a755363738.png)\n####グラフ化したメトリクスタブを開く\nベールマークをクリックする。\n![スクリーンショット 2018-03-24 14.31.06.png](https://qiita-image-store.s3.amazonaws.com/0/86605/d3991931-2906-6323-883c-c4f83ee69fa1.png)\n####アラーム登録\n![スクリーンショット 2018-03-24 14.35.52.png](https://qiita-image-store.s3.amazonaws.com/0/86605/11ef25f0-cfd1-2f61-7a66-58712b60839d.png)\n\n通知メールは受信可能なメールアドレスを登録します。\n\n通知は、状態が切り替わった時に一回だけされます。\nそのため、OKと警告の通知はセットで登録しておくことをおすすめします（+不足も登録しておいてもいいです）。不足状態は、アラーム設定対象のメトリクスが計測不可能な状態になった時になります。\n\n例）\nOK→警告　警告の通知が来ます。\n警告→OK　OKの通知が来ます。\n\nこれで、設定したメールアドレスに対してアラートの通知が来ます。\n\n\n#Slackの準備\nhttps://slack.com/apps\nから、「Incoming WebHooks」を「Add Configuration」を押して、追加します。\n![スクリーンショット 2018-03-24 14.50.25.png](https://qiita-image-store.s3.amazonaws.com/0/86605/800bc79b-4b71-3d80-da71-76506f5d4e19.png)\n\n通知するチャンネルを選択します（cloudwatchチャンネルを選択しました）。\n![スクリーンショット 2018-03-24 14.52.48.png](https://qiita-image-store.s3.amazonaws.com/0/86605/3f2ef646-7dd8-3948-e2d7-6bfba7b4ec31.png)\n\n登録すると、以下の「Webhook URL」が発行されるので記憶しておく。\n![スクリーンショット 2018-03-24 14.54.06.png](https://qiita-image-store.s3.amazonaws.com/0/86605/83b2bf6a-ed72-c336-1f84-9fb63acbc618.png)\n\n\n#Lambdaの設定\n一応料金確認。まあアラームだけでそんなにいかないので無料枠で全然いけます。\nhttps://aws.amazon.com/jp/lambda/pricing/\n> 無料利用枠\n> 1,000,000 件のリクエスト\n> USD/月\n> 400 GB-秒\n> 1 か月あたりのコンピューティング時間.\n> \n> Lambda の無料利用枠は、12 か月間の AWS 無料利用枠の期間が終了しても自動的に期限切れになることはありません。既存および新規の AWS のお客様は、無期限にご利用いただけます。\n\n###IAMのKMSで暗号キーでWebhookURLを暗号化\nIAM > 暗号化キー > キーの作成　から暗号化キーを作成します。\n\n名前は「cloudwatch-alarm-to-slack」にしました。\n![スクリーンショット 2018-03-24 15.13.14.png](https://qiita-image-store.s3.amazonaws.com/0/86605/8b8c3185-898c-791c-1cdc-d6dca43fdccc.png)\nタグ名は適当に。\n![スクリーンショット 2018-03-24 15.13.40.png](https://qiita-image-store.s3.amazonaws.com/0/86605/9d91f8fd-439c-a227-cacc-c83d85543739.png)\nキーの管理および使用許可を設定します。今回はどっちも「admin」にしました。\n![スクリーンショット 2018-03-24 15.13.57.png](https://qiita-image-store.s3.amazonaws.com/0/86605/f2cab0f8-df28-fc64-d4f8-ba627dcfa384.png)\n![スクリーンショット 2018-03-24 15.14.09.png](https://qiita-image-store.s3.amazonaws.com/0/86605/db609714-cd4e-c738-143d-184fa0653995.png)\n以下のようにできました。\n![スクリーンショット 2018-03-24 15.14.33.png](https://qiita-image-store.s3.amazonaws.com/0/86605/71d57aa0-db35-f718-2c1a-1974c6965c8c.png)\n\n\nEC2へログインし、以下コマンドを実行します(aws configureしていない場合はしてください)。\n\n```\n$ aws kms encrypt --key-id alias/cloudwatch-alarm-to-slack --plaintext \"hooks.slack.com/services/************************\"\n```\nうまくいくと以下のように暗号化されたWebhookURLが取得できます。\n「CiphertextBlob」がそうです。\n\n```\n{\n    \"KeyId\": \"arn:aws:kms:ap-northeast-1:392373650705:key/**************\", \n    \"CiphertextBlob\": \"*********************************\"\n}\n```\n\n※以下のようにnot foundと言われる時は暗号化キーのリージョンを確認してみてください。\n\n```\n$ aws kms encrypt --key-id alias/cloudwatch-alarm-to-slack --plaintext \"hooks.slack.com/services/************************\"\n\nAn error occurred (NotFoundException) when calling the Encrypt operation: Alias arn:aws:kms:ap-northeast-1:*********:alias/cloudwatch-alarm-to-slack is not found.\n```\n\n\n\n\n###関数作成\n「cloudwatch-alarm-to-slack」にします(node.jsです)。\n![スクリーンショット 2018-03-24 15.02.32.png](https://qiita-image-store.s3.amazonaws.com/0/86605/5743ba13-c394-509c-2ef9-ffbce9ec20ae.png)\n\n###関数登録\n以下のように登録しました。\n![スクリーンショット 2018-03-24 15.32.47.png](https://qiita-image-store.s3.amazonaws.com/0/86605/bdaceb1a-9a11-3d94-9f70-c236bb8ebc9d.png)\n\n![スクリーンショット 2018-03-24 15.32.56.png](https://qiita-image-store.s3.amazonaws.com/0/86605/318ad470-bb20-6fe8-62b4-47f2c14f33ac.png)\n\n![スクリーンショット 2018-03-24 15.33.20.png](https://qiita-image-store.s3.amazonaws.com/0/86605/8e1eeec3-f747-153e-e636-a681c10d2e91.png)\n「slackChannel」は流したいチャンネル。\n「kmsEncryptedHookUrl」は暗号化したWebhookURLを設定する。\n\n登録するとSlackにアラートが通知されるようになります。\n\n\n###コード修正\nprocessEvent()のslackMessageを編集することで通知メッセージをいじることができます。\n以下のように設定しました。\n\n```\nfunction processEvent(event, callback) {\n    const message = JSON.parse(event.Records[0].Sns.Message);\n\n    const alarmName = message.AlarmName;\n    //var oldState = message.OldStateValue;\n    const newState = message.NewStateValue;\n    const reason = message.NewStateReason;\n\n    var stamp;\n    if (newState === \"ALARM\") {\n        stamp = \":warning:\";\n    } else {\n        stamp = \":ok_woman:\";\n    }\n    const slackMessage = {\n        channel: slackChannel,\n        text: `*${stamp} ${newState}: ${alarmName} ${stamp}*\\n${reason}`,\n    };\n```\n\n###確認\nわざとNG、OKとなるようにいじってslackに届くか確認します。\n\n![スクリーンショット 2018-03-24 16.03.29.png](https://qiita-image-store.s3.amazonaws.com/0/86605/f37cdb0f-655c-3827-696e-ef97fd8e318e.png)\nGoodですね。\n\n以上です。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T16:04:06+09:00",
        "group": null,
        "id": "e0f43f0fb7e2effa0af8",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "AWS",
                "versions": []
            },
            {
                "name": "CloudWatch",
                "versions": []
            },
            {
                "name": "lambda",
                "versions": []
            },
            {
                "name": "Slack",
                "versions": []
            }
        ],
        "title": "CloudWatchアラーム通知をSlackにする",
        "updated_at": "2018-03-24T16:05:32+09:00",
        "url": "https://qiita.com/hf7777hi/items/e0f43f0fb7e2effa0af8",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 0,
            "followers_count": 3,
            "github_login_name": "hf7777hi",
            "id": "hf7777hi",
            "items_count": 9,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 86605,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/86605/profile-images/1519485130",
            "twitter_screen_name": "ogm7777hi",
            "website_url": null
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p>新人SIerがJava8のラムダ式を使える（使えるとは言っていない）ようになるまでのメモ<br>\n使い始めるまでにこけたところを列挙しています。<br>\n大雑把に言えばStreamのおかげで簡単な使い方がわかりました。</p>\n\n<h1>\n<span id=\"ラムダ式さっぱり分からない\" class=\"fragment\"></span><a href=\"#%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F%E3%81%95%E3%81%A3%E3%81%B1%E3%82%8A%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>ラムダ式？さっぱり分からない！</h1>\n\n<p>ラムダ式はJava8以降追加された機能で、<br>\n関数型プログラミングやStreamなどと一緒に聞くことが多いかと思われます。</p>\n\n<p>私もif文やfor文を理解してしばらくしたころにラムダ式と関数型プログラミングの存在を知りました。</p>\n\n<p>そのときの率直な感想は<br>\n<strong>「なんだこれは、さっぱり分からない。」</strong></p>\n\n<h2>\n<span id=\"なぜラムダ式が分からないのか\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%81%9C%E3%83%A9%E3%83%A0%E3%83%80%E5%BC%8F%E3%81%8C%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84%E3%81%AE%E3%81%8B\"><i class=\"fa fa-link\"></i></a>なぜラムダ式が分からないのか</h2>\n\n<p>私の場合、大きく3点</p>\n\n<p><strong>1. ラムダ式という単語の意味が分からない</strong><br>\n<strong>2. ラムダ式の利点が分からない</strong><br>\n<strong>3. ラムダ式の書き方が分からない</strong></p>\n\n<p>が挙げられました。</p>\n\n<h3>\n<span id=\"単語の意味が分からない\" class=\"fragment\"></span><a href=\"#%E5%8D%98%E8%AA%9E%E3%81%AE%E6%84%8F%E5%91%B3%E3%81%8C%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>単語の意味が分からない</h3>\n\n<p>一般的な人々にとっては<strong>ラムダという単語になじみがない</strong>はずです。<br>\nそれに対してifなんかは意味を知っているので理解しやすい。<br>\nこれは勉強するしかない。</p>\n\n<p>ただ、ラムダ式については意味を説明されても<strong>使い方を理解しなければ結局分からない</strong>と思いました。</p>\n\n<h3>\n<span id=\"利点が分からない\" class=\"fragment\"></span><a href=\"#%E5%88%A9%E7%82%B9%E3%81%8C%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>利点が分からない</h3>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">HelloWorldLambda.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">Main</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n        <span class=\"n\">Runnable</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"o\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Hello World\"</span><span class=\"o\">);</span>\n        <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"na\">run</span><span class=\"o\">();</span> <span class=\"c1\">// Hello World</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>よくあるHello Worldの例です。<br>\n今見ると簡単ですね。</p>\n\n<p>ですが当時の私は<br>\n「ふつうに System.out.println(\"Hellow World\"); するだけじゃダメなのか…？」<br>\nと考えてしまっていました。<br>\nこれだけではラムダ式の利点を把握できませんでした。</p>\n\n<h3>\n<span id=\"書き方が分からない\" class=\"fragment\"></span><a href=\"#%E6%9B%B8%E3%81%8D%E6%96%B9%E3%81%8C%E5%88%86%E3%81%8B%E3%82%89%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>書き方が分からない</h3>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">ExLambda.java</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">Runnable</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"o\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"s\">\"Hello World\"</span><span class=\"o\">);</span>\n</pre></div>\n</div>\n\n<p>(仮引数) -&gt; {処理} という文法でラムダ式は記述されます。</p>\n\n<p>厄介なことにこれまで学んできたJavaで -&gt; なんて見た事がありません。<br>\nしかも、上記の例では仮引数だと言っている割に、()の中身は空っぽです。<br>\nこいつら｛｝はどこへ行ったんだ。<br>\nいったいこれは<strong>rに何を代入してるんだ？</strong></p>\n\n<p>などのようにいくつも疑問が生まれてきます。<br>\nラムダ式は省略できる部分が多く、そこも分からない原因になりやすいと感じました。</p>\n\n<p>また、<br>\n<em>いったいこれはrに何を代入してるんだ？</em><br>\nこれと同様の悩みがある方は<strong>無名関数</strong>も調べるとよいかと思われます。</p>\n\n<h1>\n<span id=\"で結局どうやって理解したの\" class=\"fragment\"></span><a href=\"#%E3%81%A7%E7%B5%90%E5%B1%80%E3%81%A9%E3%81%86%E3%82%84%E3%81%A3%E3%81%A6%E7%90%86%E8%A7%A3%E3%81%97%E3%81%9F%E3%81%AE\"><i class=\"fa fa-link\"></i></a>で、結局どうやって理解したの？</h1>\n\n<h2>\n<span id=\"streamを使ってみた\" class=\"fragment\"></span><a href=\"#stream%E3%82%92%E4%BD%BF%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F\"><i class=\"fa fa-link\"></i></a>Streamを使ってみた</h2>\n\n<p>ラムダ式はJava8で追加された機能ですが、<br>\n同時に<strong>Stream API</strong>という機能が追加されています。</p>\n\n<p>これはまさしくラムダ式を利用するための機能、<br>\nというよりStream APIを利用しやすくするために、<br>\nラムダ式が実装されたといっても過言ではないのでしょう。<br>\n（型推論の強化など様々な要因を含んでいるとは思いますが）</p>\n\n<p>これのおかげで私はラムダ式の使い方のイメージがつきました。</p>\n\n<h3>\n<span id=\"foreachの利用\" class=\"fragment\"></span><a href=\"#foreach%E3%81%AE%E5%88%A9%E7%94%A8\"><i class=\"fa fa-link\"></i></a>.forEach()の利用</h3>\n\n<p>さくっと例を交えて説明していきます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">ExIterable.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ExIterable</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"Apple\"</span><span class=\"o\">);</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"Banana\"</span><span class=\"o\">);</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"Cherry\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">forEach</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">));</span>\n        <span class=\"c1\">// Apple</span>\n        <span class=\"c1\">// Banana</span>\n        <span class=\"c1\">// Cherry</span>\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>この例では Apple, Banana, Cherry を要素に持つリストの中身をそれぞれ出力しています。<br>\nここでラムダ式を利用しているのは</p>\n\n<div class=\"code-frame\" data-lang=\"java;\"><div class=\"highlight\"><pre>list.forEach(s -&gt; System.out.println(s));\n</pre></div></div>\n\n<p>の部分ですね。</p>\n\n<p>日本語訳すると<br>\n<strong>listの中身を１つずつsに詰め込んでSystem.out.println(s)でlistの中身を1つずつ出力する。</strong><br>\nということになります。</p>\n\n<p>これって似たようなものを聞いたことはありませんか？</p>\n\n<p>そうですね<strong>拡張for文</strong>です。</p>\n\n<div class=\"code-frame\" data-lang=\"java;\"><div class=\"highlight\"><pre>for (String s : list) {\n    System.out.println(s);\n}\n</pre></div></div>\n\n<p>上記の拡張for文は先ほどのラムダ式を用いたものと同様の結果が得られます。</p>\n\n<p>とりあえずここで、<strong>ラムダ式は拡張for文の代わりになる！</strong>という１つの使い方を把握できました。<br>\n使える場所が１つでも分かると、そこから理解がしやすくなります。</p>\n\n<p>でもこれだけではラムダ式を用いる利点がそこまで見えてきません。<br>\n拡張for文でいいじゃん！となってしまいます。</p>\n\n<h3>\n<span id=\"maptointの利用\" class=\"fragment\"></span><a href=\"#maptoint%E3%81%AE%E5%88%A9%E7%94%A8\"><i class=\"fa fa-link\"></i></a>.mapToInt()の利用</h3>\n\n<p>では今度は[\"1\", \"2\", \"3\"]を要素に持つリストを利用してその数値の合計を表示してみましょう。<br>\nStringの形で格納されているのでintなどにパースする必要があります。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">ExForEachSum.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ExForEachSum</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"1\"</span><span class=\"o\">);</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"2\"</span><span class=\"o\">);</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"3\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2, 3]</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"o\">;</span>\n\n        <span class=\"k\">for</span> <span class=\"o\">(</span><span class=\"n\">String</span> <span class=\"n\">s</span> <span class=\"o\">:</span> <span class=\"n\">list</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n            <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n        <span class=\"o\">}</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">);</span> <span class=\"c1\">// 6</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>for文より先にint sum = 0 のように先に変数を準備する必要があったり、<br>\nfor文の中で加算をする必要があるなど、先ほどのようにただ出力するより手間が増えていますね。</p>\n\n<p>ではこれをStreamとラムダ式を用いて書いてみます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\">\n<div class=\"code-lang\"><span class=\"bold\">ExStreamSum.java</span></div>\n<div class=\"highlight\"><pre><span class=\"kd\">public</span> <span class=\"kd\">class</span> <span class=\"nc\">ExStreamSum</span> <span class=\"o\">{</span>\n    <span class=\"kd\">public</span> <span class=\"kd\">static</span> <span class=\"kt\">void</span> <span class=\"nf\">main</span><span class=\"o\">(</span><span class=\"n\">String</span><span class=\"o\">[]</span> <span class=\"n\">args</span><span class=\"o\">)</span> <span class=\"o\">{</span>\n\n        <span class=\"n\">List</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;</span> <span class=\"n\">list</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ArrayList</span><span class=\"o\">&lt;</span><span class=\"n\">String</span><span class=\"o\">&gt;();</span>\n\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"1\"</span><span class=\"o\">);</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"2\"</span><span class=\"o\">);</span>\n        <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">add</span><span class=\"o\">(</span><span class=\"s\">\"3\"</span><span class=\"o\">);</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">list</span><span class=\"o\">);</span> <span class=\"c1\">// [1, 2, 3]</span>\n\n        <span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span> <span class=\"c1\">// ListをStreamに変換する</span>\n                <span class=\"o\">.</span><span class=\"na\">mapToInt</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">))</span> <span class=\"c1\">// StreamをIntStreamに変換する</span>\n                <span class=\"o\">.</span><span class=\"na\">sum</span><span class=\"o\">();</span> <span class=\"c1\">// intに変換された要素を合計する</span>\n\n        <span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">);</span> <span class=\"c1\">// 6</span>\n\n    <span class=\"o\">}</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>ここでのmapToIntは受け取った要素をintに変換してStreamをIntStreamに変換するメソッドです。<br>\nそしてその引数に<strong>どうやって要素をintに変換するのか</strong>記述する必要があります。<br>\n勘のいい方はもうお分かりかと思いますが、<br>\nここで記述した s -&gt; Integer.parseInt(s) が要素を変換する方法を示したラムダ式です。<br>\n仮引数として受け取ったString sに対してInteger.parseIntを用いてパースしています。</p>\n\n<p>intに変換して要素を渡せばよいので下記のように3倍してみたり</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n        <span class=\"o\">.</span><span class=\"na\">mapToInt</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">Integer</span><span class=\"o\">.</span><span class=\"na\">parseInt</span><span class=\"o\">(</span><span class=\"n\">s</span><span class=\"o\">);</span>\n            <span class=\"k\">return</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"o\">;</span>\n        <span class=\"o\">})</span> \n        <span class=\"o\">.</span><span class=\"na\">sum</span><span class=\"o\">();</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">);</span> <span class=\"c1\">// 18</span>\n</pre></div></div>\n\n<p>はたまた、要素の中身を握りつぶしてとりあえず100にしたりもできます。</p>\n\n<div class=\"code-frame\" data-lang=\"java\"><div class=\"highlight\"><pre><span class=\"kt\">int</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"n\">list</span><span class=\"o\">.</span><span class=\"na\">stream</span><span class=\"o\">()</span>\n        <span class=\"o\">.</span><span class=\"na\">mapToInt</span><span class=\"o\">(</span><span class=\"n\">s</span> <span class=\"o\">-&gt;</span> <span class=\"o\">{</span>\n            <span class=\"k\">return</span> <span class=\"mi\">100</span><span class=\"o\">;</span> <span class=\"c1\">//とりあえず100を渡してみる</span>\n        <span class=\"o\">})</span> \n        <span class=\"o\">.</span><span class=\"na\">sum</span><span class=\"o\">();</span>\n<span class=\"n\">System</span><span class=\"o\">.</span><span class=\"na\">out</span><span class=\"o\">.</span><span class=\"na\">println</span><span class=\"o\">(</span><span class=\"n\">sum</span><span class=\"o\">);</span> <span class=\"c1\">// 300</span>\n</pre></div></div>\n\n<p>詳細は割愛しますが、<br>\nほかにもsortedとComparatorを用いてソートを行ったり、<br>\nfilterを用いてフィルターをかけたり、<br>\nStreamを通じて学ぶことでラムダ式の使い方を知ることができました。</p>\n\n<p>StreamAPIについては<br>\n<a href=\"https://qiita.com/takumi-n/items/369dd3fcb9ccb8fcfa44\" id=\"reference-ef27fb9eaf17f945cd6d\">Java Stream APIをいまさら入門</a><br>\nなどが詳しいと思われます。</p>\n\n<p>こういったことがラムダ式を用いてできるのは<strong>関数型インターフェース</strong>のおかげです。<br>\n気になった方はQiitaにも以下のような記事がありますのでご覧ください。<br>\n<a href=\"https://qiita.com/MuriNishimori/items/d5645ab085702f0d2100\" id=\"reference-16acda63598bccfffa67\">関数型インターフェースとは何か？(Java)</a></p>\n\n<p>関数型インターフェースを実装したオブジェクトを記述する代わりに、ラムダ式を記述することができる、<br>\nということが分かればなんとかやっていけると思います。</p>\n\n<h1>\n<span id=\"なんとか少しは使えるようになった\" class=\"fragment\"></span><a href=\"#%E3%81%AA%E3%82%93%E3%81%A8%E3%81%8B%E5%B0%91%E3%81%97%E3%81%AF%E4%BD%BF%E3%81%88%E3%82%8B%E3%82%88%E3%81%86%E3%81%AB%E3%81%AA%E3%81%A3%E3%81%9F\"><i class=\"fa fa-link\"></i></a>なんとか少しは使えるようになった</h1>\n\n<p>備忘録も兼ねて初めてQiita記事を書いてみました。</p>\n\n<p><strong>ローカル変数はFinalとして認識する</strong>ラムダの仕様に悩まされたり、<br>\nラムダの中の<strong>例外処理を外側からキャッチできなかったり</strong>（ラムダの仕様上当然か）<br>\nいくつか詰まるポイントはありますが、<br>\nStream APIと合わせて使う際のラムダ式の<strong>破壊力は抜群</strong>です。<br>\n(極論、関数型インターフェースの名前やメソッドを覚えていなくても書けてしまいます。)</p>\n\n<p>他言語で無名関数やlambdaを利用する際の基本的な考え方も学べるので、<br>\nぜひこの記事をご覧になった方もラムダ式の利用を試みていただければと思います。</p>\n\n<p>やはり<strong>意味が分からないものは使って覚える</strong>しかありませんね。</p>\n",
        "body": "新人SIerがJava8のラムダ式を使える（使えるとは言っていない）ようになるまでのメモ\n使い始めるまでにこけたところを列挙しています。\n大雑把に言えばStreamのおかげで簡単な使い方がわかりました。\n\n# ラムダ式？さっぱり分からない！\nラムダ式はJava8以降追加された機能で、\n関数型プログラミングやStreamなどと一緒に聞くことが多いかと思われます。\n\n私もif文やfor文を理解してしばらくしたころにラムダ式と関数型プログラミングの存在を知りました。\n\nそのときの率直な感想は\n**「なんだこれは、さっぱり分からない。」**\n\n## なぜラムダ式が分からないのか\n私の場合、大きく3点\n\n**1. ラムダ式という単語の意味が分からない**\n**2. ラムダ式の利点が分からない**\n**3. ラムダ式の書き方が分からない**\n\nが挙げられました。\n\n### 単語の意味が分からない\n一般的な人々にとっては**ラムダという単語になじみがない**はずです。\nそれに対してifなんかは意味を知っているので理解しやすい。\nこれは勉強するしかない。\n\nただ、ラムダ式については意味を説明されても**使い方を理解しなければ結局分からない**と思いました。\n\n### 利点が分からない\n```HelloWorldLambda.java\npublic class Main {\n\tpublic static void main(String[] args) {\n\t\tRunnable r = () -> System.out.println(\"Hello World\");\n\t\tr.run(); // Hello World\n\t}\n}\n```\nよくあるHello Worldの例です。\n今見ると簡単ですね。\n\nですが当時の私は\n「ふつうに System.out.println(\"Hellow World\"); するだけじゃダメなのか…？」\nと考えてしまっていました。\nこれだけではラムダ式の利点を把握できませんでした。\n\n### 書き方が分からない\n```ExLambda.java\nRunnable r = () -> System.out.println(\"Hello World\");\n```\n(仮引数) -> {処理} という文法でラムダ式は記述されます。\n\n厄介なことにこれまで学んできたJavaで -> なんて見た事がありません。\nしかも、上記の例では仮引数だと言っている割に、()の中身は空っぽです。\nこいつら｛｝はどこへ行ったんだ。\nいったいこれは**rに何を代入してるんだ？**\n\nなどのようにいくつも疑問が生まれてきます。\nラムダ式は省略できる部分が多く、そこも分からない原因になりやすいと感じました。\n\nまた、\n*いったいこれはrに何を代入してるんだ？*\nこれと同様の悩みがある方は**無名関数**も調べるとよいかと思われます。\n\n# で、結局どうやって理解したの？\n## Streamを使ってみた\nラムダ式はJava8で追加された機能ですが、\n同時に**Stream API**という機能が追加されています。\n\nこれはまさしくラムダ式を利用するための機能、\nというよりStream APIを利用しやすくするために、\nラムダ式が実装されたといっても過言ではないのでしょう。\n（型推論の強化など様々な要因を含んでいるとは思いますが）\n\nこれのおかげで私はラムダ式の使い方のイメージがつきました。\n\n### .forEach()の利用\nさくっと例を交えて説明していきます。\n\n```ExIterable.java\npublic class ExIterable {\n\tpublic static void main(String[] args) {\n\n\t\tList<String> list = new ArrayList<String>();\n\n\t\tlist.add(\"Apple\");\n\t\tlist.add(\"Banana\");\n\t\tlist.add(\"Cherry\");\n\n\t\tlist.forEach(s -> System.out.println(s));\n\t\t// Apple\n\t\t// Banana\n\t\t// Cherry\n\t}\n}\n```\nこの例では Apple, Banana, Cherry を要素に持つリストの中身をそれぞれ出力しています。\nここでラムダ式を利用しているのは\n\n```java;\nlist.forEach(s -> System.out.println(s));\n```\nの部分ですね。\n\n日本語訳すると\n**listの中身を１つずつsに詰め込んでSystem.out.println(s)でlistの中身を1つずつ出力する。**\nということになります。\n\nこれって似たようなものを聞いたことはありませんか？\n\nそうですね**拡張for文**です。\n\n```java;\nfor (String s : list) {\n\tSystem.out.println(s);\n}\n```\n\n上記の拡張for文は先ほどのラムダ式を用いたものと同様の結果が得られます。\n\nとりあえずここで、**ラムダ式は拡張for文の代わりになる！**という１つの使い方を把握できました。\n使える場所が１つでも分かると、そこから理解がしやすくなります。\n\nでもこれだけではラムダ式を用いる利点がそこまで見えてきません。\n拡張for文でいいじゃん！となってしまいます。\n\n### .mapToInt()の利用\nでは今度は[\"1\", \"2\", \"3\"]を要素に持つリストを利用してその数値の合計を表示してみましょう。\nStringの形で格納されているのでintなどにパースする必要があります。\n\n```ExForEachSum.java\npublic class ExForEachSum {\n\tpublic static void main(String[] args) {\n\n\t\tList<String> list = new ArrayList<String>();\n\n\t\tlist.add(\"1\");\n\t\tlist.add(\"2\");\n\t\tlist.add(\"3\");\n\n\t\tSystem.out.println(list); // [1, 2, 3]\n\n\t\tint sum = 0;\n\n\t\tfor (String s : list) {\n\t\t\tsum += Integer.parseInt(s);\n\t\t}\n\n\t\tSystem.out.println(sum); // 6\n\n\t}\n}\n```\nfor文より先にint sum = 0 のように先に変数を準備する必要があったり、\nfor文の中で加算をする必要があるなど、先ほどのようにただ出力するより手間が増えていますね。\n\nではこれをStreamとラムダ式を用いて書いてみます。\n\n```ExStreamSum.java\npublic class ExStreamSum {\n\tpublic static void main(String[] args) {\n\n\t\tList<String> list = new ArrayList<String>();\n\n\t\tlist.add(\"1\");\n\t\tlist.add(\"2\");\n\t\tlist.add(\"3\");\n\n\t\tSystem.out.println(list); // [1, 2, 3]\n\n\t\tint sum = list.stream() // ListをStreamに変換する\n\t\t\t\t.mapToInt(s -> Integer.parseInt(s)) // StreamをIntStreamに変換する\n\t\t\t\t.sum(); // intに変換された要素を合計する\n\n\t\tSystem.out.println(sum); // 6\n\n\t}\n}\n```\nここでのmapToIntは受け取った要素をintに変換してStreamをIntStreamに変換するメソッドです。\nそしてその引数に**どうやって要素をintに変換するのか**記述する必要があります。\n勘のいい方はもうお分かりかと思いますが、\nここで記述した s -> Integer.parseInt(s) が要素を変換する方法を示したラムダ式です。\n仮引数として受け取ったString sに対してInteger.parseIntを用いてパースしています。\n\nintに変換して要素を渡せばよいので下記のように3倍してみたり\n\n```.java\nint sum = list.stream()\n\t\t.mapToInt(s -> {\n\t\t\tint num = Integer.parseInt(s);\n\t\t\treturn num * 3;\n\t\t}) \n\t\t.sum();\nSystem.out.println(sum); // 18\n```\n\nはたまた、要素の中身を握りつぶしてとりあえず100にしたりもできます。\n\n```.java\nint sum = list.stream()\n\t\t.mapToInt(s -> {\n\t\t\treturn 100; //とりあえず100を渡してみる\n\t\t}) \n\t\t.sum();\nSystem.out.println(sum); // 300\n```\n\n詳細は割愛しますが、\nほかにもsortedとComparatorを用いてソートを行ったり、\nfilterを用いてフィルターをかけたり、\nStreamを通じて学ぶことでラムダ式の使い方を知ることができました。\n\nStreamAPIについては\n[Java Stream APIをいまさら入門](https://qiita.com/takumi-n/items/369dd3fcb9ccb8fcfa44)\nなどが詳しいと思われます。\n\nこういったことがラムダ式を用いてできるのは**関数型インターフェース**のおかげです。\n気になった方はQiitaにも以下のような記事がありますのでご覧ください。\n[関数型インターフェースとは何か？(Java)](https://qiita.com/MuriNishimori/items/d5645ab085702f0d2100)\n\n関数型インターフェースを実装したオブジェクトを記述する代わりに、ラムダ式を記述することができる、\nということが分かればなんとかやっていけると思います。\n\n# なんとか少しは使えるようになった\n備忘録も兼ねて初めてQiita記事を書いてみました。\n\n**ローカル変数はFinalとして認識する**ラムダの仕様に悩まされたり、\nラムダの中の**例外処理を外側からキャッチできなかったり**（ラムダの仕様上当然か）\nいくつか詰まるポイントはありますが、\nStream APIと合わせて使う際のラムダ式の**破壊力は抜群**です。\n(極論、関数型インターフェースの名前やメソッドを覚えていなくても書けてしまいます。)\n\n他言語で無名関数やlambdaを利用する際の基本的な考え方も学べるので、\nぜひこの記事をご覧になった方もラムダ式の利用を試みていただければと思います。\n\nやはり**意味が分からないものは使って覚える**しかありませんね。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T16:02:36+09:00",
        "group": null,
        "id": "820bdf48cc341a6445f0",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Java",
                "versions": []
            },
            {
                "name": "ラムダ式",
                "versions": []
            },
            {
                "name": "初心者",
                "versions": []
            },
            {
                "name": "java8",
                "versions": []
            }
        ],
        "title": "プログラミング初心者がラムダ式を使えるようになるまで",
        "updated_at": "2018-03-24T16:02:36+09:00",
        "url": "https://qiita.com/kuryus/items/820bdf48cc341a6445f0",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 0,
            "followers_count": 0,
            "github_login_name": "kuryus",
            "id": "kuryus",
            "items_count": 1,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 245349,
            "profile_image_url": "https://avatars1.githubusercontent.com/u/33342774?v=4",
            "twitter_screen_name": null,
            "website_url": null
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p><a href=\"https://camo.qiitausercontent.com/8a54f779e46b4384e1a6b07ee8ff1c43e815773b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f62306662356166352d663832372d363863342d653165662d6461646230366538333430652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/8a54f779e46b4384e1a6b07ee8ff1c43e815773b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f62306662356166352d663832372d363863342d653165662d6461646230366538333430652e706e67\" alt=\"ABCC04_1.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/b0fb5af5-f827-68c4-e1ef-dadb06e8340e.png\"></a><br>\n- <a href=\"https://not-522.appspot.com/contest/5174350583955456\" rel=\"nofollow noopener\" target=\"_blank\">バチャ</a>でC問題を解く<br>\n- 1問しか解けなかった。悲しいね。</p>\n\n<h1>\n<span id=\"abc016-友達の友達\" class=\"fragment\"></span><a href=\"#abc016-%E5%8F%8B%E9%81%94%E3%81%AE%E5%8F%8B%E9%81%94\"><i class=\"fa fa-link\"></i></a>ABC016 「<a href=\"https://beta.atcoder.jp/contests/abc016/tasks/abc016_3\" rel=\"nofollow noopener\" target=\"_blank\">友達の友達</a>」</h1>\n\n<h2>\n<span id=\"解法1自分でアルゴリズムを考える\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B3%951%E8%87%AA%E5%88%86%E3%81%A7%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>解法1：自分でアルゴリズムを考える</h2>\n\n<h3>\n<span id=\"最低条件を考えてみる\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E4%BD%8E%E6%9D%A1%E4%BB%B6%E3%82%92%E8%80%83%E3%81%88%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>最低条件を考えてみる</h3>\n\n<ul>\n<li>いきなりいろんなことを考えると頭が爆発する。</li>\n<li><p>なので、まずはAさんとBさんが友達の友達になる最低条件を考える。</p></li>\n<li>\n<p>AさんとBさんが友達の友達になる最低条件は以下の2つを満たすときである。</p>\n\n<ol>\n<li>AさんとBさんが友達でない</li>\n<li>AさんとCさん、BさんとCさんがそれぞれ友達である</li>\n</ol>\n</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/27e6df47c2170b39abd8c7c7359930128f972a86/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f65306265353930302d323864312d323031312d396231342d6631623465326236613739352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"192\" alt=\"1a.png\" src=\"https://camo.qiitausercontent.com/27e6df47c2170b39abd8c7c7359930128f972a86/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f65306265353930302d323864312d323031312d396231342d6631623465326236613739352e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/e0be5900-28d1-2011-9b14-f1b4e2b6a795.png\"></a></p>\n\n<ul>\n<li>上の図では適当にCさんを仲介人として挙げたが、AさんとBさんの仲介となる人は誰でもいい。大事なのは、AさんとBさんが友達の友達であるかどうかである。なので、AさんBさんを固定して、それ以外の人を仲介として全探索する。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/8057fd3220964b72ed51dbff8516a86113767927/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f66333732356639652d393338342d393037652d393361372d3833316335396661643630322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"402\" alt=\"ABCC04_2.png\" src=\"https://camo.qiitausercontent.com/8057fd3220964b72ed51dbff8516a86113767927/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f66333732356639652d393338342d393037652d393361372d3833316335396661643630322e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/f3725f9e-9384-907e-93a7-831c59fad602.png\"></a></p>\n\n<ul>\n<li>もしAさんとBさんを仲介する人が見つかり、かつAさんとBさんが友達でないならば、AさんとBさんは友達の友達となる。見つからなければ、AさんとBさんは友達の友達ではない。</li>\n</ul>\n\n<h3>\n<span id=\"全体的なことを考える\" class=\"fragment\"></span><a href=\"#%E5%85%A8%E4%BD%93%E7%9A%84%E3%81%AA%E3%81%93%E3%81%A8%E3%82%92%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>全体的なことを考える</h3>\n\n<ul>\n<li>AさんとBさんが友達の友達かどうかを判定する方法はわかった。</li>\n<li>次に、Aさんの友達の友達は何人になるかを考える。これは簡単で、AさんとBさんを固定して仲介を全探索すれば、AさんとBさんは友達の友達かどうかを判定できた。なので、次はAさんとCさんを固定して全探索すればAさんとCさんが友達かどうかを判定できる。次はAさんとDさんを固定して仲介を全探索。次はAさんとEさんを固定して仲介を全探索。</li>\n<li>以上の探索で条件が当てはまる個数が、Aさんの友達の友達の人数になる。</li>\n<li>B, C, D, Eさんの友達の友達は何人かを数える場合も同様の探索をすれば答えが求められる。</li>\n</ul>\n\n<h3>\n<span id=\"解法1のまとめ\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B3%951%E3%81%AE%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>解法1のまとめ</h3>\n\n<ol>\n<li>AさんとBさんが友達の友達かを判定するには、AさんとBさんを固定して仲介する人を全て調べる。条件に当てはまる人が一人でもいればAさんとBさんは友達の友達となる。</li>\n<li>Aさんの友達の友達の人数を求めるには、AさんとCさんを固定して仲介を全探索、AさんとDさんを固定して仲介を全探索...のように調べていく。条件に当てはまる人数がAさんの友達の友達の数となる。</li>\n</ol>\n\n<h3>\n<span id=\"コード\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>コード</h3>\n\n<div class=\"code-frame\" data-lang=\"C++\"><div class=\"highlight\"><pre><span class=\"cp\">#include &lt;bits/stdc++.h&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">][</span><span class=\"mi\">11</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"c1\">// 入力 </span>\n   <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">N</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n      <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n      <span class=\"n\">a</span><span class=\"o\">--</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">--</span><span class=\"p\">;</span>\n      <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">][</span><span class=\"n\">b</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"c1\">// iとjは友達の友達か？kを仲介として調べる</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// iの友達の友達の人数</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"kt\">bool</span> <span class=\"n\">exist</span> <span class=\"o\">=</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// iとjが友達の友達となる条件を満たすようなkがいるか？</span>\n         <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">j</span> <span class=\"o\">||</span> <span class=\"n\">j</span> <span class=\"o\">==</span> <span class=\"n\">k</span> <span class=\"o\">||</span> <span class=\"n\">k</span> <span class=\"o\">==</span> <span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">&amp;&amp;</span> <span class=\"o\">!</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">])</span> <span class=\"n\">exist</span> <span class=\"o\">=</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n         <span class=\"p\">}</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">exist</span><span class=\"p\">)</span> <span class=\"n\">cnt</span><span class=\"o\">++</span><span class=\"p\">;</span> <span class=\"c1\">// iとjが友達の友達ならカウントをインクリメント</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">cnt</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h2>\n<span id=\"解法2最短経路アルゴリズムを使う\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B3%952%E6%9C%80%E7%9F%AD%E7%B5%8C%E8%B7%AF%E3%82%A2%E3%83%AB%E3%82%B4%E3%83%AA%E3%82%BA%E3%83%A0%E3%82%92%E4%BD%BF%E3%81%86\"><i class=\"fa fa-link\"></i></a>解法2：最短経路アルゴリズムを使う</h2>\n\n<ul>\n<li>解法1と同様に、友達の友達となる条件を考える。</li>\n<li>ここでは解法1よりもグラフっぽく考えてみる。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/ef207027ab4eb993e6ebc51b3a9183f78c5b0c3c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f65366530636339662d356334352d633535322d623237662d3331383239333131366330372e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"466\" alt=\"ABCC04_3.png\" src=\"https://camo.qiitausercontent.com/ef207027ab4eb993e6ebc51b3a9183f78c5b0c3c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f65366530636339662d356334352d633535322d623237662d3331383239333131366330372e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/e6e0cc9f-5c45-c552-b27f-318293116c07.png\"></a></p>\n\n<ul>\n<li>最短距離が1だと友達となる。</li>\n<li>最短距離が3以上のときは赤の他人となる。\n\n<ul>\n<li>最短距離が3以上ということは、AにとってBは友達の友達の友達となるので赤の他人みたいなもの。</li>\n</ul>\n</li>\n<li>AとBが友達の友達となるには、AとBの最短距離が2であればいいことになる。</li>\n<li>最短経路アルゴリズムにはワーシャルフロイド法をつかう。たぶん一番実装が楽</li>\n</ul>\n\n<h3>\n<span id=\"コード-1\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89-1\"><i class=\"fa fa-link\"></i></a>コード</h3>\n\n<div class=\"code-frame\" data-lang=\"C++\"><div class=\"highlight\"><pre><span class=\"cp\">#include &lt;bits/stdc++.h&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">INF</span> <span class=\"o\">=</span> <span class=\"mf\">1e8</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"mi\">11</span><span class=\"p\">][</span><span class=\"mi\">11</span><span class=\"p\">];</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"c1\">// 初期化</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"mi\">11</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"mi\">11</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n         <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">INF</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"c1\">// 入力</span>\n   <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">N</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">M</span> <span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n      <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n      <span class=\"n\">a</span><span class=\"o\">--</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">--</span><span class=\"p\">;</span>\n      <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">][</span><span class=\"n\">b</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">b</span><span class=\"p\">][</span><span class=\"n\">a</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"c1\">// ワーシャルフロイド法</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">k</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">k</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">k</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n            <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">min</span><span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">],</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">k</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">k</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]);</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">i</span> <span class=\"o\">==</span> <span class=\"n\">j</span><span class=\"p\">)</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">B</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"n\">cnt</span><span class=\"o\">++</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n      <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">cnt</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h2>\n<span id=\"感想\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%B3\"><i class=\"fa fa-link\"></i></a>感想</h2>\n\n<ul>\n<li>解法1も2も自分で思いつける気がしない</li>\n<li>\n<strong>友達の友達となる最低条件を定義することが大事だった</strong>ように思う。</li>\n<li>最低条件が分かれば、あとはそれを全体に適応させるというイメージ...?</li>\n<li>この問題を見たときは一気にたくさんの処理をしないといけない気がして頭が爆発した。</li>\n<li>でも、Aさんの友達の友達は何人か、Bさんの友達の友達は何人か、Cさんの(ryのように、1人1人友達の友達の人数を順番に求めていけば思考がスッキリする。</li>\n<li>この問題を解くときに、なぜか仲介人を中心として考えてしまったため、内容が複雑に感じた。自分の中では<strong>1人1人について順番に考えていくというのが大事だったように思う。</strong>\n</li>\n<li>実際に問題を解くときも、一気にいろんな事を考えずにできるだけ単純に考えられるようにしたい。</li>\n</ul>\n\n<hr>\n\n<h1>\n<span id=\"abc017-ハイスコア\" class=\"fragment\"></span><a href=\"#abc017-%E3%83%8F%E3%82%A4%E3%82%B9%E3%82%B3%E3%82%A2\"><i class=\"fa fa-link\"></i></a>ABC017 「<a href=\"https://beta.atcoder.jp/contests/abc017/tasks/abc017_3\" rel=\"nofollow noopener\" target=\"_blank\">ハイスコア</a>」</h1>\n\n<ul>\n<li>いきなり計算量の少ない解法を考えるのは難しいので3段階に分けて計算量を落としていく</li>\n</ul>\n\n<h2>\n<span id=\"第1段階全探索\" class=\"fragment\"></span><a href=\"#%E7%AC%AC1%E6%AE%B5%E9%9A%8E%E5%85%A8%E6%8E%A2%E7%B4%A2\"><i class=\"fa fa-link\"></i></a>第1段階：全探索</h2>\n\n<ul>\n<li>遺跡 $i(1\\leq i \\leq N)$ に訪れるか訪れないかを全通り試す。</li>\n<li>例えば遺跡が3つある場合は以下のようになる。（o : 訪れる｜x : 訪れない）</li>\n</ul>\n\n<table>\n<thead>\n<tr>\n<th style=\"text-align: center\">遺跡1</th>\n<th style=\"text-align: center\">遺跡2</th>\n<th style=\"text-align: center\">遺跡3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align: center\">x</td>\n<td style=\"text-align: center\">x</td>\n<td style=\"text-align: center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">x</td>\n<td style=\"text-align: center\">x</td>\n<td style=\"text-align: center\">o</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">x</td>\n<td style=\"text-align: center\">o</td>\n<td style=\"text-align: center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">x</td>\n<td style=\"text-align: center\">o</td>\n<td style=\"text-align: center\">o</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">o</td>\n<td style=\"text-align: center\">x</td>\n<td style=\"text-align: center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">o</td>\n<td style=\"text-align: center\">x</td>\n<td style=\"text-align: center\">o</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">o</td>\n<td style=\"text-align: center\">o</td>\n<td style=\"text-align: center\">x</td>\n</tr>\n<tr>\n<td style=\"text-align: center\">o</td>\n<td style=\"text-align: center\">o</td>\n<td style=\"text-align: center\">o</td>\n</tr>\n</tbody>\n</table>\n\n<ul>\n<li>このように、訪れるか訪れないかの組み合わせを全列挙するには2つ方法がある。</li>\n<li>1つ目はビット全探索、2つ目は深さ優先探索である。</li>\n<li>どちらも本質的な処理は同じなので好きな方で実装すると良いと思う。</li>\n<li>計算量は$O(2^N\\times N \\times M)$ となる。</li>\n</ul>\n\n<h3>\n<span id=\"部分点コード30点\" class=\"fragment\"></span><a href=\"#%E9%83%A8%E5%88%86%E7%82%B9%E3%82%B3%E3%83%BC%E3%83%8930%E7%82%B9\"><i class=\"fa fa-link\"></i></a>部分点コード(30点)</h3>\n\n<ul>\n<li><a href=\"https://beta.atcoder.jp/contests/abc017/submissions/2247397\" rel=\"nofollow noopener\" target=\"_blank\">bit全探索のコード</a></li>\n<li><p><a href=\"https://beta.atcoder.jp/contests/abc017/submissions/2247431\" rel=\"nofollow noopener\" target=\"_blank\">深さ優先探索のコード</a></p></li>\n<li><p>ちなみに、処理はほとんど同じなのにbit全探索のコードはWAになって深さ優先探索がTLEになるのには理由がある。それは、bit全探索のコード中にある$2^N$ において、$N$が大きいとオーバーフローを起こして値がおかしくなるからである。</p></li>\n</ul>\n\n<h2>\n<span id=\"第2段階問題文を読み替える\" class=\"fragment\"></span><a href=\"#%E7%AC%AC2%E6%AE%B5%E9%9A%8E%E5%95%8F%E9%A1%8C%E6%96%87%E3%82%92%E8%AA%AD%E3%81%BF%E6%9B%BF%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>第2段階：問題文を読み替える</h2>\n\n<ul>\n<li>これについては、頑張って思いつくしかないです。</li>\n<li>問題文の「全ての宝石が揃ってはいけない」を「少なくとも取ってはいけない宝石が1種類ある」に読み替える。</li>\n<li>つまり、取ってはいけない宝石の種類を1つ固定して、それを取らないような遺跡に訪れれば良い。</li>\n<li>外のループで、絶対に取らない宝石の番号を固定する。中のループでは、取らないと決めた宝石を取らないような遺跡に訪れる。その結果、一番大きい値が答えとなる。</li>\n<li>計算量は$O(MN)$ となる。</li>\n<li>問題文を読み替えると解くのが劇的に簡単になる問題が割とあるので、問題文を読み替えて簡単にするという発想が大事なのかなーと思う。</li>\n</ul>\n\n<h3>\n<span id=\"部分点コード100点\" class=\"fragment\"></span><a href=\"#%E9%83%A8%E5%88%86%E7%82%B9%E3%82%B3%E3%83%BC%E3%83%89100%E7%82%B9\"><i class=\"fa fa-link\"></i></a>部分点コード(100点)</h3>\n\n<ul>\n<li><a href=\"https://beta.atcoder.jp/contests/abc017/submissions/2250267\" rel=\"nofollow noopener\" target=\"_blank\">部分点コード</a></li>\n</ul>\n\n<h2>\n<span id=\"第3段階集合として考える\" class=\"fragment\"></span><a href=\"#%E7%AC%AC3%E6%AE%B5%E9%9A%8E%E9%9B%86%E5%90%88%E3%81%A8%E3%81%97%E3%81%A6%E8%80%83%E3%81%88%E3%82%8B\"><i class=\"fa fa-link\"></i></a>第3段階：集合として考える</h2>\n\n<ul>\n<li>取ってはいけない宝石に注目するという点では第2段階と同じ方針でいく。</li>\n<li>第2段階の方針の本質は、「宝石 $i$ を取らないような遺跡を訪れる」だった。</li>\n<li>それを図にすると以下のようになる。黒い部分が求めたい部分となる。</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/46a0d910dcd3b9da1eb98b8b2fa7429e3559076d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f34313932646366392d323266352d343636322d653830632d3839636338306438316162662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"426\" alt=\"ABCC04_5.png\" src=\"https://camo.qiitausercontent.com/46a0d910dcd3b9da1eb98b8b2fa7429e3559076d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f34313932646366392d323266352d343636322d653830632d3839636338306438316162662e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/4192dcf9-22f5-4662-e80c-89cc80d81abf.png\"></a></p>\n\n<ul>\n<li>外側の丸が全体となり、内部は宝石 i を取るものと宝石 i を取らないものに分かれている</li>\n<li>この図を見ると気づきを得ることができる。</li>\n<li>全体のスコアから宝石 i を取る遺跡に訪れたときに獲得するスコアを引くことで、宝石 i を取らない遺跡に訪れたときに獲得するスコアが求められるのでは？</li>\n<li>つまり、第3段階の方針は「$全体-いらないデータ=欲しいデータ$を計算する」こととなる。</li>\n<li>よって、求めるべきものは以下の2つとなる。\n\n<ol>\n<li>全ての遺跡に訪れたときに獲得するスコア</li>\n<li>宝石iを取る遺跡に訪れたときに獲得するスコア</li>\n</ol>\n</li>\n<li>全ての遺跡に訪れたときに獲得するスコアは、入力で与えられるスコアを全て足し合わせれば求めることができる。</li>\n<li>宝石 i を取る時のスコアは入力例1を例にとって考えてみる。図にすると以下のようになる</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/2a292d18f3f536321fd780393779e61476c59f23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f34633637306261312d373630342d633733392d356332332d3632356637333866373930362e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"326\" alt=\"ABCC04_6.png\" src=\"https://camo.qiitausercontent.com/2a292d18f3f536321fd780393779e61476c59f23/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f34633637306261312d373630342d633733392d356332332d3632356637333866373930362e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/4c670ba1-7604-c739-5c23-625f738f7906.png\"></a></p>\n\n<ul>\n<li>宝石1を取ると30点、宝石2を取ると70点、宝石3を取ると95点、宝石4を取ると25点、宝石5を取ると25点、宝石6を取ると35点となる。</li>\n<li>つまり、宝石 i を取る時のスコアを表現する配列を作り、遺跡に訪れたときに獲得する宝石の範囲にスコアを足せば欲しいデータを得ることができる。 </li>\n<li>実装にはいもす法を使うが、ここでは説明しない。</li>\n</ul>\n\n<h3>\n<span id=\"acコード\" class=\"fragment\"></span><a href=\"#ac%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ACコード</h3>\n\n<div class=\"code-frame\" data-lang=\"C++\"><div class=\"highlight\"><pre><span class=\"cp\">#include &lt;bits/stdc++.h&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"k\">const</span> <span class=\"kt\">int</span> <span class=\"n\">MM</span> <span class=\"o\">=</span> <span class=\"mi\">111111</span><span class=\"p\">;</span> <span class=\"c1\">// Mの最大値。少し多めに取る</span>\n<span class=\"kt\">int</span> <span class=\"n\">N</span><span class=\"p\">,</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">imos</span><span class=\"p\">[</span><span class=\"n\">MM</span><span class=\"p\">];</span> <span class=\"c1\">// いもす法を使うための配列</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">N</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">M</span><span class=\"p\">;</span>\n   <span class=\"kt\">long</span> <span class=\"kt\">long</span> <span class=\"n\">sum</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"c1\">// 全体の合計スコア</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">N</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">l</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n      <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">l</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">r</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n      <span class=\"n\">l</span><span class=\"o\">--</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"o\">--</span><span class=\"p\">;</span>\n      <span class=\"n\">imos</span><span class=\"p\">[</span><span class=\"n\">l</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"p\">,</span> <span class=\"n\">imos</span><span class=\"p\">[</span><span class=\"n\">r</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-=</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n      <span class=\"n\">sum</span> <span class=\"o\">+=</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">M</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">imos</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">imos</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">];</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"n\">sort</span><span class=\"p\">(</span><span class=\"n\">imos</span><span class=\"p\">,</span> <span class=\"n\">imos</span><span class=\"o\">+</span><span class=\"n\">M</span><span class=\"p\">);</span>\n   <span class=\"c1\">// 全体 - 取ったときに一番スコアが少ない宝石</span>\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">sum</span> <span class=\"o\">-</span> <span class=\"n\">imos</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h2>\n<span id=\"感想-1\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%B3-1\"><i class=\"fa fa-link\"></i></a>感想</h2>\n\n<ul>\n<li>むっっっずうううううううううううううううううううううう。難しい。。。</li>\n<li>全探索はかろうじて思いつくけど</li>\n<li>問題文の「全ての宝石が揃ってはいけない」を「少なくとも取ってはいけない宝石が1種類ある」に読み替える部分、あれが無理だね。少なくとも1つだけって言う表現、中学数学とかでよく見かけた希ガス。</li>\n<li>問題文の読み替え、苦手なんだよなー。</li>\n<li>でも問題文を読み替えることで難易度が激減する問題が結構あったりするからな－。</li>\n<li>ということで、この問題で大事だったのは<strong>問題文の読み替え</strong>だった。</li>\n<li>取ってはいけない宝石を固定するっていうのも大事だよねー、多分。</li>\n<li><strong>計算量を落とすときは値を固定するっていう考えをよく使う気がする。</strong></li>\n<li>つまり、固定できそうな値をひとつみければ計算量が落ちるのでは？？？？？とか思ったり</li>\n<li>あと、図を書くと方針がつかめることがよくある気がする。</li>\n<li>今回の場合、「全体」の集合を書いて、その中を「宝石iを取る」「宝石iを取らない」に分けた。</li>\n<li>ベン図を書くと問題文中の値とかを綺麗に分けて考えられるからいいと思う。たぶん。</li>\n<li>こんだけ長々と説明しないと自分で理解できないのでとても悲しいね。みんななんでこんな問題解けるんだ？たぶん異星人の血とか混ざってて強いんだと思う。</li>\n</ul>\n\n<h1>\n<span id=\"abc018-菱型カウント\" class=\"fragment\"></span><a href=\"#abc018-%E8%8F%B1%E5%9E%8B%E3%82%AB%E3%82%A6%E3%83%B3%E3%83%88\"><i class=\"fa fa-link\"></i></a>ABC018 「<a href=\"https://beta.atcoder.jp/contests/abc018/tasks/abc018_3\" rel=\"nofollow noopener\" target=\"_blank\">菱型カウント</a>」</h1>\n\n<ul>\n<li>いきなり計算量が少ない解法を考えるのは難しいので、2段階に分けて計算量を落とす</li>\n</ul>\n\n<h2>\n<span id=\"第1段階全探索-1\" class=\"fragment\"></span><a href=\"#%E7%AC%AC1%E6%AE%B5%E9%9A%8E%E5%85%A8%E6%8E%A2%E7%B4%A2-1\"><i class=\"fa fa-link\"></i></a>第1段階：全探索</h2>\n\n<ul>\n<li>以下の操作を全てのマスについて行う\n\n<ol>\n<li>1つのマスを菱形の中央とする。</li>\n<li>中央からのマンハッタン距離$K-1$以内が全て<code>o</code>であればそのマスを中心とした菱形が作れる。</li>\n</ol>\n</li>\n<li>計算量は$O(RCK^2)$ となる。</li>\n</ul>\n\n<h3>\n<span id=\"部分点コード30点-1\" class=\"fragment\"></span><a href=\"#%E9%83%A8%E5%88%86%E7%82%B9%E3%82%B3%E3%83%BC%E3%83%8930%E7%82%B9-1\"><i class=\"fa fa-link\"></i></a>部分点コード(30点)</h3>\n\n<ul>\n<li><a href=\"https://beta.atcoder.jp/contests/abc018/submissions/2248507\" rel=\"nofollow noopener\" target=\"_blank\">部分点コード</a></li>\n</ul>\n\n<h2>\n<span id=\"第2段階\" class=\"fragment\"></span><a href=\"#%E7%AC%AC2%E6%AE%B5%E9%9A%8E\"><i class=\"fa fa-link\"></i></a>第2段階：</h2>\n\n<h3>\n<span id=\"考察の流れ\" class=\"fragment\"></span><a href=\"#%E8%80%83%E5%AF%9F%E3%81%AE%E6%B5%81%E3%82%8C\"><i class=\"fa fa-link\"></i></a>考察の流れ</h3>\n\n<ul>\n<li>全てのマスを見るという操作は外せそうにない。これを外すと処理が面倒になりそう(直感)</li>\n<li>なので、菱形を素早く判定する方法を考える。</li>\n<li>$K \\times K$のマス目を全て見なくても菱形だと判定するにはどうすれば...？</li>\n<li>菱形判定を$O(K^2)$ から計算量を減らすには、$O(K)$くらいが妥当かなー？</li>\n<li>菱形、横から見るか？縦から見るか？</li>\n<li>突然ですが、ここである考え方を使います。それは、<strong>データ列が現れたときはとりあえず累積和を取ってみる</strong>というものです。計算量を落とす考察に行き詰まったらとりあえず累積和を取ります。自分もこの考え方に何度か救われました。</li>\n<li>とりあえず<code>o</code>を$1$、<code>x</code>を$0$とした整数型の配列を作ります。</li>\n<li>2次元座標だから2次元累積和を取ろうか？でも菱形は正方形じゃないから扱いにくそう</li>\n<li>1次元の累積和を考えてみよう。こんな感じでいろいろ実験してみる。</li>\n<li>ここで、縦に連続した値が大事そうだということに気がつく。この値を見れば、上にどれだけ<code>o</code>があるのかを$O(1)$で求めることができる。なんかこれ使えそうじゃない？</li>\n<li>菱形の列を左から走査する。そのとき菱形の底の値を見て、全ての底の値が菱形が作れそうな値になっていたら菱形を作ることができる。このとき見るのは$K$個だけなので、計算量が一つ落とせた！やったぜ！</li>\n<li>考察終了！</li>\n</ul>\n\n<h3>\n<span id=\"解法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解法</h3>\n\n<p><a href=\"https://camo.qiitausercontent.com/73eac21788ad1db63cc734c633840d20d6a549a1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f39663038366534302d316636342d383365662d366663632d3739373061633237373163332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"318\" alt=\"ABCC04_4.png\" src=\"https://camo.qiitausercontent.com/73eac21788ad1db63cc734c633840d20d6a549a1/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f39663038366534302d316636342d383365662d366663632d3739373061633237373163332e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/9f086e40-1f64-83ef-6fcc-7970ac2771c3.png\"></a></p>\n\n<ul>\n<li><p>与えられた長方形を縦に見て、連続したマスをカウントする。</p></li>\n<li><p>例えば、入力例3が与えられたとき、縦に連続してカウントした長方形は上の図のようになる。</p></li>\n<li><p>そして、マス目に対して菱形を当てはめる。そして、当てはめた場所と対応する赤い数字を見る</p></li>\n<li><p>見ているマスについて、菱形の底の数字が全てが赤い数字以上なら菱形をつくることができる。</p></li>\n<li>\n<p>全体的な計算量は$O(RCK)$ となる。</p>\n\n<ul>\n<li>部分点解法では全てのマスについて$K\\times K$個の菱形全体をみた。</li>\n<li>満点解法では菱形の底の数字だけを見た。これは菱形の横の長さなので$K$個だけをみたことなる。</li>\n<li>なので、部分点解法の計算量の$K$が1つ落とせた。</li>\n</ul>\n</li>\n</ul>\n\n<p>​</p>\n\n<h3>\n<span id=\"acコード-1\" class=\"fragment\"></span><a href=\"#ac%E3%82%B3%E3%83%BC%E3%83%89-1\"><i class=\"fa fa-link\"></i></a>ACコード</h3>\n\n<div class=\"code-frame\" data-lang=\"C++\"><div class=\"highlight\"><pre><span class=\"cp\">#include &lt;bits/stdc++.h&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"n\">R</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">,</span> <span class=\"n\">K</span><span class=\"p\">;</span>\n<span class=\"kt\">int</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">555</span><span class=\"p\">][</span><span class=\"mi\">555</span><span class=\"p\">];</span>\n\n<span class=\"kt\">bool</span> <span class=\"nf\">check</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"n\">K</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;=</span> <span class=\"n\">K</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"n\">K</span> <span class=\"o\">-</span> <span class=\"n\">abs</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">);</span> <span class=\"c1\">// yからnumだけ座標が下がる</span>\n      <span class=\"kt\">int</span> <span class=\"n\">nx</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">ny</span> <span class=\"o\">=</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"n\">num</span><span class=\"p\">;</span> <span class=\"c1\">// nx, nyが赤い数字の座標となる</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">nx</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">nx</span> <span class=\"o\">&gt;=</span> <span class=\"n\">C</span> <span class=\"o\">||</span> <span class=\"n\">ny</span> <span class=\"o\">&lt;</span> <span class=\"mi\">0</span> <span class=\"o\">||</span> <span class=\"n\">ny</span> <span class=\"o\">&gt;=</span> <span class=\"n\">R</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 範囲外ならfalse</span>\n      <span class=\"kt\">int</span> <span class=\"n\">need</span> <span class=\"o\">=</span> <span class=\"n\">num</span> <span class=\"o\">*</span> <span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"c1\">// 縦に見た、必要な菱形の長さ</span>\n      <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">ny</span><span class=\"p\">][</span><span class=\"n\">nx</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">need</span><span class=\"p\">)</span> <span class=\"k\">return</span> <span class=\"nb\">false</span><span class=\"p\">;</span> <span class=\"c1\">// 底の値が必要な値に達していないならfalse</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"k\">return</span> <span class=\"nb\">true</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">R</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">C</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">K</span><span class=\"p\">;</span>\n   <span class=\"n\">K</span><span class=\"o\">--</span><span class=\"p\">;</span> <span class=\"c1\">// デクリメントした方が都合が良い</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">R</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">C</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"kt\">char</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n         <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n         <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">][</span><span class=\"n\">j</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">b</span> <span class=\"o\">==</span> <span class=\"sc\">'o'</span><span class=\"p\">;</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"c1\">// 縦の連続したマスについて累積和</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">C</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">R</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"o\">!</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">])</span> <span class=\"k\">continue</span><span class=\"p\">;</span>\n         <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">j</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"n\">i</span><span class=\"p\">];</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n\n   <span class=\"kt\">int</span> <span class=\"n\">ans</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n   <span class=\"c1\">// 全てのマスについて調べる</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">R</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span> <span class=\"n\">j</span> <span class=\"o\">&lt;</span> <span class=\"n\">C</span><span class=\"p\">;</span> <span class=\"n\">j</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n         <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">check</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">j</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n            <span class=\"n\">ans</span><span class=\"o\">++</span><span class=\"p\">;</span>\n         <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">ans</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h3>\n<span id=\"感想-2\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%B3-2\"><i class=\"fa fa-link\"></i></a>感想</h3>\n\n<ul>\n<li>自分が思いつくとしたらこんな感じだろうって感じで考察書いたけど、こんなん普通思いつかなくね？</li>\n<li>しかも、実装めっちゃバグるし。こんなの時間内に通せねーよ。<del>このはげええええええ！！</del>\n</li>\n<li>$R, C, K$ の最大値はそれぞれ$500$だから$RCK_{MAX}=1.25\\times 10^8$ になるんだが、計算量ギリッギリじゃね？</li>\n<li>どうやらBFSで解くと、さらに計算量が落とせるみたい。わからないので誰か記事書いて！</li>\n</ul>\n\n<h1>\n<span id=\"abc019-高橋くんと魔法の箱\" class=\"fragment\"></span><a href=\"#abc019-%E9%AB%98%E6%A9%8B%E3%81%8F%E3%82%93%E3%81%A8%E9%AD%94%E6%B3%95%E3%81%AE%E7%AE%B1\"><i class=\"fa fa-link\"></i></a>ABC019 「<a href=\"https://beta.atcoder.jp/contests/abc019/tasks/abc019_3\" rel=\"nofollow noopener\" target=\"_blank\">高橋くんと魔法の箱</a>」</h1>\n\n<h2>\n<span id=\"考察\" class=\"fragment\"></span><a href=\"#%E8%80%83%E5%AF%9F\"><i class=\"fa fa-link\"></i></a>考察</h2>\n\n<ul>\n<li>$x$ を入れたときと$2x$ を入れたときに出てくる整数は同じである。</li>\n<li>つまり、$x$と$2x$ は仲間である。</li>\n<li>$x$の仲間は他にいないだろうか？という事を考える。</li>\n</ul>\n\n<p>$$<br>\nx ⇔ 2x \\<br>\nx'=2x とする。\\<br>\nx'⇔2x'\\<br>\n展開すると \\<br>\n2x⇔4xとなる。\\<br>\n繋げると\\<br>\nx⇔2x⇔4xになる。<br>\n$$</p>\n\n<ul>\n<li>これを繰り返していくと、$x, 2x, 4x, 8x, 16x,..$ のようになることがわかる。</li>\n<li>つまり、$x$と、$2^{n}x$ は同じグループとなる。</li>\n<li>入力された値を$2$で割り切れなくなるまで割った数字をそのグループの代表の数字とする。</li>\n<li>その数字の種類が答えとなる。</li>\n<li>具体的な数字で考えると以下のようになる</li>\n</ul>\n\n<p><a href=\"https://camo.qiitausercontent.com/a9f207fe3259b269a86c148e861c975001a369be/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f34363461323263642d323937322d333636372d373830382d3363396439653232653465622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"535\" alt=\"ABCC04_7.png\" src=\"https://camo.qiitausercontent.com/a9f207fe3259b269a86c148e861c975001a369be/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3231383538342f34363461323263642d323937322d333636372d373830382d3363396439653232653465622e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/464a22cd-2972-3667-7808-3c9d9e22e4eb.png\"></a></p>\n\n<h3>\n<span id=\"コード-2\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%BC%E3%83%89-2\"><i class=\"fa fa-link\"></i></a>コード</h3>\n\n<div class=\"code-frame\" data-lang=\"C++\"><div class=\"highlight\"><pre><span class=\"cp\">#include &lt;bits/stdc++.h&gt;\n</span><span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n   <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"n\">x</span> <span class=\"o\">/=</span> <span class=\"mi\">2</span><span class=\"p\">;</span>\n   <span class=\"p\">}</span>\n   <span class=\"k\">return</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n   <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n   <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span><span class=\"p\">;</span>\n   <span class=\"n\">set</span><span class=\"o\">&lt;</span><span class=\"kt\">int</span><span class=\"o\">&gt;</span> <span class=\"n\">s</span><span class=\"p\">;</span>\n   <span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">n</span><span class=\"p\">;</span> <span class=\"n\">i</span><span class=\"o\">++</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n      <span class=\"kt\">int</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n      <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">x</span><span class=\"p\">;</span>\n      <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">));</span>\n   <span class=\"p\">}</span>\n   <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">s</span><span class=\"p\">.</span><span class=\"n\">size</span><span class=\"p\">()</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">endl</span><span class=\"p\">;</span>\n\n   <span class=\"k\">return</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div></div>\n\n<h2>\n<span id=\"感想-3\" class=\"fragment\"></span><a href=\"#%E6%84%9F%E6%83%B3-3\"><i class=\"fa fa-link\"></i></a>感想</h2>\n\n<ul>\n<li>この問題で大事だったのはグループ分けの法則がつかめるかどうか？だと思う。</li>\n<li>難しくね？この問題。毎回言ってるけど</li>\n<li>$x, 2x,4x, 8x, ..$が仲間だと見抜けなければおしまい。</li>\n<li>自分で解説書いたけど、自力で解ける気がしない。</li>\n<li>にゃーん</li>\n</ul>\n\n<hr>\n\n<h1>\n<span id=\"abc020-壁抜け\" class=\"fragment\"></span><a href=\"#abc020-%E5%A3%81%E6%8A%9C%E3%81%91\"><i class=\"fa fa-link\"></i></a>ABC020 「<a href=\"https://beta.atcoder.jp/contests/abc020/tasks/abc020_c\" rel=\"nofollow noopener\" target=\"_blank\">壁抜け</a>」</h1>\n\n<ul>\n<li>これ、いろいろ考えたんですがマジでわかりません。</li>\n<li>記事が少ないので誰か書いてーーーーー！！！</li>\n</ul>\n\n<h1>\n<span id=\"最後に\" class=\"fragment\"></span><a href=\"#%E6%9C%80%E5%BE%8C%E3%81%AB\"><i class=\"fa fa-link\"></i></a>最後に</h1>\n\n<ul>\n<li>間違ってるところとかあったら教えてほしいです</li>\n</ul>\n",
        "body": "![ABCC04_1.png](https://qiita-image-store.s3.amazonaws.com/0/218584/b0fb5af5-f827-68c4-e1ef-dadb06e8340e.png)\n- [バチャ](https://not-522.appspot.com/contest/5174350583955456)でC問題を解く\n- 1問しか解けなかった。悲しいね。\n\n\n# ABC016 「[友達の友達](https://beta.atcoder.jp/contests/abc016/tasks/abc016_3)」\n\n## 解法1：自分でアルゴリズムを考える\n\n### 最低条件を考えてみる\n\n- いきなりいろんなことを考えると頭が爆発する。\n- なので、まずはAさんとBさんが友達の友達になる最低条件を考える。\n\n\n- AさんとBさんが友達の友達になる最低条件は以下の2つを満たすときである。\n  1. AさんとBさんが友達でない\n  2. AさんとCさん、BさんとCさんがそれぞれ友達である\n\n<img width=\"192\" alt=\"1a.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/e0be5900-28d1-2011-9b14-f1b4e2b6a795.png\">\n\n\n\n- 上の図では適当にCさんを仲介人として挙げたが、AさんとBさんの仲介となる人は誰でもいい。大事なのは、AさんとBさんが友達の友達であるかどうかである。なので、AさんBさんを固定して、それ以外の人を仲介として全探索する。\n\n<img width=\"402\" alt=\"ABCC04_2.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/f3725f9e-9384-907e-93a7-831c59fad602.png\">\n\n\n- もしAさんとBさんを仲介する人が見つかり、かつAさんとBさんが友達でないならば、AさんとBさんは友達の友達となる。見つからなければ、AさんとBさんは友達の友達ではない。\n\n\n### 全体的なことを考える\n\n- AさんとBさんが友達の友達かどうかを判定する方法はわかった。\n- 次に、Aさんの友達の友達は何人になるかを考える。これは簡単で、AさんとBさんを固定して仲介を全探索すれば、AさんとBさんは友達の友達かどうかを判定できた。なので、次はAさんとCさんを固定して全探索すればAさんとCさんが友達かどうかを判定できる。次はAさんとDさんを固定して仲介を全探索。次はAさんとEさんを固定して仲介を全探索。\n- 以上の探索で条件が当てはまる個数が、Aさんの友達の友達の人数になる。\n- B, C, D, Eさんの友達の友達は何人かを数える場合も同様の探索をすれば答えが求められる。\n\n### 解法1のまとめ\n\n1. AさんとBさんが友達の友達かを判定するには、AさんとBさんを固定して仲介する人を全て調べる。条件に当てはまる人が一人でもいればAさんとBさんは友達の友達となる。\n2. Aさんの友達の友達の人数を求めるには、AさんとCさんを固定して仲介を全探索、AさんとDさんを固定して仲介を全探索...のように調べていく。条件に当てはまる人数がAさんの友達の友達の数となる。\n\n\n\n### コード\n\n```C++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint N, M;\nint B[11][11];\n\nint main() {\n   // 入力 \n   cin >> N >> M;\n   for (int i = 0; i < M; i++) {\n      int a, b;\n      cin >> a >> b;\n      a--, b--;\n      B[a][b] = B[b][a] = 1;\n   }\n\n   // iとjは友達の友達か？kを仲介として調べる\n   for (int i = 0; i < N; i++) {\n      int cnt = 0; // iの友達の友達の人数\n      for (int j = 0; j < N; j++) {\n         bool exist = false; // iとjが友達の友達となる条件を満たすようなkがいるか？\n         for (int k = 0; k < N; k++) {\n            if (i == j || j == k || k == i) continue;\n            if (B[i][k] && B[k][j] && !B[i][j]) exist = true;\n         }\n         if (exist) cnt++; // iとjが友達の友達ならカウントをインクリメント\n      }\n      cout << cnt << endl;\n   }\n\n   return 0;\n}\n```\n\n\n\n\n## 解法2：最短経路アルゴリズムを使う\n\n- 解法1と同様に、友達の友達となる条件を考える。\n- ここでは解法1よりもグラフっぽく考えてみる。\n\n<img width=\"466\" alt=\"ABCC04_3.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/e6e0cc9f-5c45-c552-b27f-318293116c07.png\">\n\n- 最短距離が1だと友達となる。\n- 最短距離が3以上のときは赤の他人となる。\n  - 最短距離が3以上ということは、AにとってBは友達の友達の友達となるので赤の他人みたいなもの。\n- AとBが友達の友達となるには、AとBの最短距離が2であればいいことになる。\n- 最短経路アルゴリズムにはワーシャルフロイド法をつかう。たぶん一番実装が楽\n\n### コード\n\n```C++\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int INF = 1e8;\nint N, M;\nint B[11][11];\n\nint main() {\n   // 初期化\n   for (int i = 0; i < 11; i++) {\n      for (int j = 0; j < 11; j++) {\n         if (i == j) continue;\n         B[i][j] = INF;\n      }\n   }\n\n   // 入力\n   cin >> N >> M;\n   for (int i = 0; i < M ; i++) {\n      int a, b;\n      cin >> a >> b;\n      a--, b--;\n      B[a][b] = B[b][a] = 1;\n   }\n\n   // ワーシャルフロイド法\n   for (int k = 0; k < N; k++) {\n      for (int i = 0; i < N; i++) {\n         for (int j = 0; j < N; j++) {\n            B[i][j] = min(B[i][j], B[i][k] + B[k][j]);\n         }\n      }\n   }\n\n   for (int i = 0; i < N; i++) {\n      int cnt = 0;\n      for (int j = 0; j < N; j++) {\n         if (i == j) continue;\n         if (B[i][j] == 2) cnt++;\n      }\n      cout << cnt << endl;\n   }\n\n   return 0;\n}\n```\n\n\n\n## 感想\n\n- 解法1も2も自分で思いつける気がしない\n- **友達の友達となる最低条件を定義することが大事だった**ように思う。\n- 最低条件が分かれば、あとはそれを全体に適応させるというイメージ...?\n- この問題を見たときは一気にたくさんの処理をしないといけない気がして頭が爆発した。\n- でも、Aさんの友達の友達は何人か、Bさんの友達の友達は何人か、Cさんの(ryのように、1人1人友達の友達の人数を順番に求めていけば思考がスッキリする。\n- この問題を解くときに、なぜか仲介人を中心として考えてしまったため、内容が複雑に感じた。自分の中では**1人1人について順番に考えていくというのが大事だったように思う。**\n- 実際に問題を解くときも、一気にいろんな事を考えずにできるだけ単純に考えられるようにしたい。\n\n\n---\n\n# ABC017 「[ハイスコア](https://beta.atcoder.jp/contests/abc017/tasks/abc017_3)」\n\n- いきなり計算量の少ない解法を考えるのは難しいので3段階に分けて計算量を落としていく\n\n## 第1段階：全探索\n\n- 遺跡 $i(1\\leq i \\leq N)$ に訪れるか訪れないかを全通り試す。\n- 例えば遺跡が3つある場合は以下のようになる。（o : 訪れる｜x : 訪れない）\n\n| 遺跡1 | 遺跡2 | 遺跡3 |\n| :---: | :---: | :---: |\n|   x   |   x   |   x   |\n|   x   |   x   |   o   |\n|   x   |   o   |   x   |\n|   x   |   o   |   o   |\n|   o   |   x   |   x   |\n|   o   |   x   |   o   |\n|   o   |   o   |   x   |\n|   o   |   o   |   o   |\n\n- このように、訪れるか訪れないかの組み合わせを全列挙するには2つ方法がある。\n- 1つ目はビット全探索、2つ目は深さ優先探索である。\n- どちらも本質的な処理は同じなので好きな方で実装すると良いと思う。\n- 計算量は$O(2^N\\times N \\times M)$ となる。\n\n### 部分点コード(30点)\n\n- [bit全探索のコード](https://beta.atcoder.jp/contests/abc017/submissions/2247397)\n- [深さ優先探索のコード](https://beta.atcoder.jp/contests/abc017/submissions/2247431)\n\n\n- ちなみに、処理はほとんど同じなのにbit全探索のコードはWAになって深さ優先探索がTLEになるのには理由がある。それは、bit全探索のコード中にある$2^N$ において、$N$が大きいとオーバーフローを起こして値がおかしくなるからである。\n\n\n\n## 第2段階：問題文を読み替える\n\n- これについては、頑張って思いつくしかないです。\n- 問題文の「全ての宝石が揃ってはいけない」を「少なくとも取ってはいけない宝石が1種類ある」に読み替える。\n- つまり、取ってはいけない宝石の種類を1つ固定して、それを取らないような遺跡に訪れれば良い。\n- 外のループで、絶対に取らない宝石の番号を固定する。中のループでは、取らないと決めた宝石を取らないような遺跡に訪れる。その結果、一番大きい値が答えとなる。\n- 計算量は$O(MN)$ となる。\n- 問題文を読み替えると解くのが劇的に簡単になる問題が割とあるので、問題文を読み替えて簡単にするという発想が大事なのかなーと思う。\n\n### 部分点コード(100点)\n\n- [部分点コード](https://beta.atcoder.jp/contests/abc017/submissions/2250267)\n\n\n\n## 第3段階：集合として考える\n\n- 取ってはいけない宝石に注目するという点では第2段階と同じ方針でいく。\n- 第2段階の方針の本質は、「宝石 $i$ を取らないような遺跡を訪れる」だった。\n- それを図にすると以下のようになる。黒い部分が求めたい部分となる。\n\n<img width=\"426\" alt=\"ABCC04_5.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/4192dcf9-22f5-4662-e80c-89cc80d81abf.png\">\n\n\n- 外側の丸が全体となり、内部は宝石 i を取るものと宝石 i を取らないものに分かれている\n- この図を見ると気づきを得ることができる。\n- 全体のスコアから宝石 i を取る遺跡に訪れたときに獲得するスコアを引くことで、宝石 i を取らない遺跡に訪れたときに獲得するスコアが求められるのでは？\n- つまり、第3段階の方針は「$全体-いらないデータ=欲しいデータ$を計算する」こととなる。\n- よって、求めるべきものは以下の2つとなる。\n  1. 全ての遺跡に訪れたときに獲得するスコア\n  2. 宝石iを取る遺跡に訪れたときに獲得するスコア\n- 全ての遺跡に訪れたときに獲得するスコアは、入力で与えられるスコアを全て足し合わせれば求めることができる。\n- 宝石 i を取る時のスコアは入力例1を例にとって考えてみる。図にすると以下のようになる\n\n<img width=\"326\" alt=\"ABCC04_6.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/4c670ba1-7604-c739-5c23-625f738f7906.png\">\n\n\n- 宝石1を取ると30点、宝石2を取ると70点、宝石3を取ると95点、宝石4を取ると25点、宝石5を取ると25点、宝石6を取ると35点となる。\n- つまり、宝石 i を取る時のスコアを表現する配列を作り、遺跡に訪れたときに獲得する宝石の範囲にスコアを足せば欲しいデータを得ることができる。 \n- 実装にはいもす法を使うが、ここでは説明しない。\n\n### ACコード\n\n```C++\n#include <bits/stdc++.h>\nusing namespace std;\n\nconst int MM = 111111; // Mの最大値。少し多めに取る\nint N, M;\nint imos[MM]; // いもす法を使うための配列\n\nint main() {\n   cin >> N >> M;\n   long long sum = 0; // 全体の合計スコア\n   for (int i = 0; i < N; i++) {\n      int l, r, s;\n      cin >> l >> r >> s;\n      l--, r--;\n      imos[l] += s, imos[r+1] -= s;\n      sum += s;\n   }\n\n   for (int i = 1; i <= M; i++) {\n      imos[i] += imos[i-1];\n   }\n\n   sort(imos, imos+M);\n   // 全体 - 取ったときに一番スコアが少ない宝石\n   cout << sum - imos[0] << endl;\n\n   return 0;\n}\n```\n\n\n\n## 感想\n\n- むっっっずうううううううううううううううううううううう。難しい。。。\n- 全探索はかろうじて思いつくけど\n- 問題文の「全ての宝石が揃ってはいけない」を「少なくとも取ってはいけない宝石が1種類ある」に読み替える部分、あれが無理だね。少なくとも1つだけって言う表現、中学数学とかでよく見かけた希ガス。\n- 問題文の読み替え、苦手なんだよなー。\n- でも問題文を読み替えることで難易度が激減する問題が結構あったりするからな－。\n- ということで、この問題で大事だったのは**問題文の読み替え**だった。\n- 取ってはいけない宝石を固定するっていうのも大事だよねー、多分。\n- **計算量を落とすときは値を固定するっていう考えをよく使う気がする。**\n- つまり、固定できそうな値をひとつみければ計算量が落ちるのでは？？？？？とか思ったり\n- あと、図を書くと方針がつかめることがよくある気がする。\n- 今回の場合、「全体」の集合を書いて、その中を「宝石iを取る」「宝石iを取らない」に分けた。\n- ベン図を書くと問題文中の値とかを綺麗に分けて考えられるからいいと思う。たぶん。\n- こんだけ長々と説明しないと自分で理解できないのでとても悲しいね。みんななんでこんな問題解けるんだ？たぶん異星人の血とか混ざってて強いんだと思う。\n\n\n\n\n# ABC018 「[菱型カウント](https://beta.atcoder.jp/contests/abc018/tasks/abc018_3)」\n\n- いきなり計算量が少ない解法を考えるのは難しいので、2段階に分けて計算量を落とす\n\n## 第1段階：全探索\n\n- 以下の操作を全てのマスについて行う\n  1. 1つのマスを菱形の中央とする。\n  2. 中央からのマンハッタン距離$K-1$以内が全て`o`であればそのマスを中心とした菱形が作れる。\n- 計算量は$O(RCK^2)$ となる。\n\n### 部分点コード(30点)\n\n- [部分点コード](https://beta.atcoder.jp/contests/abc018/submissions/2248507)\n\n## 第2段階：\n\n### 考察の流れ\n\n- 全てのマスを見るという操作は外せそうにない。これを外すと処理が面倒になりそう(直感)\n- なので、菱形を素早く判定する方法を考える。\n- $K \\times K$のマス目を全て見なくても菱形だと判定するにはどうすれば...？\n- 菱形判定を$O(K^2)$ から計算量を減らすには、$O(K)$くらいが妥当かなー？\n- 菱形、横から見るか？縦から見るか？\n- 突然ですが、ここである考え方を使います。それは、**データ列が現れたときはとりあえず累積和を取ってみる**というものです。計算量を落とす考察に行き詰まったらとりあえず累積和を取ります。自分もこの考え方に何度か救われました。\n- とりあえず`o`を$1$、`x`を$0$とした整数型の配列を作ります。\n- 2次元座標だから2次元累積和を取ろうか？でも菱形は正方形じゃないから扱いにくそう\n- 1次元の累積和を考えてみよう。こんな感じでいろいろ実験してみる。\n- ここで、縦に連続した値が大事そうだということに気がつく。この値を見れば、上にどれだけ`o`があるのかを$O(1)$で求めることができる。なんかこれ使えそうじゃない？\n- 菱形の列を左から走査する。そのとき菱形の底の値を見て、全ての底の値が菱形が作れそうな値になっていたら菱形を作ることができる。このとき見るのは$K$個だけなので、計算量が一つ落とせた！やったぜ！\n- 考察終了！\n\n\n\n### 解法\n<img width=\"318\" alt=\"ABCC04_4.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/9f086e40-1f64-83ef-6fcc-7970ac2771c3.png\">\n\n\n- 与えられた長方形を縦に見て、連続したマスをカウントする。\n\n- 例えば、入力例3が与えられたとき、縦に連続してカウントした長方形は上の図のようになる。\n\n- そして、マス目に対して菱形を当てはめる。そして、当てはめた場所と対応する赤い数字を見る\n\n- 見ているマスについて、菱形の底の数字が全てが赤い数字以上なら菱形をつくることができる。\n\n- 全体的な計算量は$O(RCK)$ となる。\n\n  - 部分点解法では全てのマスについて$K\\times K$個の菱形全体をみた。\n  - 満点解法では菱形の底の数字だけを見た。これは菱形の横の長さなので$K$個だけをみたことなる。\n  - なので、部分点解法の計算量の$K$が1つ落とせた。\n\n  ​\n\n\n\n### ACコード\n\n```C++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint R, C, K;\nint A[555][555];\n\nbool check(int y, int x) {\n   for (int i = -K; i <= K; i++) {\n      int num = K - abs(i); // yからnumだけ座標が下がる\n      int nx = x + i, ny = y + num; // nx, nyが赤い数字の座標となる\n      if (nx < 0 || nx >= C || ny < 0 || ny >= R) return false; // 範囲外ならfalse\n      int need = num * 2 + 1; // 縦に見た、必要な菱形の長さ\n      if (A[ny][nx] < need) return false; // 底の値が必要な値に達していないならfalse\n   }\n\n   return true;\n}\n\nint main() {\n   cin >> R >> C >> K;\n   K--; // デクリメントした方が都合が良い\n   for (int i = 0; i < R; i++) {\n      for (int j = 0; j < C; j++) {\n         char b;\n         cin >> b;\n         A[i][j] = b == 'o';\n      }\n   }\n\n   // 縦の連続したマスについて累積和\n   for (int i = 0; i < C; i++) {\n      for (int j = 1; j < R; j++) {\n         if (!A[j][i]) continue;\n         A[j][i] += A[j-1][i];\n      }\n   }\n\n   int ans = 0;\n   // 全てのマスについて調べる\n   for (int i = 0; i < R; i++) {\n      for (int j = 1; j < C; j++) {\n         if (check(i, j)) {\n            ans++;\n         }\n      }\n   }\n   cout << ans << endl;\n\n   return 0;\n}\n```\n\n\n\n### 感想\n\n- 自分が思いつくとしたらこんな感じだろうって感じで考察書いたけど、こんなん普通思いつかなくね？\n- しかも、実装めっちゃバグるし。こんなの時間内に通せねーよ。~~このはげええええええ！！~~\n- $R, C, K$ の最大値はそれぞれ$500$だから$RCK_{MAX}=1.25\\times 10^8$ になるんだが、計算量ギリッギリじゃね？\n- どうやらBFSで解くと、さらに計算量が落とせるみたい。わからないので誰か記事書いて！\n\n\n\n# ABC019 「[高橋くんと魔法の箱](https://beta.atcoder.jp/contests/abc019/tasks/abc019_3)」\n\n## 考察\n\n- $x$ を入れたときと$2x$ を入れたときに出てくる整数は同じである。\n- つまり、$x$と$2x$ は仲間である。\n- $x$の仲間は他にいないだろうか？という事を考える。\n\n\n$$\nx ⇔ 2x \\\\\nx'=2x とする。\\\\\nx'⇔2x'\\\\\n展開すると \\\\\n2x⇔4xとなる。\\\\\n繋げると\\\\\nx⇔2x⇔4xになる。\n$$\n\n- これを繰り返していくと、$x, 2x, 4x, 8x, 16x,..$ のようになることがわかる。\n- つまり、$x$と、$2^{n}x$ は同じグループとなる。\n- 入力された値を$2$で割り切れなくなるまで割った数字をそのグループの代表の数字とする。\n- その数字の種類が答えとなる。\n- 具体的な数字で考えると以下のようになる\n\n<img width=\"535\" alt=\"ABCC04_7.png\" src=\"https://qiita-image-store.s3.amazonaws.com/0/218584/464a22cd-2972-3667-7808-3c9d9e22e4eb.png\">\n\n\n\n### コード\n\n```C++\n#include <bits/stdc++.h>\nusing namespace std;\n\nint get(int x) {\n   while (x % 2 == 0) {\n      x /= 2;\n   }\n   return x;\n}\n\nint main() {\n   int n;\n   cin >> n;\n   set<int> s;\n   for (int i = 0; i < n; i++) {\n      int x;\n      cin >> x;\n      s.insert(get(x));\n   }\n   cout << s.size() << endl;\n\n   return 0;\n}\n```\n\n\n\n## 感想\n\n- この問題で大事だったのはグループ分けの法則がつかめるかどうか？だと思う。\n- 難しくね？この問題。毎回言ってるけど\n- $x, 2x,4x, 8x, ..$が仲間だと見抜けなければおしまい。\n- 自分で解説書いたけど、自力で解ける気がしない。\n- にゃーん\n\n \n\n---\n\n\n\n\n# ABC020 「[壁抜け](https://beta.atcoder.jp/contests/abc020/tasks/abc020_c)」\n\n- これ、いろいろ考えたんですがマジでわかりません。\n- 記事が少ないので誰か書いてーーーーー！！！\n\n# 最後に\n- 間違ってるところとかあったら教えてほしいです\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:53:38+09:00",
        "group": null,
        "id": "cf0ed4832854573323d7",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "C++",
                "versions": []
            },
            {
                "name": "AtCoder",
                "versions": []
            },
            {
                "name": "競技プログラミング",
                "versions": []
            }
        ],
        "title": "ABC-C第4弾",
        "updated_at": "2018-03-24T15:54:26+09:00",
        "url": "https://qiita.com/idish23/items/cf0ed4832854573323d7",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 2,
            "followers_count": 1,
            "github_login_name": null,
            "id": "idish23",
            "items_count": 2,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 218584,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/218584/profile-images/1521875000",
            "twitter_screen_name": "idish23",
            "website_url": null
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h1>\n<span id=\"intelli-idea関係\" class=\"fragment\"></span><a href=\"#intelli-idea%E9%96%A2%E4%BF%82\"><i class=\"fa fa-link\"></i></a>Intelli IDEA関係</h1>\n\n<h3>\n<span id=\"プロキシ環境でのintellij-idea-with-sbt\" class=\"fragment\"></span><a href=\"#%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7%E7%92%B0%E5%A2%83%E3%81%A7%E3%81%AEintellij-idea-with-sbt\"><i class=\"fa fa-link\"></i></a>プロキシ環境でのIntelliJ IDEA with SBT</h3>\n\n<p>設定箇所が多いです。<br>\n<a href=\"http://jetbeaver.hatenablog.com/entry/2016/05/24/220048\" rel=\"nofollow noopener\" target=\"_blank\">プロキシ環境でのIntelliJ IDEA with SBT</a></p>\n",
        "body": "# Intelli IDEA関係\n\n### プロキシ環境でのIntelliJ IDEA with SBT\n設定箇所が多いです。\n[プロキシ環境でのIntelliJ IDEA with SBT](http://jetbeaver.hatenablog.com/entry/2016/05/24/220048)\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:51:29+09:00",
        "group": null,
        "id": "d842587164b4d9e3eea9",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Scala",
                "versions": []
            }
        ],
        "title": "【備忘録】Scala",
        "updated_at": "2018-03-24T15:51:29+09:00",
        "url": "https://qiita.com/yuji38kwmt/items/d842587164b4d9e3eea9",
        "user": {
            "description": "terasolunaでWeb開発しています。",
            "facebook_id": "",
            "followees_count": 147,
            "followers_count": 35,
            "github_login_name": null,
            "id": "yuji38kwmt",
            "items_count": 120,
            "linkedin_id": "",
            "location": "Aichi,Japan",
            "name": "",
            "organization": "中小IT企業",
            "permanent_id": 37903,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/37903/profile-images/1495549638",
            "twitter_screen_name": null,
            "website_url": ""
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p>これまでのCloud9から、ローカル環境(atom)に環境移行した際に起こった問題。</p>\n\n<p>移行方法は以下を参考に。<br>\n<a href=\"https://qiita.com/inakadegaebal/items/9cfea29b9103ddd62442\" id=\"reference-f08ca8d114f633f4588c\">GitHubのリポジトリを自分のPCにcloneする/qiita</a></p>\n\n<h3>\n<span id=\"参考スペック\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%82%B9%E3%83%9A%E3%83%83%E3%82%AF\"><i class=\"fa fa-link\"></i></a>参考スペック</h3>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>macOS High Sierra\natom 1.0.18\nruby 2.3.0p0\nRails 5.1.5\ngem 2.5.1\ngit version 2.16.2\nheroku-cli/6.14.38 (darwin-x64) node-v8.9.1\n</pre></div></div>\n\n<h3>\n<span id=\"エラー内容\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E5%86%85%E5%AE%B9\"><i class=\"fa fa-link\"></i></a>エラー内容</h3>\n\n<p>よっしゃ、rails立ち上げてみるかな。。と、スタートしてみたら、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ rails s\n\n/Users/kentaroTHEHUSKY/workspace/Proposal-market-place/vendor/bundle/gems/activesupport-5.1.5/lib/active_support/dependencie\ns.rb:292:in `require': Could not load the 'listen' gem. Add `gem 'listen'` to the development group of your Gemfile (LoadError)\n</pre></div></div>\n\n<p>listen gemが読めないからdevelopment groupに追加してくださいとな？</p>\n\n<h3>\n<span id=\"そもそもlisten-gemってなんだ\" class=\"fragment\"></span><a href=\"#%E3%81%9D%E3%82%82%E3%81%9D%E3%82%82listen-gem%E3%81%A3%E3%81%A6%E3%81%AA%E3%82%93%E3%81%A0\"><i class=\"fa fa-link\"></i></a>そもそもlisten gemってなんだ？</h3>\n\n<blockquote>\n<p>listen<br>\nファイルの変更を検知してそれをフックに何か処理ができるgemとのこと。<br>\nguard/listen: The Listen gem listens to file modifications and notifies you &gt;about the changes.</p>\n</blockquote>\n\n<p><a href=\"https://suin.io/536\" rel=\"nofollow noopener\" target=\"_blank\">ということ</a>らしい。</p>\n\n<h3>\n<span id=\"対応bundle-install\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E5%BF%9Cbundle-install\"><i class=\"fa fa-link\"></i></a>対応①bundle install</h3>\n\n<p>追加されてないとのことなので、確認。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">gemfile</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">group</span> <span class=\"ss\">:development</span> <span class=\"k\">do</span>\n  <span class=\"c1\"># Access an IRB console on exception pages or by using &lt;%= console %&gt; anywhere in the code.</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'web-console'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;= 3.3.0'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'listen'</span><span class=\"p\">,</span> <span class=\"s1\">'&gt;= 3.0.5'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt; 3.2'</span>\n  <span class=\"c1\"># Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'spring'</span>\n  <span class=\"n\">gem</span> <span class=\"s1\">'spring-watcher-listen'</span><span class=\"p\">,</span> <span class=\"s1\">'~&gt; 2.0.0'</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<p>gemファイルには記載、developmentグループに入っているので、bundle installし、無事完了。</p>\n\n<p>改めてrails sするも、結果変わらず。</p>\n\n<h3>\n<span id=\"対応bundle-update\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E5%BF%9Cbundle-update\"><i class=\"fa fa-link\"></i></a>対応②bundle update</h3>\n\n<p>listen gemだけアップデートしてみる。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$bundle update listen\n</pre></div></div>\n\n<p>無事完了。<br>\nだけれども、こんなメッセージが。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>The dependency tzinfo-data (&gt;= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing fo\nr ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run\n `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`.\n</pre></div></div>\n\n<p>bundlerの制限の話をしているみたい。<br>\n試しにやってみる。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>＄bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java\n\nFetching gem metadata from https://rubygems.org/.........\nFetching gem metadata from https://rubygems.org/.\nResolving dependencies.........\nWriting lockfile to /Users/kentaroTHEHUSKY/workspace/Proposal-market-place/Gemfile.lock\n</pre></div></div>\n\n<p>rails sするも、これも結果変わらず。</p>\n\n<h3>\n<span id=\"対応dependenciesrbを見てみる\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E5%BF%9Cdependenciesrb%E3%82%92%E8%A6%8B%E3%81%A6%E3%81%BF%E3%82%8B\"><i class=\"fa fa-link\"></i></a>対応③dependencies.rbを見てみる</h3>\n\n<p>冷静に今一度エラー文を見てみる。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>dependencies.rb:292:in `require'\n</pre></div></div>\n\n<p>dependencies.rbの292行目は、こんな感じ。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">dependencies.rb</span></div>\n<div class=\"highlight\"><pre>      <span class=\"k\">def</span> <span class=\"nf\">require</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n          <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kp\">false</span>\n          <span class=\"n\">load_dependency</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span> <span class=\"p\">{</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">super</span> <span class=\"p\">}</span>\n          <span class=\"n\">result</span>\n      <span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<p>うーん。とりあえず怖くて触れないのでそのままに。</p>\n\n<h3>\n<span id=\"対応developmentrbをいじる\" class=\"fragment\"></span><a href=\"#%E5%AF%BE%E5%BF%9Cdevelopmentrb%E3%82%92%E3%81%84%E3%81%98%E3%82%8B\"><i class=\"fa fa-link\"></i></a>対応④development.rbをいじる</h3>\n\n<p>stackoverflowを見てみると、同じエラーが起こってる方々がまぁまぁいる模様。<br>\n<a href=\"https://stackoverflow.com/questions/38663706/loaderror-could-not-load-the-listen-gem-rails-5/38665949\" rel=\"nofollow noopener\" target=\"_blank\">この記事</a>の部分を参考に修正を試みる。</p>\n\n<blockquote>\n<p>あなたがレール5 にいて、デフォルトのconfig / environments / development.rbファイルを使用している場合、このコード行がそこにあります。</p>\n</blockquote>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">development.rb</span></div>\n<div class=\"highlight\"><pre><span class=\"n\">config</span><span class=\"p\">.</span><span class=\"nf\">file_watcher</span> <span class=\"o\">=</span> <span class=\"no\">ActiveSupport</span><span class=\"o\">::</span><span class=\"no\">EventedFileUpdateChecker</span>\n</pre></div>\n</div>\n\n<blockquote>\n<p>これは宝石を聞く必要があります。これは、私がレールを4つアップグレードしていたときに私を少し投げた</p>\n\n<p>編集：それはあなたがもう聞く宝石を必要としないコード行をコメントする場合は言及して忘れてしまった</p>\n</blockquote>\n\n<p>この部分をコメントアウトして再トライ。<br>\nすると、</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>＄rails s\n/Users/kentaroTHEHUSKY/workspace/Proposal-market-place/config/routes.rb:14:in `block in &lt;top (required)&gt;': uninitialized con\nstant LetterOpenerWeb (NameError)\n</pre></div></div>\n\n<p>NameError。<br>\nlistenは、letter_openerと依存関係にあるみたい。<br>\n続けて、routes.rbの14行目もコメントアウト。</p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">routes.rb</span></div>\n<div class=\"highlight\"><pre>  <span class=\"k\">if</span> <span class=\"no\">Rails</span><span class=\"p\">.</span><span class=\"nf\">env</span><span class=\"p\">.</span><span class=\"nf\">development?</span>\n    <span class=\"c1\"># mount LetterOpenerWeb::Engine, at: \"/letter_opener\"</span>\n  <span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<p>そして、改めてrails s。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>=&gt; Booting Puma\n=&gt; Rails 5.1.5 application starting in development\n=&gt; Run `rails server -h` for more startup options\nPuma starting in single mode...\n* Version 3.11.3 (ruby 2.3.0-p0), codename: Love Song\n* Min threads: 5, max threads: 5\n* Environment: development\n* Listening on tcp://0.0.0.0:3000\nUse Ctrl-C to stop\n</pre></div></div>\n\n<p>動いた！<br>\nが、これではletter_openerが動かないので、次回に続きます。。</p>\n",
        "body": "これまでのCloud9から、ローカル環境(atom)に環境移行した際に起こった問題。\n\n移行方法は以下を参考に。\n[GitHubのリポジトリを自分のPCにcloneする/qiita](https://qiita.com/inakadegaebal/items/9cfea29b9103ddd62442)\n\n\n###参考スペック\n```\nmacOS High Sierra\natom 1.0.18\nruby 2.3.0p0\nRails 5.1.5\ngem 2.5.1\ngit version 2.16.2\nheroku-cli/6.14.38 (darwin-x64) node-v8.9.1\n```\n\n###エラー内容\nよっしゃ、rails立ち上げてみるかな。。と、スタートしてみたら、\n\n```\n$ rails s\n\n/Users/kentaroTHEHUSKY/workspace/Proposal-market-place/vendor/bundle/gems/activesupport-5.1.5/lib/active_support/dependencie\ns.rb:292:in `require': Could not load the 'listen' gem. Add `gem 'listen'` to the development group of your Gemfile (LoadError)\n```\nlisten gemが読めないからdevelopment groupに追加してくださいとな？\n\n###そもそもlisten gemってなんだ？\n\n>listen\n>ファイルの変更を検知してそれをフックに何か処理ができるgemとのこと。\n>guard/listen: The Listen gem listens to file modifications and notifies you >about the changes.\n\n[ということ](https://suin.io/536)らしい。\n\n###対応①bundle install\n\n追加されてないとのことなので、確認。\n\n```ruby:gemfile\ngroup :development do\n  # Access an IRB console on exception pages or by using <%= console %> anywhere in the code.\n  gem 'web-console', '>= 3.3.0'\n  gem 'listen', '>= 3.0.5', '< 3.2'\n  # Spring speeds up development by keeping your application running in the background. Read more: https://github.com/rails/spring\n  gem 'spring'\n  gem 'spring-watcher-listen', '~> 2.0.0'\nend\n```\ngemファイルには記載、developmentグループに入っているので、bundle installし、無事完了。\n\n改めてrails sするも、結果変わらず。\n\n\n###対応②bundle update\nlisten gemだけアップデートしてみる。\n\n```\n$bundle update listen\n```\n\n無事完了。\nだけれども、こんなメッセージが。\n\n```\nThe dependency tzinfo-data (>= 0) will be unused by any of the platforms Bundler is installing for. Bundler is installing fo\nr ruby but the dependency is only for x86-mingw32, x86-mswin32, x64-mingw32, java. To add those platforms to the bundle, run\n `bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java`.\n```\nbundlerの制限の話をしているみたい。\n試しにやってみる。\n\n```\n＄bundle lock --add-platform x86-mingw32 x86-mswin32 x64-mingw32 java\n\nFetching gem metadata from https://rubygems.org/.........\nFetching gem metadata from https://rubygems.org/.\nResolving dependencies.........\nWriting lockfile to /Users/kentaroTHEHUSKY/workspace/Proposal-market-place/Gemfile.lock\n```\n\nrails sするも、これも結果変わらず。\n\n###対応③dependencies.rbを見てみる\n\n冷静に今一度エラー文を見てみる。\n\n```\ndependencies.rb:292:in `require'\n```\n\ndependencies.rbの292行目は、こんな感じ。\n\n```  dependencies.rb\n      def require(file)\n          result = false\n          load_dependency(file) { result = super }\n          result\n      end\n``` \nうーん。とりあえず怖くて触れないのでそのままに。\n\n\n###対応④development.rbをいじる\n\nstackoverflowを見てみると、同じエラーが起こってる方々がまぁまぁいる模様。\n[この記事](https://stackoverflow.com/questions/38663706/loaderror-could-not-load-the-listen-gem-rails-5/38665949)の部分を参考に修正を試みる。\n\n\n>あなたがレール5 にいて、デフォルトのconfig / environments / development.rbファイルを使用している場合、このコード行がそこにあります。\n\n```development.rb\nconfig.file_watcher = ActiveSupport::EventedFileUpdateChecker\n```\n>これは宝石を聞く必要があります。これは、私がレールを4つアップグレードしていたときに私を少し投げた\n\n>編集：それはあなたがもう聞く宝石を必要としないコード行をコメントする場合は言及して忘れてしまった\n\nこの部分をコメントアウトして再トライ。\nすると、\n\n```\n＄rails s\n/Users/kentaroTHEHUSKY/workspace/Proposal-market-place/config/routes.rb:14:in `block in <top (required)>': uninitialized con\nstant LetterOpenerWeb (NameError)\n```\nNameError。\nlistenは、letter_openerと依存関係にあるみたい。\n続けて、routes.rbの14行目もコメントアウト。\n\n\n```routes.rb\n  if Rails.env.development?\n    # mount LetterOpenerWeb::Engine, at: \"/letter_opener\"\n  end\n```\n\nそして、改めてrails s。\n\n```\n=> Booting Puma\n=> Rails 5.1.5 application starting in development\n=> Run `rails server -h` for more startup options\nPuma starting in single mode...\n* Version 3.11.3 (ruby 2.3.0-p0), codename: Love Song\n* Min threads: 5, max threads: 5\n* Environment: development\n* Listening on tcp://0.0.0.0:3000\nUse Ctrl-C to stop\n```\n\n動いた！\nが、これではletter_openerが動かないので、次回に続きます。。\n\n\n\n\n\n\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:45:24+09:00",
        "group": null,
        "id": "b9179151d12beb3dd6d9",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Ruby",
                "versions": []
            },
            {
                "name": "Rails",
                "versions": []
            },
            {
                "name": "Gem",
                "versions": []
            },
            {
                "name": "ATOM",
                "versions": []
            },
            {
                "name": "Rails5",
                "versions": []
            }
        ],
        "title": "Add `gem 'listen'` to the development group of your Gemfile (LoadError)問題",
        "updated_at": "2018-03-24T15:46:22+09:00",
        "url": "https://qiita.com/kentarothehusky/items/b9179151d12beb3dd6d9",
        "user": {
            "description": "マーケティング＆PR畑から、RailsでBtoCtoCサービスを提供するべく日々精進してます。\r\nド文系脳初心者ならではの視点で忘備録を綴っていきます。",
            "facebook_id": "",
            "followees_count": 4,
            "followers_count": 1,
            "github_login_name": "kentarothehusky",
            "id": "kentarothehusky",
            "items_count": 5,
            "linkedin_id": "",
            "location": "",
            "name": "",
            "organization": "",
            "permanent_id": 223487,
            "profile_image_url": "https://avatars0.githubusercontent.com/u/30945255?v=4",
            "twitter_screen_name": null,
            "website_url": ""
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h2>\n<span id=\"はじめに\" class=\"fragment\"></span><a href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\"><i class=\"fa fa-link\"></i></a>はじめに</h2>\n\n<p>API Connectが提供する開発者向けのツールである、ローカルPCなどでCLI/GUIでAPI開発したり、API Connect（オンプレ版・IBM Cloud版）に対してAPIをステージングしたりできるのが<a href=\"https://www.npmjs.com/package/apiconnect\" rel=\"nofollow noopener\" target=\"_blank\">開発者ツールキット</a>です。<br>\nGUIが起動でき、API managerのドラフト製品・APIの画面に該当するところが使えるので、API managerを使う感覚と同様に、API定義、製品追加して、登録したターゲット（カタログ・スペース）にステージングすることができます。<br>\n要件によっては、ユーザーのロールや権限を厳しく管理したいことがあり、API開発者がAPI managerを直接使ってAPI定義や製品追加を許可したくないケースがあります。そう言った場合、開発者ツールキットを開発者ローカルPCに配布し、特定のターゲットにのみステージングを許可するといったことができそうです。</p>\n\n<p>と自分の理解を整理しつつ、本記事での本題は、このGUIを起動しようとして、以下の問題に遭遇した時のメモです。</p>\n\n<ul>\n<li>IBM Cloudログイン画面が出てきて先に進めない時があった（オンプレ用に使いたいのに）</li>\n<li>ターゲットを追加しようとしてログインができない</li>\n</ul>\n\n<h2>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h2>\n\n<h3>\n<span id=\"ibm-cloudログイン画面が出てきて先に進めない時\" class=\"fragment\"></span><a href=\"#ibm-cloud%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E7%94%BB%E9%9D%A2%E3%81%8C%E5%87%BA%E3%81%A6%E3%81%8D%E3%81%A6%E5%85%88%E3%81%AB%E9%80%B2%E3%82%81%E3%81%AA%E3%81%84%E6%99%82\"><i class=\"fa fa-link\"></i></a>IBM Cloudログイン画面が出てきて先に進めない時</h3>\n\n<p>１. 以下のコマンドでログイン</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>apic edit\n</pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/1a38581a1be4ab91f2485613275a7114e2e4054b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f66363864346231322d623431622d646461372d626566642d3465363635656163336531642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/1a38581a1be4ab91f2485613275a7114e2e4054b/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f66363864346231322d623431622d646461372d626566642d3465363635656163336531642e706e67\" alt=\"Kobito.WyJubt.png\" title=\"Kobito.WyJubt.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/f68d4b12-b41b-dda7-befd-4e665eac3e1d.png\"></a></p>\n\n<p>２. Bluemixのログイン画面になる（IBM Cloudに更新されてない点はツッコマない）。すでにBluemixにログイン状態・ログイン前でもアカウントがあってログインしたら、「Bluemixでサインイン」をクリックして、デザイナーの画面に進めるが、そもそもIBM Cloudアカウント持ってないなどのケースではここから進めなくなる（はず）。<br>\n<a href=\"https://camo.qiitausercontent.com/6a351124c28e593f9836dfa2ff43b92533173ed6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f63643735336436362d333361382d633464352d316134632d3736383963306364303631612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6a351124c28e593f9836dfa2ff43b92533173ed6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f63643735336436362d333361382d633464352d316134632d3736383963306364303631612e706e67\" alt=\"Kobito.jrwjV7.png\" title=\"Kobito.jrwjV7.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/cd753d66-33a8-c4d5-1a4c-7689c0cd061a.png\"></a></p>\n\n<p>３. 一旦Ctrl+Cで停止して画面を閉じる</p>\n\n<p>４. 以下の環境変数を入れて再度コマンド実行</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>SKIP_LOGIN=true apic edit\n</pre></div></div>\n\n<p><a href=\"https://camo.qiitausercontent.com/c8a27c53a6293074da1e5252f6c3bec41856ccc5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f64663762616137322d393865632d336230382d336238332d6339313362653537383134332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/c8a27c53a6293074da1e5252f6c3bec41856ccc5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f64663762616137322d393865632d336230382d336238332d6339313362653537383134332e706e67\" alt=\"Kobito.9hzc4q.png\" title=\"Kobito.9hzc4q.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/df7baa72-98ec-3b08-3b83-c913be578143.png\"></a></p>\n\n<p>５. Bluemixログイン画面を飛ばして無事に起動<br>\n<a href=\"https://camo.qiitausercontent.com/d80bfa67c75221d0d69dff45116e85e8daa02aa7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f30366439643465362d653066372d336666382d636331342d3862656134666661646365332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/d80bfa67c75221d0d69dff45116e85e8daa02aa7/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f30366439643465362d653066372d336666382d636331342d3862656134666661646365332e706e67\" alt=\"Kobito.brKONZ.png\" title=\"Kobito.brKONZ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/06d9d4e6-e0f7-3ff8-cc14-8bea4ffadce3.png\"></a></p>\n\n<h3>\n<span id=\"ターゲットを追加削除しようとしてログインができない\" class=\"fragment\"></span><a href=\"#%E3%82%BF%E3%83%BC%E3%82%B2%E3%83%83%E3%83%88%E3%82%92%E8%BF%BD%E5%8A%A0%E5%89%8A%E9%99%A4%E3%81%97%E3%82%88%E3%81%86%E3%81%A8%E3%81%97%E3%81%A6%E3%83%AD%E3%82%B0%E3%82%A4%E3%83%B3%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%AA%E3%81%84\"><i class=\"fa fa-link\"></i></a>ターゲットを追加/削除しようとしてログインができない</h3>\n\n<p>１. デザイナー画面の「公開」ボタンから、APIをステージングしたいターゲットを追加しておく必要がある。ここで例えばオンプレにあるAPI Connectのホスト名・ユーザー名・パスワードを入れればターゲットとして追加できる。</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/99b6fd442828838ae30d9fae86556f2a83a5775a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f33646165323738632d633532342d656465382d613161632d3435373565653064633833342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/99b6fd442828838ae30d9fae86556f2a83a5775a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f33646165323738632d633532342d656465382d613161632d3435373565653064633833342e706e67\" alt=\"Kobito.o0WeJW.png\" title=\"Kobito.o0WeJW.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/3dae278c-c524-ede8-a1ac-4575ee0dc834.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/b5ec2eadd8e91cb653f7ce515e574e36a0915427/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f35346636346539662d393631332d306635382d653530302d3536346164343733333339642e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b5ec2eadd8e91cb653f7ce515e574e36a0915427/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f35346636346539662d393631332d306635382d653530302d3536346164343733333339642e706e67\" alt=\"Kobito.Ba6g60.png\" title=\"Kobito.Ba6g60.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/54f64e9f-9613-0f58-e500-564ad473339d.png\"></a></p>\n\n<p>ただ正しい情報を入れてるのに何度やってもログインできない時がある。私のMacの問題だけかもしれませんが。。（会社配布Macでユーザー権限が制限されてるらしい。）</p>\n\n<p><a href=\"https://camo.qiitausercontent.com/9dce7c50e12aa949de045e08ca09bc0d8baa4ffc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f37353331383531332d643961632d653363372d656434392d3036343936623265663430342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/9dce7c50e12aa949de045e08ca09bc0d8baa4ffc/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f37353331383531332d643961632d653363372d656434392d3036343936623265663430342e706e67\" alt=\"Kobito.4Iqujv.png\" title=\"Kobito.4Iqujv.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/75318513-d9ac-e3c7-ed49-06496b2ef404.png\"></a></p>\n\n<p>２. ターミナルを見るとターゲットに関する情報が入ったファイルへのパーミッション関連のエラーが出ている。<br>\n<a href=\"https://camo.qiitausercontent.com/b7f33b91c1bc3d1c754de682ee4bb7714c05844e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f63353338663039382d366361312d373831662d373038382d3133336433333234343362652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/b7f33b91c1bc3d1c754de682ee4bb7714c05844e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f63353338663039382d366361312d373831662d373038382d3133336433333234343362652e706e67\" alt=\"Kobito.f0oYvA.png\" title=\"Kobito.f0oYvA.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/c538f098-6ca1-781f-7088-133d332443be.png\"></a></p>\n\n<p>３. なので一旦停止して、sudoでログインしなおす</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>sudo SKIP_LOGIN=true apic edit\n</pre></div></div>\n\n<p>４. 再度起動してきてターゲット追加してみると今度は成功<br>\n<a href=\"https://camo.qiitausercontent.com/782f027be23995706c9f2dafdc13bf0ef599ce67/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f38353062663036342d613663372d326630312d613866642d3461663130326333393834612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/782f027be23995706c9f2dafdc13bf0ef599ce67/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f38353062663036342d613663372d326630312d613866642d3461663130326333393834612e706e67\" alt=\"Kobito.Rv2cnd.png\" title=\"Kobito.Rv2cnd.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/850bf064-a6c7-2f01-a8fd-4af102c3984a.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/78ee0fae447f1cfc6f3932d46245f12d332b0755/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f37303439656333302d323939332d613662352d383562332d6333653061646130363364352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/78ee0fae447f1cfc6f3932d46245f12d332b0755/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132393636322f37303439656333302d323939332d613662352d383562332d6333653061646130363364352e706e67\" alt=\"Kobito.CIUnVJ.png\" title=\"Kobito.CIUnVJ.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/129662/7049ec30-2993-a6b5-85b3-c3e0ada063d5.png\"></a></p>\n\n<h2>\n<span id=\"まとめ\" class=\"fragment\"></span><a href=\"#%E3%81%BE%E3%81%A8%E3%82%81\"><i class=\"fa fa-link\"></i></a>まとめ</h2>\n\n<p>以上、開発者ツールキットを使う時に地味に詰まった時のメモでした。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<ul>\n<li><a href=\"https://github.com/ibm-apiconnect/apichol/issues/10\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/ibm-apiconnect/apichol/issues/10</a></li>\n</ul>\n",
        "body": "\n##はじめに\nAPI Connectが提供する開発者向けのツールである、ローカルPCなどでCLI/GUIでAPI開発したり、API Connect（オンプレ版・IBM Cloud版）に対してAPIをステージングしたりできるのが[開発者ツールキット](https://www.npmjs.com/package/apiconnect)です。\nGUIが起動でき、API managerのドラフト製品・APIの画面に該当するところが使えるので、API managerを使う感覚と同様に、API定義、製品追加して、登録したターゲット（カタログ・スペース）にステージングすることができます。\n要件によっては、ユーザーのロールや権限を厳しく管理したいことがあり、API開発者がAPI managerを直接使ってAPI定義や製品追加を許可したくないケースがあります。そう言った場合、開発者ツールキットを開発者ローカルPCに配布し、特定のターゲットにのみステージングを許可するといったことができそうです。\n\nと自分の理解を整理しつつ、本記事での本題は、このGUIを起動しようとして、以下の問題に遭遇した時のメモです。\n\n* IBM Cloudログイン画面が出てきて先に進めない時があった（オンプレ用に使いたいのに）\n* ターゲットを追加しようとしてログインができない\n\n## 手順\n### IBM Cloudログイン画面が出てきて先に進めない時\n１. 以下のコマンドでログイン\n\n```\napic edit\n```\n![Kobito.WyJubt.png](https://qiita-image-store.s3.amazonaws.com/0/129662/f68d4b12-b41b-dda7-befd-4e665eac3e1d.png \"Kobito.WyJubt.png\")\n\n２. Bluemixのログイン画面になる（IBM Cloudに更新されてない点はツッコマない）。すでにBluemixにログイン状態・ログイン前でもアカウントがあってログインしたら、「Bluemixでサインイン」をクリックして、デザイナーの画面に進めるが、そもそもIBM Cloudアカウント持ってないなどのケースではここから進めなくなる（はず）。\n![Kobito.jrwjV7.png](https://qiita-image-store.s3.amazonaws.com/0/129662/cd753d66-33a8-c4d5-1a4c-7689c0cd061a.png \"Kobito.jrwjV7.png\")\n\n\n３. 一旦Ctrl+Cで停止して画面を閉じる\n\n４. 以下の環境変数を入れて再度コマンド実行\n\n```\nSKIP_LOGIN=true apic edit\n```\n![Kobito.9hzc4q.png](https://qiita-image-store.s3.amazonaws.com/0/129662/df7baa72-98ec-3b08-3b83-c913be578143.png \"Kobito.9hzc4q.png\")\n\n\n５. Bluemixログイン画面を飛ばして無事に起動\n![Kobito.brKONZ.png](https://qiita-image-store.s3.amazonaws.com/0/129662/06d9d4e6-e0f7-3ff8-cc14-8bea4ffadce3.png \"Kobito.brKONZ.png\")\n\n\n\n### ターゲットを追加/削除しようとしてログインができない\n１. デザイナー画面の「公開」ボタンから、APIをステージングしたいターゲットを追加しておく必要がある。ここで例えばオンプレにあるAPI Connectのホスト名・ユーザー名・パスワードを入れればターゲットとして追加できる。\n\n![Kobito.o0WeJW.png](https://qiita-image-store.s3.amazonaws.com/0/129662/3dae278c-c524-ede8-a1ac-4575ee0dc834.png \"Kobito.o0WeJW.png\")\n\n\n![Kobito.Ba6g60.png](https://qiita-image-store.s3.amazonaws.com/0/129662/54f64e9f-9613-0f58-e500-564ad473339d.png \"Kobito.Ba6g60.png\")\n\nただ正しい情報を入れてるのに何度やってもログインできない時がある。私のMacの問題だけかもしれませんが。。（会社配布Macでユーザー権限が制限されてるらしい。）\n\n![Kobito.4Iqujv.png](https://qiita-image-store.s3.amazonaws.com/0/129662/75318513-d9ac-e3c7-ed49-06496b2ef404.png \"Kobito.4Iqujv.png\")\n\n\n２. ターミナルを見るとターゲットに関する情報が入ったファイルへのパーミッション関連のエラーが出ている。\n![Kobito.f0oYvA.png](https://qiita-image-store.s3.amazonaws.com/0/129662/c538f098-6ca1-781f-7088-133d332443be.png \"Kobito.f0oYvA.png\")\n\n３. なので一旦停止して、sudoでログインしなおす\n\n```\nsudo SKIP_LOGIN=true apic edit\n```\n\n４. 再度起動してきてターゲット追加してみると今度は成功\n![Kobito.Rv2cnd.png](https://qiita-image-store.s3.amazonaws.com/0/129662/850bf064-a6c7-2f01-a8fd-4af102c3984a.png \"Kobito.Rv2cnd.png\")\n\n![Kobito.CIUnVJ.png](https://qiita-image-store.s3.amazonaws.com/0/129662/7049ec30-2993-a6b5-85b3-c3e0ada063d5.png \"Kobito.CIUnVJ.png\")\n\n\n## まとめ\n以上、開発者ツールキットを使う時に地味に詰まった時のメモでした。\n\n## 参考\n* https://github.com/ibm-apiconnect/apichol/issues/10\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:42:51+09:00",
        "group": null,
        "id": "48836a9633d2f79efab5",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "api",
                "versions": []
            },
            {
                "name": "apiconnect",
                "versions": []
            }
        ],
        "title": "API Connectと開発者ツールキットの連携に関する備忘録",
        "updated_at": "2018-03-24T15:45:24+09:00",
        "url": "https://qiita.com/rinaxsumomo/items/48836a9633d2f79efab5",
        "user": {
            "description": "このサイトの掲載内容は私自身の見解であり、必ずしも私の所属組織・企業の立場、戦略、意見を代表するものではありません。公開情報および著者による検証環境をベースに執筆しておりますが、誤解・誤植を含んでいる可能性があります。ご利用の際は自己責任で必ず最新の情報を自ら確認されますようお願いします。特に予期せぬ課金請求などが発生しても著者は一切責任を持ちません。また誤りを見つけられた方は是非ご一報ください。",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 3,
            "github_login_name": "rinaxsumomo",
            "id": "rinaxsumomo",
            "items_count": 17,
            "linkedin_id": "",
            "location": "",
            "name": "Rina O",
            "organization": "",
            "permanent_id": 129662,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/129662/profile-images/1501496191",
            "twitter_screen_name": "rinaxsumomo",
            "website_url": ""
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p>表題の通り実施します。wildflyはデータソース（DB接続、コネクションプール）経由でDBに接続できる機能があります。また、単独でDBの接続情報（パスワード）を暗号化する機能があるため、今回は暗号化した上でDBに接続します。<br>\n<font color=\"red\"><br>\n<strong>暗号強度、接続情報をサーバ上に保持する、暗号／復号をwildlfly単独で完結しているなど対策として十分とは言えず、セキュリティ施策として推奨している内容ではありません。あくまでサーバ上に接続情報をテキストで保持しない程度の対策として見ていただければと存じます。</strong><br>\n</font><br>\n<strong>環境</strong><br>\nwildfly10<br>\nMySQL5.7<br>\nJava1.8</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ ./standalone.sh \nJBOSS_HOME: /Users/kusakai/Downloads/wildfly-10.1.0.Final\n\nmysql&gt; SHOW VARIABLES LIKE \"%version%\";\n+-------------------------+------------------------------+\n| Variable_name           | Value                        |\n+-------------------------+------------------------------+\n| innodb_version          | 5.7.18                       |\n+-------------------------+------------------------------+\n\n$ java -version\njava version \"1.8.0_131\"\n</pre></div></div>\n\n<h2>\n<span id=\"データソースの実装部分暗号化前\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%AE%E5%AE%9F%E8%A3%85%E9%83%A8%E5%88%86%E6%9A%97%E5%8F%B7%E5%8C%96%E5%89%8D\"><i class=\"fa fa-link\"></i></a>データソースの実装部分（暗号化前）</h2>\n\n<p>接続先、ユーザ名、パスワードをテキストファイルとして保持しています。</p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">standalone.xml</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;subsystem</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"urn:jboss:domain:datasources:4.0\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;datasources&gt;</span>\n    <span class=\"nt\">&lt;datasource</span> <span class=\"na\">jndi-name=</span><span class=\"s\">\"java:/enc_test\"</span> <span class=\"na\">pool-name=</span><span class=\"s\">\"enc_pool\"</span> <span class=\"na\">enabled=</span><span class=\"s\">\"true\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;connection-url&gt;</span>jdbc:mysql://localhost:3306/mysql_test<span class=\"nt\">&lt;/connection-url&gt;</span>\n      <span class=\"nt\">&lt;driver&gt;</span>mysql<span class=\"nt\">&lt;/driver&gt;</span>\n      <span class=\"nt\">&lt;security&gt;</span>\n        <span class=\"nt\">&lt;user-name&gt;</span>root<span class=\"nt\">&lt;/user-name&gt;</span>\n        <span class=\"nt\">&lt;password&gt;</span>kusakari<span class=\"nt\">&lt;/password&gt;</span>\n      <span class=\"nt\">&lt;/security&gt;</span>\n    <span class=\"nt\">&lt;/datasource&gt;</span>\n    <span class=\"nt\">&lt;drivers&gt;</span>\n      <span class=\"nt\">&lt;driver</span> <span class=\"na\">name=</span><span class=\"s\">\"mysql\"</span> <span class=\"na\">module=</span><span class=\"s\">\"com.mysql\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/drivers&gt;</span>\n  <span class=\"nt\">&lt;/datasources&gt;</span>\n<span class=\"nt\">&lt;/subsystem&gt;</span>\n</pre></div>\n</div>\n\n<p><strong>動作確認</strong></p>\n\n<div class=\"code-frame\" data-lang=\"sh\">\n<div class=\"code-lang\"><span class=\"bold\">jboss-cli.sh</span></div>\n<div class=\"highlight\"><pre><span class=\"nv\">$ $JBOSS_HOME</span>/bin/jboss-cli.sh\n<span class=\"o\">[</span>disconnected /] connect\n<span class=\"o\">[</span>standalone@localhost:9990 /] /subsystem<span class=\"o\">=</span>datasources/data-source<span class=\"o\">=</span>enc_pool:test-connection-in-pool\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"outcome\"</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">\"success\"</span>,\n    <span class=\"s2\">\"result\"</span> <span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"nb\">true</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"暗号化する\" class=\"fragment\"></span><a href=\"#%E6%9A%97%E5%8F%B7%E5%8C%96%E3%81%99%E3%82%8B\"><i class=\"fa fa-link\"></i></a>暗号化する</h2>\n\n<h3>\n<span id=\"文字列の暗号化\" class=\"fragment\"></span><a href=\"#%E6%96%87%E5%AD%97%E5%88%97%E3%81%AE%E6%9A%97%E5%8F%B7%E5%8C%96\"><i class=\"fa fa-link\"></i></a>文字列の暗号化</h3>\n\n<p>wildflyに含まれるjarファイルで暗号化します<br>\n今回はパスワード文字列「kusakari」を暗号化する</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ cd $JBOSS_HOME/modules/system/layers/base/org/picketbox/main\n$ java -classpath picketbox-4.9.6.Final.jar org.picketbox.datasource.security.SecureIdentityLoginModule kusakari\nEncoded password: -341f8dfc4b67e481207a6df87216de44\n</pre></div></div>\n\n<h3>\n<span id=\"データソースとセキュリティドメインを修正\" class=\"fragment\"></span><a href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%82%BD%E3%83%BC%E3%82%B9%E3%81%A8%E3%82%BB%E3%82%AD%E3%83%A5%E3%83%AA%E3%83%86%E3%82%A3%E3%83%89%E3%83%A1%E3%82%A4%E3%83%B3%E3%82%92%E4%BF%AE%E6%AD%A3\"><i class=\"fa fa-link\"></i></a>データソースとセキュリティドメインを修正</h3>\n\n<p>設定ファイル中にディレクティブを追加します<br>\nCLIでも実施できますが、手動で追加する</p>\n\n<p><strong>データソース部分を修正</strong></p>\n\n<div class=\"code-frame\" data-lang=\"diff\">\n<div class=\"code-lang\"><span class=\"bold\">standalone.xml</span></div>\n<div class=\"highlight\"><pre>  &lt;security&gt;\n<span class=\"gd\">-    &lt;user-name&gt;root&lt;/user-name&gt;\n-    &lt;password&gt;kusakari&lt;/password&gt;\n</span><span class=\"gi\">+    &lt;security-domain&gt;ds-encrypted&lt;/security-domain&gt;\n</span>  &lt;/security&gt;\n\n</pre></div>\n</div>\n\n<p><strong>セキュリティドメイン部分を追加</strong></p>\n\n<div class=\"code-frame\" data-lang=\"xml\">\n<div class=\"code-lang\"><span class=\"bold\">standalone.xml</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;subsystem</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"urn:jboss:domain:security:1.2\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;security-domains&gt;</span>\n    <span class=\"nt\">&lt;security-domain</span> <span class=\"na\">name=</span><span class=\"s\">\"ds-encrypted\"</span> <span class=\"na\">cache-type=</span><span class=\"s\">\"default\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;authentication&gt;</span>\n        <span class=\"nt\">&lt;login-module</span> <span class=\"na\">code=</span><span class=\"s\">\"org.picketbox.datasource.security.SecureIdentityLoginModule\"</span> <span class=\"na\">flag=</span><span class=\"s\">\"required\"</span><span class=\"nt\">&gt;</span>\n          <span class=\"nt\">&lt;module-option</span> <span class=\"na\">name=</span><span class=\"s\">\"username\"</span> <span class=\"na\">value=</span><span class=\"s\">\"root\"</span> <span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;module-option</span> <span class=\"na\">name=</span><span class=\"s\">\"password\"</span> <span class=\"na\">value=</span><span class=\"s\">\"-341f8dfc4b67e481207a6df87216de44\"</span> <span class=\"nt\">/&gt;</span>\n          <span class=\"nt\">&lt;module-option</span> <span class=\"na\">name=</span><span class=\"s\">\"managedConnectionFactory-Name\"</span> <span class=\"na\">value=</span><span class=\"s\">\"jboss.jcs:service=LocalTxCM\"</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;/login-module&gt;</span>\n      <span class=\"nt\">&lt;/authentication&gt;</span>\n    <span class=\"nt\">&lt;/security-domain&gt;</span>\n  <span class=\"nt\">&lt;/security-domains&gt;</span>\n<span class=\"nt\">&lt;/subsystem&gt;</span>\n</pre></div>\n</div>\n\n<p><strong>動作確認</strong></p>\n\n<div class=\"code-frame\" data-lang=\"sh\">\n<div class=\"code-lang\"><span class=\"bold\">jboss-cli.sh</span></div>\n<div class=\"highlight\"><pre><span class=\"o\">[</span>standalone@localhost:9990 /] /subsystem<span class=\"o\">=</span>datasources/data-source<span class=\"o\">=</span>enc_pool:test-connection-in-pool\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"outcome\"</span> <span class=\"o\">=&gt;</span> <span class=\"s2\">\"success\"</span>,\n    <span class=\"s2\">\"result\"</span> <span class=\"o\">=&gt;</span> <span class=\"o\">[</span><span class=\"nb\">true</span><span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre></div>\n</div>\n\n<p>今回はDBのパスワード暗号化のみ実施しました。wildflyにはこれ以外にもプロパティファイルに記載した値で設定ファイルの内容を置き換えるjboss-descriptor-property-replacementなども利用できそうです。</p>\n\n<p>参考：<a href=\"https://www.amazon.com/WildFly-Administration-Guide-Francesco-Marchioni-ebook/dp/B00HOGN0C8\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.amazon.com/WildFly-Administration-Guide-Francesco-Marchioni-ebook/dp/B00HOGN0C8</a></p>\n",
        "body": "表題の通り実施します。wildflyはデータソース（DB接続、コネクションプール）経由でDBに接続できる機能があります。また、単独でDBの接続情報（パスワード）を暗号化する機能があるため、今回は暗号化した上でDBに接続します。\n<font color=\"red\">\n**暗号強度、接続情報をサーバ上に保持する、暗号／復号をwildlfly単独で完結しているなど対策として十分とは言えず、セキュリティ施策として推奨している内容ではありません。あくまでサーバ上に接続情報をテキストで保持しない程度の対策として見ていただければと存じます。**\n</font>\n**環境**\nwildfly10\nMySQL5.7\nJava1.8\n\n```\n$ ./standalone.sh \nJBOSS_HOME: /Users/kusakai/Downloads/wildfly-10.1.0.Final\n\nmysql> SHOW VARIABLES LIKE \"%version%\";\n+-------------------------+------------------------------+\n| Variable_name           | Value                        |\n+-------------------------+------------------------------+\n| innodb_version          | 5.7.18                       |\n+-------------------------+------------------------------+\n\n$ java -version\njava version \"1.8.0_131\"\n```\n\n## データソースの実装部分（暗号化前）\n接続先、ユーザ名、パスワードをテキストファイルとして保持しています。\n\n```xml:standalone.xml\n<subsystem xmlns=\"urn:jboss:domain:datasources:4.0\">\n  <datasources>\n    <datasource jndi-name=\"java:/enc_test\" pool-name=\"enc_pool\" enabled=\"true\">\n      <connection-url>jdbc:mysql://localhost:3306/mysql_test</connection-url>\n      <driver>mysql</driver>\n      <security>\n        <user-name>root</user-name>\n        <password>kusakari</password>\n      </security>\n    </datasource>\n    <drivers>\n      <driver name=\"mysql\" module=\"com.mysql\" />\n    </drivers>\n  </datasources>\n</subsystem>\n```\n**動作確認**\n\n```sh:jboss-cli.sh\n$ $JBOSS_HOME/bin/jboss-cli.sh\n[disconnected /] connect\n[standalone@localhost:9990 /] /subsystem=datasources/data-source=enc_pool:test-connection-in-pool\n{\n    \"outcome\" => \"success\",\n    \"result\" => [true]\n}\n```\n\n##  暗号化する\n### 文字列の暗号化\nwildflyに含まれるjarファイルで暗号化します\n今回はパスワード文字列「kusakari」を暗号化する\n\n```\n$ cd $JBOSS_HOME/modules/system/layers/base/org/picketbox/main\n$ java -classpath picketbox-4.9.6.Final.jar org.picketbox.datasource.security.SecureIdentityLoginModule kusakari\nEncoded password: -341f8dfc4b67e481207a6df87216de44\n```\n\n### データソースとセキュリティドメインを修正\n設定ファイル中にディレクティブを追加します\nCLIでも実施できますが、手動で追加する\n\n**データソース部分を修正**\n\n```diff:standalone.xml\n  <security>\n-    <user-name>root</user-name>\n-    <password>kusakari</password>\n+    <security-domain>ds-encrypted</security-domain>\n  </security>\n\n```\n**セキュリティドメイン部分を追加**\n\n```xml:standalone.xml\n<subsystem xmlns=\"urn:jboss:domain:security:1.2\">\n  <security-domains>\n    <security-domain name=\"ds-encrypted\" cache-type=\"default\">\n      <authentication>\n        <login-module code=\"org.picketbox.datasource.security.SecureIdentityLoginModule\" flag=\"required\">\n          <module-option name=\"username\" value=\"root\" />\n          <module-option name=\"password\" value=\"-341f8dfc4b67e481207a6df87216de44\" />\n          <module-option name=\"managedConnectionFactory-Name\" value=\"jboss.jcs:service=LocalTxCM\" />\n        </login-module>\n      </authentication>\n    </security-domain>\n  </security-domains>\n</subsystem>\n```\n**動作確認**\n\n```sh:jboss-cli.sh\n[standalone@localhost:9990 /] /subsystem=datasources/data-source=enc_pool:test-connection-in-pool\n{\n    \"outcome\" => \"success\",\n    \"result\" => [true]\n}\n```\n\n今回はDBのパスワード暗号化のみ実施しました。wildflyにはこれ以外にもプロパティファイルに記載した値で設定ファイルの内容を置き換えるjboss-descriptor-property-replacementなども利用できそうです。\n\n参考：https://www.amazon.com/WildFly-Administration-Guide-Francesco-Marchioni-ebook/dp/B00HOGN0C8\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:41:53+09:00",
        "group": null,
        "id": "57d54469f893b3ad8810",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "MySQL",
                "versions": []
            },
            {
                "name": "Wildfly",
                "versions": []
            },
            {
                "name": "Wildfly10",
                "versions": []
            }
        ],
        "title": "wildflyのDB接続情報（パスワード文字列）を暗号化する",
        "updated_at": "2018-03-24T16:05:25+09:00",
        "url": "https://qiita.com/kaikusakari/items/57d54469f893b3ad8810",
        "user": {
            "description": "I'm noob.\r\n",
            "facebook_id": "",
            "followees_count": 55,
            "followers_count": 16,
            "github_login_name": null,
            "id": "kaikusakari",
            "items_count": 99,
            "linkedin_id": "",
            "location": "岡山県",
            "name": "草苅 快",
            "organization": "",
            "permanent_id": 110457,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/110457/profile-images/1492349911",
            "twitter_screen_name": null,
            "website_url": ""
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p>Android StudioでDart2を有効にする方法メモです。</p>\n\n<h2>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h2>\n\n<ol>\n<li>Preferencesを開く</li>\n<li>左カラムの <code>Languages &amp; Frameworks &gt; Flutter</code> を選択</li>\n<li>\n<code>Experiments</code> の <code>Run applications with --preview-dart-2</code> にチェックを入れる</li>\n<li>Apply後にAndroid Studioを再起動する</li>\n</ol>\n\n<h2>\n<span id=\"スクリーンショット\" class=\"fragment\"></span><a href=\"#%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%BC%E3%83%B3%E3%82%B7%E3%83%A7%E3%83%83%E3%83%88\"><i class=\"fa fa-link\"></i></a>スクリーンショット</h2>\n\n<p><a href=\"https://camo.qiitausercontent.com/ea7625fb45d54d2d039a2bd31174b9df56730b0c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132333132322f66376165376231352d323364642d646137302d633034632d6539316131346563343030312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img width=\"908\" alt=\"\" src=\"https://camo.qiitausercontent.com/ea7625fb45d54d2d039a2bd31174b9df56730b0c/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3132333132322f66376165376231352d323364642d646137302d633034632d6539316131346563343030312e706e67\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/123122/f7ae7b15-23dd-da70-c04c-e91a14ec4001.png\"></a></p>\n\n<h2>\n<span id=\"確認方法\" class=\"fragment\"></span><a href=\"#%E7%A2%BA%E8%AA%8D%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>確認方法</h2>\n\n<p><code>new</code> や <code>const</code> が省略してビルドできればOKです。</p>\n\n<h2>\n<span id=\"参考\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83\"><i class=\"fa fa-link\"></i></a>参考</h2>\n\n<p>Dart 2 Updates | Dart<br>\n<a href=\"https://www.dartlang.org/dart-2\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.dartlang.org/dart-2</a></p>\n",
        "body": "Android StudioでDart2を有効にする方法メモです。\n\n## 手順\n1. Preferencesを開く\n1. 左カラムの `Languages & Frameworks > Flutter` を選択\n1. `Experiments` の `Run applications with --preview-dart-2` にチェックを入れる\n1. Apply後にAndroid Studioを再起動する\n\n## スクリーンショット\n<img width=\"908\" alt=\"\" src=\"https://qiita-image-store.s3.amazonaws.com/0/123122/f7ae7b15-23dd-da70-c04c-e91a14ec4001.png\">\n\n## 確認方法\n`new` や `const` が省略してビルドできればOKです。\n\n## 参考\nDart 2 Updates | Dart\nhttps://www.dartlang.org/dart-2\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:39:16+09:00",
        "group": null,
        "id": "b891cec73896113031fb",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Dart",
                "versions": []
            },
            {
                "name": "AndroidStudio",
                "versions": []
            },
            {
                "name": "Flutter",
                "versions": []
            }
        ],
        "title": "【Flutter】Android StudioでDart2を有効にする",
        "updated_at": "2018-03-24T15:43:38+09:00",
        "url": "https://qiita.com/rkowase/items/b891cec73896113031fb",
        "user": {
            "description": "Software Engineer",
            "facebook_id": "",
            "followees_count": 7,
            "followers_count": 16,
            "github_login_name": "rkowase",
            "id": "rkowase",
            "items_count": 44,
            "linkedin_id": "",
            "location": "Tokyo, Japan",
            "name": "Rui Kowase",
            "organization": "",
            "permanent_id": 123122,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/123122/profile-images/1474288386",
            "twitter_screen_name": "rkowase",
            "website_url": "http://rkowase.hatenablog.com/"
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h1>\n<span id=\"コンパイル\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB\"><i class=\"fa fa-link\"></i></a>コンパイル</h1>\n\n<p>clang++で標記エラーで作業が丸２日進まなかった。</p>\n\n<h2>\n<span id=\"コンパイルスクリプト\" class=\"fragment\"></span><a href=\"#%E3%82%B3%E3%83%B3%E3%83%91%E3%82%A4%E3%83%AB%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\"><i class=\"fa fa-link\"></i></a>コンパイルスクリプト</h2>\n\n<p>コンパイル用shell script C版(clangとgcc)とC++版(clang++とg++)<br>\n<a href=\"https://qiita.com/kaizen_nagoya/items/74220c0577a512c2d7da\" class=\"autolink\" id=\"reference-0bcf7e992e6a3507bd94\">https://qiita.com/kaizen_nagoya/items/74220c0577a512c2d7da</a><br>\nで定義したスクリプトを使う。</p>\n\n<div class=\"code-frame\" data-lang=\"shell\"><div class=\"highlight\"><pre><span class=\"c\">#!/bin/sh</span>\n<span class=\"nb\">echo</span> <span class=\"s2\">\"clang++ </span><span class=\"nv\">$1</span><span class=\"s2\">.cpp\"</span>\nclang++ <span class=\"nv\">$1</span>.cpp <span class=\"nt\">-o</span> <span class=\"nv\">$1l</span>\n./<span class=\"nv\">$1l</span> <span class=\"nv\">$2</span>\n<span class=\"nb\">echo</span> <span class=\"s2\">\"g++-7 </span><span class=\"nv\">$1</span><span class=\"s2\">.cpp\"</span>\ng++-7 <span class=\"nv\">$1</span>.cpp <span class=\"nt\">-o</span> <span class=\"nv\">$1g</span>\n./<span class=\"nv\">$1g</span> <span class=\"nv\">$2</span>\n</pre></div></div>\n\n<h1>\n<span id=\"ソースコード\" class=\"fragment\"></span><a href=\"#%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89\"><i class=\"fa fa-link\"></i></a>ソースコード</h1>\n\n<p>CERT CPP入門(1) Rule 01. Declarations and Initialization (DCL)<br>\n<a href=\"https://qiita.com/kaizen_nagoya/items/61b3c431756fe8e6af3e\" class=\"autolink\" id=\"reference-d212fda6eb18f03f494e\">https://qiita.com/kaizen_nagoya/items/61b3c431756fe8e6af3e</a></p>\n\n<div class=\"code-frame\" data-lang=\"c++\">\n<div class=\"code-lang\"><span class=\"bold\">dcl50n2.cpp</span></div>\n<div class=\"highlight\"><pre><span class=\"c1\">//clang version 6.0.0 (tags/RELEASE_600/final)</span>\n<span class=\"c1\">//g++-7 (Homebrew GCC 7.3.0_1) 7.3.0</span>\n<span class=\"cp\">#include &lt;iostream&gt;\n#include &lt;cstdarg&gt;\n</span>\n<span class=\"kt\">int</span> <span class=\"nf\">add</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">first</span><span class=\"p\">,</span> <span class=\"kt\">int</span> <span class=\"n\">second</span><span class=\"p\">,</span> <span class=\"p\">...)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">first</span> <span class=\"o\">+</span> <span class=\"n\">second</span><span class=\"p\">;</span> \n  <span class=\"kt\">va_list</span> <span class=\"n\">va</span><span class=\"p\">;</span>\n  <span class=\"n\">va_start</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">);</span>\n  <span class=\"k\">while</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"n\">va_arg</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">,</span> <span class=\"kt\">int</span><span class=\"p\">))</span> <span class=\"p\">{</span>\n    <span class=\"n\">r</span> <span class=\"o\">+=</span> <span class=\"n\">v</span><span class=\"p\">;</span>\n  <span class=\"p\">}</span>\n  <span class=\"n\">va_end</span><span class=\"p\">(</span><span class=\"n\">va</span><span class=\"p\">);</span>\n  <span class=\"k\">return</span> <span class=\"n\">r</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>  \n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"kt\">char</span><span class=\"o\">**</span><span class=\"n\">argv</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"kt\">int</span> <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">;</span>\n  <span class=\"n\">i</span><span class=\"o\">=</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">argc</span><span class=\"p\">,</span> <span class=\"n\">i</span><span class=\"p\">);</span>\n  <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">std</span><span class=\"o\">::</span><span class=\"n\">endl</span><span class=\"p\">;</span>\n  <span class=\"k\">return</span> <span class=\"n\">argc</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"エラー\" class=\"fragment\"></span><a href=\"#%E3%82%A8%E3%83%A9%E3%83%BC\"><i class=\"fa fa-link\"></i></a>エラー</h2>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ./certcpp.sh dl50n2\n<span class=\"go\">clang++ dl50n2.cpp\nIn file included from dl50n2.cpp:1:\nIn file included from /usr/local/Cellar/llvm/6.0.0/include/c++/v1/iostream:38:\nIn file included from /usr/local/Cellar/llvm/6.0.0/include/c++/v1/ios:215:\nIn file included from /usr/local/Cellar/llvm/6.0.0/include/c++/v1/iosfwd:90:\n/usr/local/Cellar/llvm/6.0.0/include/c++/v1/wchar.h:119:15: fatal error: 'wchar.h' file not found\n</span><span class=\"gp\">#</span>include_next &lt;wchar.h&gt;\n<span class=\"go\">              ^~~~~~~~~\n1 error generated.\n./certcpp.sh: line 4: ./dl50n2l: No such file or directory\ng++-7 dl50n2.cpp\n-460557205\n</span></pre></div></div>\n\n<h1>\n<span id=\"検索\" class=\"fragment\"></span><a href=\"#%E6%A4%9C%E7%B4%A2\"><i class=\"fa fa-link\"></i></a>検索</h1>\n\n<p>「fatal error: 'wchar.h' file not found」検索</p>\n\n<p>'wchar.h' file not found<br>\n<a href=\"https://stackoverflow.com/questions/46342411/wchar-h-file-not-found\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://stackoverflow.com/questions/46342411/wchar-h-file-not-found</a></p>\n\n<h2>\n<span id=\"解１\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%EF%BC%91\"><i class=\"fa fa-link\"></i></a>解１</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre> I was able to fix it using symbolic link. This is what I made :\n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> <span class=\"nb\">cd</span> /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/\n<span class=\"gp\">$</span><span class=\"nb\">sudo ln</span> <span class=\"nt\">-s</span> MacOSX.sdk MacOSX10.07.sdk\n</pre></div></div>\n\n<p>今、10.13</p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">$</span><span class=\"nb\">sudo ln</span> <span class=\"nt\">-s</span> MacOSX.sdk MacOSX10.13.sdk\n</pre></div></div>\n\n<h2>\n<span id=\"解２同じく上記urlから\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%EF%BC%92%E5%90%8C%E3%81%98%E3%81%8F%E4%B8%8A%E8%A8%98url%E3%81%8B%E3%82%89\"><i class=\"fa fa-link\"></i></a>解２　同じく上記URLから</h2>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>The solution was to run CMake, 'Delete Cache', and 'Configure' the project again. \n</pre></div></div>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> brew <span class=\"nb\">install </span>cmake\n</pre></div></div>\n\n<h2>\n<span id=\"解3\" class=\"fragment\"></span><a href=\"#%E8%A7%A33\"><i class=\"fa fa-link\"></i></a>解3</h2>\n\n<p>clang++ via homebrew (llvm38) - compile error with system includes<br>\n<a href=\"https://stackoverflow.com/questions/37321840/clang-via-homebrew-llvm38-compile-error-with-system-includes\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://stackoverflow.com/questions/37321840/clang-via-homebrew-llvm38-compile-error-with-system-includes</a></p>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> x-code-select <span class=\"nt\">--install</span>\n</pre></div></div>\n\n<h1>\n<span id=\"結果\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E6%9E%9C\"><i class=\"fa fa-link\"></i></a>結果</h1>\n\n<div class=\"code-frame\" data-lang=\"shell-session\"><div class=\"highlight\"><pre><span class=\"gp\">$</span> ./certcpp.sh dl50n2\n<span class=\"go\">clang++ dl50n2.cpp\n-698595334\ng++-7 dl50n2.cpp\n-292400021\n</span></pre></div></div>\n\n<p>やっと解決。何が効いたか。多分解３。</p>\n\n<p>stack overvlow恐るべし。感謝。</p>\n",
        "body": "#コンパイル\n\nclang++で標記エラーで作業が丸２日進まなかった。\n\n##コンパイルスクリプト\nコンパイル用shell script C版(clangとgcc)とC++版(clang++とg++)\nhttps://qiita.com/kaizen_nagoya/items/74220c0577a512c2d7da\nで定義したスクリプトを使う。\n\n```shell\n#!/bin/sh\necho \"clang++ $1.cpp\"\nclang++ $1.cpp -o $1l\n./$1l $2\necho \"g++-7 $1.cpp\"\ng++-7 $1.cpp -o $1g\n./$1g $2\n```\n\n#ソースコード\nCERT CPP入門(1) Rule 01. Declarations and Initialization (DCL)\nhttps://qiita.com/kaizen_nagoya/items/61b3c431756fe8e6af3e\n\n```dcl50n2.cpp\n//clang version 6.0.0 (tags/RELEASE_600/final)\n//g++-7 (Homebrew GCC 7.3.0_1) 7.3.0\n#include <iostream>\n#include <cstdarg>\n\nint add(int first, int second, ...) {\n  int r = first + second; \n  va_list va;\n  va_start(va, second);\n  while (int v = va_arg(va, int)) {\n    r += v;\n  }\n  va_end(va);\n  return r;\n}  \n\nint main(int argc, char**argv) {\n  int i=1;\n  i=add(argc, i);\n  std::cout << i << std::endl;\n  return argc;\n}\n```\n\n##エラー\n\n```shell-session\n$ ./certcpp.sh dl50n2\nclang++ dl50n2.cpp\nIn file included from dl50n2.cpp:1:\nIn file included from /usr/local/Cellar/llvm/6.0.0/include/c++/v1/iostream:38:\nIn file included from /usr/local/Cellar/llvm/6.0.0/include/c++/v1/ios:215:\nIn file included from /usr/local/Cellar/llvm/6.0.0/include/c++/v1/iosfwd:90:\n/usr/local/Cellar/llvm/6.0.0/include/c++/v1/wchar.h:119:15: fatal error: 'wchar.h' file not found\n#include_next <wchar.h>\n              ^~~~~~~~~\n1 error generated.\n./certcpp.sh: line 4: ./dl50n2l: No such file or directory\ng++-7 dl50n2.cpp\n-460557205\n```\n\n#検索\n\n「fatal error: 'wchar.h' file not found」検索\n\n'wchar.h' file not found\nhttps://stackoverflow.com/questions/46342411/wchar-h-file-not-found\n\n##解１\n\n```\n I was able to fix it using symbolic link. This is what I made :\n```\n\n```shell-session\n$ cd /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/\n$sudo ln -s MacOSX.sdk MacOSX10.07.sdk\n```\n\n今、10.13\n\n```shell-session\n$sudo ln -s MacOSX.sdk MacOSX10.13.sdk\n```\n\n##解２　同じく上記URLから\n\n```\nThe solution was to run CMake, 'Delete Cache', and 'Configure' the project again. \n```\n\n```shell-session\n$ brew install cmake\n```\n\n##解3\nclang++ via homebrew (llvm38) - compile error with system includes\nhttps://stackoverflow.com/questions/37321840/clang-via-homebrew-llvm38-compile-error-with-system-includes\n\n```shell-session\n$ x-code-select --install\n```\n\n#結果\n\n```shell-session\n$ ./certcpp.sh dl50n2\nclang++ dl50n2.cpp\n-698595334\ng++-7 dl50n2.cpp\n-292400021\n```\n\nやっと解決。何が効いたか。多分解３。\n\nstack overvlow恐るべし。感謝。\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:37:49+09:00",
        "group": null,
        "id": "de15cd46d657517fac11",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "C++",
                "versions": []
            },
            {
                "name": "brew",
                "versions": []
            },
            {
                "name": "sudo",
                "versions": []
            },
            {
                "name": "LLVM",
                "versions": []
            },
            {
                "name": "x-code",
                "versions": []
            }
        ],
        "title": "'wchar.h' file not found で困った clang++ macOS",
        "updated_at": "2018-03-24T16:07:21+09:00",
        "url": "https://qiita.com/kaizen_nagoya/items/de15cd46d657517fac11",
        "user": {
            "description": "I'm a network designer.I work on TOPPERS SmallestSetProfile Kernel,MISRA-C, STARC RTL Design StyleGuide (Verilog-HDL),HAZOP,ISO/IEC15504(AutomotiveSPICE),ISO26262",
            "facebook_id": "kaizen.nagoya",
            "followees_count": 3765,
            "followers_count": 303,
            "github_login_name": "kaizen-nagoya",
            "id": "kaizen_nagoya",
            "items_count": 102,
            "linkedin_id": "kiyoshi-ogawa",
            "location": "Aichi, Japan",
            "name": "清 小川",
            "organization": "NMIRI",
            "permanent_id": 51423,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/51423/profile-images/1519966253",
            "twitter_screen_name": "kaizen_nagoya",
            "website_url": "https://researchmap.jp/joakum54g-1787586/"
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h1>\n<span id=\"投稿の経緯---awsと英語の学習のため\" class=\"fragment\"></span><a href=\"#%E6%8A%95%E7%A8%BF%E3%81%AE%E7%B5%8C%E7%B7%AF---aws%E3%81%A8%E8%8B%B1%E8%AA%9E%E3%81%AE%E5%AD%A6%E7%BF%92%E3%81%AE%E3%81%9F%E3%82%81\"><i class=\"fa fa-link\"></i></a>投稿の経緯 - AWSと英語の学習のため</h1>\n\n<p>初めて投稿します。生命保険会社でSpark/Pythonを使ったデータ分析をしています。自宅でもSpark環境を作ろうとして早速挫折したのをきっかけにAWSの勉強を始めました。ネットワークインフラ環境について全く知識がなく、なおかつ英語も苦手なので、AWSトレーニングの内容を文字起こししつつ、英語もAWSも学んじゃおうという魂胆です。<br>\n私同様、AWS・英語を勉強したい方のお役に立てればと思います。<br>\nディクテーション（書き取り）や訳がおかしければ、どなたかご指摘いただけると嬉しいです。</p>\n\n<p><a href=\"https://www.aws.training/\" rel=\"nofollow noopener\" target=\"_blank\">AWS トレーニング</a><br>\n経験のレベル＝初級、言語＝日本語 で検索したらたったの２講座しかない（2018/3/24現在）、まじか。<br>\n最初なので日本語訳ありの講座で、ディクテーションしてみました。日本語訳は AWS トレーニングによるものです。</p>\n\n<h1>\n<span id=\"aws-cloud-practitioner-essentials-digital-japanese\" class=\"fragment\"></span><a href=\"#aws-cloud-practitioner-essentials-digital-japanese\"><i class=\"fa fa-link\"></i></a>AWS Cloud Practitioner Essentials (Digital) (Japanese)</h1>\n\n<h2>\n<span id=\"course-overview\" class=\"fragment\"></span><a href=\"#course-overview\"><i class=\"fa fa-link\"></i></a>Course Overview</h2>\n\n<p>Hello, I'm Jody Soeiro de Faria, for amazon web services and training certification.<br>\nWelcome to Cloud Practitioner Essentials.<br>\nThis course is intended for individuals who seek overall understanding of the AWS Could independent specific technical roles.<br>\n</p><blockquote>こんにちは。アマゾンウェブサービス training and certification の Jody Soeiro de Faria です。<br>\nCloud Practitioner Essensials へようこそ。<br>\nこのコースは特定の技術担当者に限らず、AWSクラウドを全体的に理解したい方を対象としています。</blockquote>\n\n<p>It provides a detailed overview of core concepts, AWS services, securities, architechture, pricing and support.<br>\nAccomplishing this cource, a larner should be able to<br>\n* define what the AWS Could is and the basic global infrastructure<br>\n* describe the key services on the AWS platform and their common use cases<br>\n* describe basic AWS Cloud architectural principles<br>\n* describe basic security and compliance aspects of the AWS platform and the shared security model<br>\n* define the billing, account management, and pricing models<br>\n* identify sources of documentation or technical assistance<br>\n* describe the AWS Cloud value proposition, and<br>\n* describe basic/core characteristics of deploying and operating in the AWS Cloud.</p>\n\n<blockquote>このコースではクラウドの概念、AWSのサービス、セキュリティ、アーキテクチャ、料金、サポートに関する詳細な概要を説明します。このコースを修了すると、受講者は以下のことができるようになります。\n* AWSクラウドとは何かを定義し、その基本的なグローバルインフラストラクチャについて説明する。\n* AWS プラットフォームの主なサービスと、一般的ユースケースについて説明する。\n* 基本的な AWS クラウドアーキテクチャの原則について説明する。\n* AWS プラットフォームの基本的なセキュリティとコンプライアンス、ならびに共有セキュリティモデルについて説明する。\n* 請求、アカウント管理、料金モデルについて定義する。\n* ドキュメントのソースや技術支援を特定する。\n* AWS クラウドの価値提案について説明する。\n* AWS クラウドでのデプロイと運用に関する主な基本的特性について説明する。</blockquote>\n\n<p>This is an entry-level course but it assumes the learners have <br>\n* general IT technical knowledge<br>\n* general IT business knowledge</p>\n\n<blockquote>これは入門レベルのコースですが、受講者が IT 技術と IT ビジネスに関する一般的な知識を持っていることを前提にしています。</blockquote>\n\n<p>This course will deriver 3 short video modules and knowledge assessments.<br>\nIt takes approximately 6 hours to complete.<br>\nCloud Practitioner Essentials is comprised of this overview, 5 content modules, bonus material, and course summary.</p>\n\n<blockquote>このコースは、短編動画シリーズのモジュールと知識の確認テストによって実施されます。所要時間は約６時間です。\nCloud Practitioner Essentials は、この概要と、５つのコンテンツモジュール、追加の教材、コースのまとめで構成されています。</blockquote>\n\n<p>In section 1, we cover AWS Cloud concepts. This includes<br>\n* introduction to cloud, and<br>\n* introduction to the AWS Cloud</p>\n\n<blockquote>セクション１では、AWS クラウドの概念について説明します。このセクションには、クラウドの紹介と AWS クラウドの紹介が含まれています。</blockquote>\n\n<p>In section 2, we cover AWS core services.<br>\nThis is comprised of <br>\n* overview of services and categories<br>\n* introduction to the AWS global infrastructure<br>\n* Amazon VPC<br>\n* security groups<br>\n* Amazon EC2<br>\n* Amazon elastic block store<br>\n* Amazon S3, and<br>\n* AWS database solutions</p>\n\n<blockquote>セクション２では、AWS のコアサービスについて説明します。このセクションは、サービスとカテゴリの概要のほか、AWS のグローバルインフラストラクチャ、Amazon VPC、セキュリティグループ、Amazon EC2、Amazon Elastic Block Store、Amazon S3、AWS のデータベースソリューションの紹介で構成されています。</blockquote>\n\n<p>In section 3, we cover AWS security. This includes<br>\n* introduction to AWS security<br>\n* the AWS shared responsibility model<br>\n* AWS access control and management<br>\n* AWS security compliance programs, and<br>\n* AWS security resources</p>\n\n<blockquote>セクション３では、AWS のセキュリティについて説明します。このセクションでは、AWS のセキュリティ、責任共有モデル、アクセスコントロールとアクセス管理、セキュリティコンプライアンスプログラム、セキュリティリソースを紹介します。</blockquote>\n\n<p>In section 4, we cover AWS architecting. This includes<br>\n* introduction to the well-architected framework<br>\n* referrance architecture: fault tolerance and high availability, and<br>\n* reference architecture: web hosting.</p>\n\n<blockquote>セクション４では、AWS のアーキテクチャの設計について説明します。このセクションでは、優れた設計のフレームワーク、障害耐性と高可用のリファレンスアーキテクチャ、ウェブホスティングのリファレンスアーキテクチャを紹介します。</blockquote>\n\n<p>In section 5, we cover AWS pricing and support. This includes<br>\n* fundamentals of pricing<br>\n* pricing details for<br>\n  - Amazon EC2<br>\n  - Amazon S3<br>\n  - Amazon EBS<br>\n  - Amazon RDS<br>\n  - Amazon CloudFront<br>\n* the TCO calculator overview, and<br>\n* AWS support plans overview</p>\n\n<blockquote>セクション５では、AWS の料金とサポートについて説明します。このセクションには、料金の基礎、Amazon EC2、Amazon S3、Amazon EBS、Amazon RDS、Amazon CloudFront の料金詳細、AWS サポートツールの概要、AWS サポートプランの概要が含まれています。</blockquote>\n\n<p>In bonus materials. This course includes bonus material<br>\nin a several supplementary videos that reinforce what you've leaned in this cource.</p>\n\n<blockquote>追加の教材についてですが、このコースには補足動画という形で追加の題材が含まれており、このコースで学習したことを補強できるようになっています。</blockquote>\n\n<p>I hope you will enjoy the learning experience. Amazon Web Services training and certifications, I'm Jody Soeiro de Faria.</p>\n\n<blockquote>このコースが皆様のお役に立つことを願っております。アマゾンウェブサービス Training and Certification の Jody Soeiro de Faria でした。</blockquote>\n\n<h1>\n<span id=\"やってみた感想目標\" class=\"fragment\"></span><a href=\"#%E3%82%84%E3%81%A3%E3%81%A6%E3%81%BF%E3%81%9F%E6%84%9F%E6%83%B3%E7%9B%AE%E6%A8%99\"><i class=\"fa fa-link\"></i></a>やってみた感想、目標</h1>\n\n<p>５分の動画だったのにかなり大変だった。もっとディクテーションや意味の理解が早くできるといいな。AWSの資格は相当実務寄りらしいから資格の取得も視野に入れて、勉強会にも積極的に参加したい。</p>\n",
        "body": "# 投稿の経緯 - AWSと英語の学習のため\n\n初めて投稿します。生命保険会社でSpark/Pythonを使ったデータ分析をしています。自宅でもSpark環境を作ろうとして早速挫折したのをきっかけにAWSの勉強を始めました。ネットワークインフラ環境について全く知識がなく、なおかつ英語も苦手なので、AWSトレーニングの内容を文字起こししつつ、英語もAWSも学んじゃおうという魂胆です。\n私同様、AWS・英語を勉強したい方のお役に立てればと思います。\nディクテーション（書き取り）や訳がおかしければ、どなたかご指摘いただけると嬉しいです。\n\n[AWS トレーニング](https://www.aws.training/)\n経験のレベル＝初級、言語＝日本語 で検索したらたったの２講座しかない（2018/3/24現在）、まじか。\n最初なので日本語訳ありの講座で、ディクテーションしてみました。日本語訳は AWS トレーニングによるものです。\n\n# AWS Cloud Practitioner Essentials (Digital) (Japanese)\n\n## Course Overview\n\nHello, I'm Jody Soeiro de Faria, for amazon web services and training certification.\nWelcome to Cloud Practitioner Essentials.\nThis course is intended for individuals who seek overall understanding of the AWS Could independent specific technical roles.\n<blockquote>こんにちは。アマゾンウェブサービス training and certification の Jody Soeiro de Faria です。\nCloud Practitioner Essensials へようこそ。\nこのコースは特定の技術担当者に限らず、AWSクラウドを全体的に理解したい方を対象としています。</blockquote>\n\nIt provides a detailed overview of core concepts, AWS services, securities, architechture, pricing and support.\nAccomplishing this cource, a larner should be able to\n* define what the AWS Could is and the basic global infrastructure\n* describe the key services on the AWS platform and their common use cases\n* describe basic AWS Cloud architectural principles\n* describe basic security and compliance aspects of the AWS platform and the shared security model\n* define the billing, account management, and pricing models\n* identify sources of documentation or technical assistance\n* describe the AWS Cloud value proposition, and\n* describe basic/core characteristics of deploying and operating in the AWS Cloud.\n\n<blockquote>このコースではクラウドの概念、AWSのサービス、セキュリティ、アーキテクチャ、料金、サポートに関する詳細な概要を説明します。このコースを修了すると、受講者は以下のことができるようになります。\n* AWSクラウドとは何かを定義し、その基本的なグローバルインフラストラクチャについて説明する。\n* AWS プラットフォームの主なサービスと、一般的ユースケースについて説明する。\n* 基本的な AWS クラウドアーキテクチャの原則について説明する。\n* AWS プラットフォームの基本的なセキュリティとコンプライアンス、ならびに共有セキュリティモデルについて説明する。\n* 請求、アカウント管理、料金モデルについて定義する。\n* ドキュメントのソースや技術支援を特定する。\n* AWS クラウドの価値提案について説明する。\n* AWS クラウドでのデプロイと運用に関する主な基本的特性について説明する。</blockquote>\n\nThis is an entry-level course but it assumes the learners have \n* general IT technical knowledge\n* general IT business knowledge\n\n<blockquote>これは入門レベルのコースですが、受講者が IT 技術と IT ビジネスに関する一般的な知識を持っていることを前提にしています。</blockquote>\n\nThis course will deriver 3 short video modules and knowledge assessments.\nIt takes approximately 6 hours to complete.\nCloud Practitioner Essentials is comprised of this overview, 5 content modules, bonus material, and course summary.\n\n<blockquote>このコースは、短編動画シリーズのモジュールと知識の確認テストによって実施されます。所要時間は約６時間です。\nCloud Practitioner Essentials は、この概要と、５つのコンテンツモジュール、追加の教材、コースのまとめで構成されています。</blockquote>\n\nIn section 1, we cover AWS Cloud concepts. This includes\n* introduction to cloud, and\n* introduction to the AWS Cloud\n\n<blockquote>セクション１では、AWS クラウドの概念について説明します。このセクションには、クラウドの紹介と AWS クラウドの紹介が含まれています。</blockquote>\n\nIn section 2, we cover AWS core services.\nThis is comprised of \n* overview of services and categories\n* introduction to the AWS global infrastructure\n* Amazon VPC\n* security groups\n* Amazon EC2\n* Amazon elastic block store\n* Amazon S3, and\n* AWS database solutions\n\n<blockquote>セクション２では、AWS のコアサービスについて説明します。このセクションは、サービスとカテゴリの概要のほか、AWS のグローバルインフラストラクチャ、Amazon VPC、セキュリティグループ、Amazon EC2、Amazon Elastic Block Store、Amazon S3、AWS のデータベースソリューションの紹介で構成されています。</blockquote>\n\nIn section 3, we cover AWS security. This includes\n* introduction to AWS security\n* the AWS shared responsibility model\n* AWS access control and management\n* AWS security compliance programs, and\n* AWS security resources\n\n<blockquote>セクション３では、AWS のセキュリティについて説明します。このセクションでは、AWS のセキュリティ、責任共有モデル、アクセスコントロールとアクセス管理、セキュリティコンプライアンスプログラム、セキュリティリソースを紹介します。</blockquote>\n\nIn section 4, we cover AWS architecting. This includes\n* introduction to the well-architected framework\n* referrance architecture: fault tolerance and high availability, and\n* reference architecture: web hosting.\n\n<blockquote>セクション４では、AWS のアーキテクチャの設計について説明します。このセクションでは、優れた設計のフレームワーク、障害耐性と高可用のリファレンスアーキテクチャ、ウェブホスティングのリファレンスアーキテクチャを紹介します。</blockquote>\n\nIn section 5, we cover AWS pricing and support. This includes\n* fundamentals of pricing\n* pricing details for\n  - Amazon EC2\n  - Amazon S3\n  - Amazon EBS\n  - Amazon RDS\n  - Amazon CloudFront\n* the TCO calculator overview, and\n* AWS support plans overview\n\n<blockquote>セクション５では、AWS の料金とサポートについて説明します。このセクションには、料金の基礎、Amazon EC2、Amazon S3、Amazon EBS、Amazon RDS、Amazon CloudFront の料金詳細、AWS サポートツールの概要、AWS サポートプランの概要が含まれています。</blockquote>\n\nIn bonus materials. This course includes bonus material\nin a several supplementary videos that reinforce what you've leaned in this cource.\n\n<blockquote>追加の教材についてですが、このコースには補足動画という形で追加の題材が含まれており、このコースで学習したことを補強できるようになっています。</blockquote>\n\nI hope you will enjoy the learning experience. Amazon Web Services training and certifications, I'm Jody Soeiro de Faria.\n\n<blockquote>このコースが皆様のお役に立つことを願っております。アマゾンウェブサービス Training and Certification の Jody Soeiro de Faria でした。</blockquote>\n\n#やってみた感想、目標\n\n５分の動画だったのにかなり大変だった。もっとディクテーションや意味の理解が早くできるといいな。AWSの資格は相当実務寄りらしいから資格の取得も視野に入れて、勉強会にも積極的に参加したい。\n",
        "coediting": false,
        "comments_count": 1,
        "created_at": "2018-03-24T15:29:01+09:00",
        "group": null,
        "id": "9cd2a33797b1dc9bcb05",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "AWS",
                "versions": []
            },
            {
                "name": "英語",
                "versions": []
            }
        ],
        "title": "AWSトレーニングの英日字幕 - AWS Cloud Practitioner Essentials (Digital)",
        "updated_at": "2018-03-24T15:31:36+09:00",
        "url": "https://qiita.com/ThomasAoki/items/9cd2a33797b1dc9bcb05",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 0,
            "followers_count": 0,
            "github_login_name": null,
            "id": "ThomasAoki",
            "items_count": 1,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 245377,
            "profile_image_url": "https://lh3.googleusercontent.com/-XdUIqdMkCWA/AAAAAAAAAAI/AAAAAAAAAAA/4252rscbv5M/photo.jpg?sz=50",
            "twitter_screen_name": null,
            "website_url": null
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h1>\n<span id=\"smoant-s8-pod-kit\" class=\"fragment\"></span><a href=\"#smoant-s8-pod-kit\"><i class=\"fa fa-link\"></i></a>Smoant S8 Pod Kit</h1>\n\n<p><a href=\"https://www.vaporl.com/smoant-s8-all-in-one-pod-system-starter-kit.html\" rel=\"nofollow noopener\" target=\"_blank\">Smoant S8 Kit</a> Vape Pod is designed from the concepts of Ferrari La Ferrari, Lamborghini Reventon and and so on, powered by a large 370mAh built-in battery and large 2ml e juice capacity. With a streamlined portable design, Smoant S8 is lasting endurance, great taste and simple operation. Smoant S8 <a href=\"https://www.vaporl.com/starter-kits/pod-mod-vape-kits.html\" rel=\"nofollow noopener\" target=\"_blank\">vape pod</a> Kit is a price-performance ratio that Smoant prides itself on. It;s the supercar of the vape world.<br>\n<a href=\"https://camo.qiitausercontent.com/e2ad7b2e6c5480e7c97b120d43c05756a17b0c66/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234313537332f62343532616565632d666634342d326363332d363765372d3961323337616363643364642e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2ad7b2e6c5480e7c97b120d43c05756a17b0c66/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234313537332f62343532616565632d666634342d326363332d363765372d3961323337616363643364642e6a706567\" alt=\"29472067_590019754677314_4974535562946936832_n.jpg\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/241573/b452aeec-ff44-2cc3-67e7-9a237accd3dd.jpeg\"></a></p>\n\n<h2>\n<span id=\"specs--features\" class=\"fragment\"></span><a href=\"#specs--features\"><i class=\"fa fa-link\"></i></a>Specs &amp; Features:</h2>\n\n<p>All-in-one system<br>\n2ML campacity<br>\n1.3ohm resistance<br>\n370 mAh internal battery<br>\nUSB charging<br>\nLED battery indicator<br>\nBe more suited with nicotine salts e-liquid.</p>\n\n<h2>\n<span id=\"package-includes\" class=\"fragment\"></span><a href=\"#package-includes\"><i class=\"fa fa-link\"></i></a>Package Includes:</h2>\n\n<p>1X Smoant S8 pod<br>\n1X Cartridge<br>\n1X E-juice bottle<br>\n1X USB charge cable<br>\n1X Instructional Manual</p>\n\n<h1>\n<span id=\"suorin-drop-kit\" class=\"fragment\"></span><a href=\"#suorin-drop-kit\"><i class=\"fa fa-link\"></i></a>Suorin DROP Kit</h1>\n\n<p>The <a href=\"https://www.vaporl.com/suorin-dpro-starter-kit.html\" rel=\"nofollow noopener\" target=\"_blank\">Suorin Drop</a> Ultra Portable System is a robust and versatile water-drop style ultra portable pod system that features the intuitive Refillable Suorin Drop Cartridge System that allows you to utilize your favorite Salt Based Nicotine E-Liquids or Regular E-Liquids. Just like the Suorin Air, the Suorin Drop Ultra Portable System is an all in one system with draw activated firing, a magnetic pod system that can hold up to 2ml of E-Liquid, an atomizer resistance of 1.3 to 1.4 ohms and a maximum of 13W output . A 310mAh built in battery powers the device and an LED battery life indicator indicates its battery life. The Suorin Drop Ultra Portable System is a simple and convenient all-in-one, ultra portable system that is perfect for users looking for a sleek, covert, all-day vaping device!<br>\n<a href=\"https://camo.qiitausercontent.com/aacabb9022db5639ca2bd15ef617adad3468273d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234313537332f38356262393161642d663034642d623032362d636438322d3761396265333133636464302e6a706567\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/aacabb9022db5639ca2bd15ef617adad3468273d/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234313537332f38356262393161642d663034642d623032362d636438322d3761396265333133636464302e6a706567\" alt=\"suroindropbanner_2048x2048.jpg\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/241573/85bb91ad-f04d-b026-cd82-7a9be313cdd0.jpeg\"></a></p>\n\n<h2>\n<span id=\"specs--features-1\" class=\"fragment\"></span><a href=\"#specs--features-1\"><i class=\"fa fa-link\"></i></a>Specs &amp; Features:</h2>\n\n<p>Drop Style Design<br>\n2.0ml E-Liquid Capacity On The Pods/Cartridges<br>\n<a href=\"https://www.vaporl.com/suorin-drop-replacement-cartridge-pod-1pc-pack.html\" rel=\"nofollow noopener\" target=\"_blank\">Suorin Drop Pods</a> System<br>\nCharged via Micro USB<br>\nBuilt in 310mAh Battery<br>\nZinc Alloy Construction</p>\n\n<h2>\n<span id=\"package-includes-1\" class=\"fragment\"></span><a href=\"#package-includes-1\"><i class=\"fa fa-link\"></i></a>Package Includes:</h2>\n\n<p>1 x Suorin Drop<br>\n1 x USB Cable<br>\n1 x User Manual<br>\n1 x Warranty Card</p>\n",
        "body": "#Smoant S8 Pod Kit\n\n[Smoant S8 Kit](https://www.vaporl.com/smoant-s8-all-in-one-pod-system-starter-kit.html) Vape Pod is designed from the concepts of Ferrari La Ferrari, Lamborghini Reventon and and so on, powered by a large 370mAh built-in battery and large 2ml e juice capacity. With a streamlined portable design, Smoant S8 is lasting endurance, great taste and simple operation. Smoant S8 [vape pod](https://www.vaporl.com/starter-kits/pod-mod-vape-kits.html) Kit is a price-performance ratio that Smoant prides itself on. It;s the supercar of the vape world.\n![29472067_590019754677314_4974535562946936832_n.jpg](https://qiita-image-store.s3.amazonaws.com/0/241573/b452aeec-ff44-2cc3-67e7-9a237accd3dd.jpeg)\n\n##Specs & Features:\n\nAll-in-one system\n2ML campacity\n1.3ohm resistance\n370 mAh internal battery\nUSB charging\nLED battery indicator\nBe more suited with nicotine salts e-liquid.\n##Package Includes:\n\n1X Smoant S8 pod\n1X Cartridge\n1X E-juice bottle\n1X USB charge cable\n1X Instructional Manual\n#Suorin DROP Kit\n\nThe [Suorin Drop](https://www.vaporl.com/suorin-dpro-starter-kit.html) Ultra Portable System is a robust and versatile water-drop style ultra portable pod system that features the intuitive Refillable Suorin Drop Cartridge System that allows you to utilize your favorite Salt Based Nicotine E-Liquids or Regular E-Liquids. Just like the Suorin Air, the Suorin Drop Ultra Portable System is an all in one system with draw activated firing, a magnetic pod system that can hold up to 2ml of E-Liquid, an atomizer resistance of 1.3 to 1.4 ohms and a maximum of 13W output . A 310mAh built in battery powers the device and an LED battery life indicator indicates its battery life. The Suorin Drop Ultra Portable System is a simple and convenient all-in-one, ultra portable system that is perfect for users looking for a sleek, covert, all-day vaping device!\n![suroindropbanner_2048x2048.jpg](https://qiita-image-store.s3.amazonaws.com/0/241573/85bb91ad-f04d-b026-cd82-7a9be313cdd0.jpeg)\n\n##Specs & Features:\n\nDrop Style Design\n2.0ml E-Liquid Capacity On The Pods/Cartridges\n[Suorin Drop Pods](https://www.vaporl.com/suorin-drop-replacement-cartridge-pod-1pc-pack.html) System\nCharged via Micro USB\nBuilt in 310mAh Battery\nZinc Alloy Construction\n##Package Includes:\n\n1 x Suorin Drop\n1 x USB Cable\n1 x User Manual\n1 x Warranty Card\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:26:12+09:00",
        "group": null,
        "id": "ea4a9c13c3b0ff9c4e93",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "smoants8",
                "versions": []
            },
            {
                "name": "suorindrop",
                "versions": []
            },
            {
                "name": "vapepod",
                "versions": []
            },
            {
                "name": "podvape",
                "versions": []
            }
        ],
        "title": "Pocket Pod Kit: Smoant S8 VS Suorin Drop",
        "updated_at": "2018-03-24T15:26:12+09:00",
        "url": "https://qiita.com/vaporl/items/ea4a9c13c3b0ff9c4e93",
        "user": {
            "description": "",
            "facebook_id": "",
            "followees_count": 0,
            "followers_count": 0,
            "github_login_name": null,
            "id": "vaporl",
            "items_count": 4,
            "linkedin_id": "",
            "location": "",
            "name": "",
            "organization": "Vaporl.com",
            "permanent_id": 241573,
            "profile_image_url": "https://secure.gravatar.com/avatar/9904e8f0153dcb65e43b08ab61b022c1",
            "twitter_screen_name": null,
            "website_url": "https://www.vaporl.com"
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h1>\n<span id=\"この記事について\" class=\"fragment\"></span><a href=\"#%E3%81%93%E3%81%AE%E8%A8%98%E4%BA%8B%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\"><i class=\"fa fa-link\"></i></a>この記事について</h1>\n\n<p>sidekiqをrails無しの環境で使うための確認作業中の出来事をメモする程度の記事。今回はworker内でexecを使うとsidekiqが終了したのでその件をメモ <img alt=\":pencil:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f4dd.png\" title=\":pencil:\" width=\"20\"> </p>\n\n<h2>\n<span id=\"結論\" class=\"fragment\"></span><a href=\"#%E7%B5%90%E8%AB%96\"><i class=\"fa fa-link\"></i></a>結論</h2>\n\n<p>Worker内で <code>exec</code> 使わずに <code>system</code>, <code>Open3.capture3</code> 等を使用する <img alt=\":smile:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f604.png\" title=\":smile:\" width=\"20\"> </p>\n\n<h1>\n<span id=\"現象\" class=\"fragment\"></span><a href=\"#%E7%8F%BE%E8%B1%A1\"><i class=\"fa fa-link\"></i></a>現象</h1>\n\n<h2>\n<span id=\"前提\" class=\"fragment\"></span><a href=\"#%E5%89%8D%E6%8F%90\"><i class=\"fa fa-link\"></i></a>前提</h2>\n\n<ul>\n<li>MacOS</li>\n<li>sidekiq version = 5.1.1</li>\n<li>redis version = 4.0.8</li>\n</ul>\n\n<p>スタンドアロンの動作試験のため全てターミナル上で動作検証している</p>\n\n<h2>\n<span id=\"worker-のソースコードと起動用のスクリプト\" class=\"fragment\"></span><a href=\"#worker-%E3%81%AE%E3%82%BD%E3%83%BC%E3%82%B9%E3%82%B3%E3%83%BC%E3%83%89%E3%81%A8%E8%B5%B7%E5%8B%95%E7%94%A8%E3%81%AE%E3%82%B9%E3%82%AF%E3%83%AA%E3%83%97%E3%83%88\"><i class=\"fa fa-link\"></i></a>Worker のソースコードと起動用のスクリプト</h2>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">lib/worker/lookup_worker.rb</span></div>\n<div class=\"highlight\"><pre><span class=\"nb\">require</span> <span class=\"s1\">'sidekiq'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LookupWorker</span>\n  <span class=\"kp\">include</span> <span class=\"no\">Sidekiq</span><span class=\"o\">::</span><span class=\"no\">Worker</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">perform</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nb\">puts</span> <span class=\"s2\">\"LookupWorker#perform fired with arguments </span><span class=\"si\">#{</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:inspect</span><span class=\"p\">).</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">', '</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n    <span class=\"nb\">exec</span><span class=\"p\">(</span><span class=\"s2\">\"ls -al\"</span><span class=\"p\">)</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">sidekiq_script.rb</span></div>\n<div class=\"highlight\"><pre><span class=\"p\">(</span><span class=\"vg\">$LOAD_PATH</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s1\">'.'</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s1\">'lib'</span> <span class=\"o\">&lt;&lt;</span> <span class=\"s1\">'lib/workers'</span><span class=\"p\">).</span><span class=\"nf\">uniq!</span>\n<span class=\"nb\">require</span> <span class=\"s1\">'lookup_worker'</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"症状\" class=\"fragment\"></span><a href=\"#%E7%97%87%E7%8A%B6\"><i class=\"fa fa-link\"></i></a>症状</h2>\n\n<div class=\"code-frame\" data-lang=\"bash\"><div class=\"highlight\"><pre><span class=\"nv\">$ </span>bundle <span class=\"nb\">exec </span>sidekiq <span class=\"nt\">-L</span> log/sidekiq.log <span class=\"nt\">-r</span> ./sidekiq_script.rb\n</pre></div></div>\n\n<p>で起動した後、irbからキューにメッセージを登録するとWorkerの処理をした後にsidekiqが勝手に終了する。別ターミナルから以下の操作</p>\n\n<div class=\"code-frame\" data-lang=\"irb\"><div class=\"highlight\"><pre><span class=\"go\">LookupWorker.perform_async(\"hoge\")\n</span></pre></div></div>\n\n<p>sidekiqを起動したターミナルでは <code>ls -al</code> の結果を出力して sidekiq が終了。。。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>LookupWorker#perform fired with arguments \"hoge\"\ntotal 32\ndrwxr-xr-x  12 makito  staff  408  3 24 15:03 .\ndrwxr-xr-x  11 makito  staff  374  3 23 17:39 ..\ndrwxr-xr-x   3 makito  staff  102  3 23 17:37 .bundle\n-rw-r--r--   1 makito  staff  155  3 24 15:03 Gemfile\n-rw-r--r--   1 makito  staff  404  3 23 17:37 Gemfile.lock\ndrwxr-xr-x   3 makito  staff  102  3 24 07:29 bin\ndrwxr-xr-x   3 makito  staff  102  3 24 07:34 config\ndrwxr-xr-x   3 makito  staff  102  3 24 08:00 lib\ndrwxr-xr-x   3 makito  staff  102  3 24 07:13 log\n-rw-r--r--   1 makito  staff  531  3 24 07:11 por.rb\n-rw-r--r--   1 makito  staff   76  3 24 08:00 sidekiq_script.rb\ndrwxr-xr-x   3 makito  staff  102  3 23 17:37 vendor\n$ \n</pre></div></div>\n\n<h2>\n<span id=\"解決方法\" class=\"fragment\"></span><a href=\"#%E8%A7%A3%E6%B1%BA%E6%96%B9%E6%B3%95\"><i class=\"fa fa-link\"></i></a>解決方法</h2>\n\n<p>本家のissueに同じ問い合わせがあった <a href=\"https://github.com/mperham/sidekiq/issues/2946\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/mperham/sidekiq/issues/2946</a></p>\n\n<p><code>exec</code> 使わず <code>system</code> や <code>Open3.capture3</code> 等を使うと回避できる <img alt=\":smile:\" class=\"emoji\" height=\"20\" src=\"https://cdn.qiita.com/emoji/twemoji/unicode/1f604.png\" title=\":smile:\" width=\"20\"> </p>\n\n<div class=\"code-frame\" data-lang=\"ruby\">\n<div class=\"code-lang\"><span class=\"bold\">lib/worker/lookup_worker.rb</span></div>\n<div class=\"highlight\"><pre><span class=\"nb\">require</span> <span class=\"s1\">'sidekiq'</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">LookupWorker</span>\n  <span class=\"kp\">include</span> <span class=\"no\">Sidekiq</span><span class=\"o\">::</span><span class=\"no\">Worker</span>\n\n  <span class=\"k\">def</span> <span class=\"nf\">perform</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">)</span>\n    <span class=\"nb\">puts</span> <span class=\"s2\">\"LookupWorker#perform fired with arguments </span><span class=\"si\">#{</span><span class=\"n\">args</span><span class=\"p\">.</span><span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"o\">&amp;</span><span class=\"ss\">:inspect</span><span class=\"p\">).</span><span class=\"nf\">join</span><span class=\"p\">(</span><span class=\"s1\">', '</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n    <span class=\"n\">o</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">,</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"no\">Open3</span><span class=\"p\">.</span><span class=\"nf\">capture3</span><span class=\"p\">(</span><span class=\"s2\">\"ffmpeg -version\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">p</span> <span class=\"n\">o</span>\n  <span class=\"k\">end</span>\n<span class=\"k\">end</span>\n</pre></div>\n</div>\n",
        "body": "# この記事について\nsidekiqをrails無しの環境で使うための確認作業中の出来事をメモする程度の記事。今回はworker内でexecを使うとsidekiqが終了したのでその件をメモ :pencil: \n\n## 結論\nWorker内で `exec` 使わずに `system`, `Open3.capture3` 等を使用する :smile: \n\n# 現象\n## 前提\n* MacOS\n* sidekiq version = 5.1.1\n* redis version = 4.0.8\n\nスタンドアロンの動作試験のため全てターミナル上で動作検証している\n\n## Worker のソースコードと起動用のスクリプト\n\n```lib/worker/lookup_worker.rb\nrequire 'sidekiq'\n\nclass LookupWorker\n  include Sidekiq::Worker\n\n  def perform(*args)\n    puts \"LookupWorker#perform fired with arguments #{args.map(&:inspect).join(', ')}\"\n    exec(\"ls -al\")\n  end\nend\n```\n\n```sidekiq_script.rb\n($LOAD_PATH << '.' << 'lib' << 'lib/workers').uniq!\nrequire 'lookup_worker'\n```\n\n## 症状\n\n```bash\n$ bundle exec sidekiq -L log/sidekiq.log -r ./sidekiq_script.rb\n```\n\nで起動した後、irbからキューにメッセージを登録するとWorkerの処理をした後にsidekiqが勝手に終了する。別ターミナルから以下の操作\n\n```irb\nLookupWorker.perform_async(\"hoge\")\n```\n\nsidekiqを起動したターミナルでは `ls -al` の結果を出力して sidekiq が終了。。。\n\n```\nLookupWorker#perform fired with arguments \"hoge\"\ntotal 32\ndrwxr-xr-x  12 makito  staff  408  3 24 15:03 .\ndrwxr-xr-x  11 makito  staff  374  3 23 17:39 ..\ndrwxr-xr-x   3 makito  staff  102  3 23 17:37 .bundle\n-rw-r--r--   1 makito  staff  155  3 24 15:03 Gemfile\n-rw-r--r--   1 makito  staff  404  3 23 17:37 Gemfile.lock\ndrwxr-xr-x   3 makito  staff  102  3 24 07:29 bin\ndrwxr-xr-x   3 makito  staff  102  3 24 07:34 config\ndrwxr-xr-x   3 makito  staff  102  3 24 08:00 lib\ndrwxr-xr-x   3 makito  staff  102  3 24 07:13 log\n-rw-r--r--   1 makito  staff  531  3 24 07:11 por.rb\n-rw-r--r--   1 makito  staff   76  3 24 08:00 sidekiq_script.rb\ndrwxr-xr-x   3 makito  staff  102  3 23 17:37 vendor\n$ \n```\n\n## 解決方法\n本家のissueに同じ問い合わせがあった https://github.com/mperham/sidekiq/issues/2946\n\n`exec` 使わず `system` や `Open3.capture3` 等を使うと回避できる :smile: \n\n```lib/worker/lookup_worker.rb\nrequire 'sidekiq'\n\nclass LookupWorker\n  include Sidekiq::Worker\n\n  def perform(*args)\n    puts \"LookupWorker#perform fired with arguments #{args.map(&:inspect).join(', ')}\"\n    o, e, s = Open3.capture3(\"ffmpeg -version\")\n    p o\n  end\nend\n```\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:19:25+09:00",
        "group": null,
        "id": "90671038ca7e3b609b4e",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Ruby",
                "versions": []
            },
            {
                "name": "sidekiq",
                "versions": []
            }
        ],
        "title": "sidekiqのworker内でexec使うとsidekiqが終了しちゃうからsystemとかOpen3.capture3とかを使おうという話",
        "updated_at": "2018-03-24T15:19:25+09:00",
        "url": "https://qiita.com/makito/items/90671038ca7e3b609b4e",
        "user": {
            "description": "Akito M / あっきー akkiii / 放浪中 / Redshift / Java / Javascript / Ruby / Android",
            "facebook_id": "",
            "followees_count": 3,
            "followers_count": 16,
            "github_login_name": null,
            "id": "makito",
            "items_count": 23,
            "linkedin_id": "",
            "location": "日本",
            "name": "",
            "organization": "無所属",
            "permanent_id": 75068,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/75068/profile-images/1473700049",
            "twitter_screen_name": null,
            "website_url": ""
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h2>\n<span id=\"経緯概要\" class=\"fragment\"></span><a href=\"#%E7%B5%8C%E7%B7%AF%E6%A6%82%E8%A6%81\"><i class=\"fa fa-link\"></i></a>経緯・概要</h2>\n\n<p>職場のとある案件で新規プロジェクトを作成する機会があった。<br>\nプロジェクトは、新規gitリポジトリで管理することとなっており、<br>\nリポジトリ作成は運用上の都合により別チームの方が後から作成することとなっていたので、git管理外でローカルでプロジェクトを作成し開発を進めていた。</p>\n\n<p>いざ、作成された空のgitリポジトリに、開発したプロジェクトを入れようと思った時にいろいろ手間取ったので記録を残しておく。</p>\n\n<h2>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h2>\n\n<p>・SpringToolSuite [Version: 3.9.2.RELEASE]<br>\n・SourceTree [Version: 2.4.8.0]<br>\n・GitHub</p>\n\n<h2>\n<span id=\"ゴール\" class=\"fragment\"></span><a href=\"#%E3%82%B4%E3%83%BC%E3%83%AB\"><i class=\"fa fa-link\"></i></a>ゴール</h2>\n\n<p>以下の2通りを試しましたので、それぞれの手順を記載します。</p>\n\n<p>①リポジトリの配下にプロジェクト<br>\nプロジェクト「test-project1」とプロジェクト「test-project2」がリポジトリ配下に存在する<br>\n<a href=\"https://camo.qiitausercontent.com/a57e4bb636d1392f732b03771987d6abfeed1396/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f36626332356438352d336439302d323934372d396437302d3432363764393866636139632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a57e4bb636d1392f732b03771987d6abfeed1396/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f36626332356438352d336439302d323934372d396437302d3432363764393866636139632e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/6bc25d85-3d90-2947-9d70-4267d98fca9c.png\"></a></p>\n\n<p>②リポジトリ＝プロジェクト<br>\nリポジトリがプロジェクトのルートディレクトリになっている感じです。<br>\n<a href=\"https://camo.qiitausercontent.com/183f74cbe2a19a327a09ef9a8468b4342ce7e9d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f38336166313933332d336132652d353564372d313831652d3938663230666263376231662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/183f74cbe2a19a327a09ef9a8468b4342ce7e9d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f38336166313933332d336132652d353564372d313831652d3938663230666263376231662e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/83af1933-3a2e-55d7-181e-98f20fbc7b1f.png\"></a></p>\n\n<h2>\n<span id=\"共通手順\" class=\"fragment\"></span><a href=\"#%E5%85%B1%E9%80%9A%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>共通手順</h2>\n\n<p>ミスったときのために対象プロジェクトをzip等でコピって退避しておく</p>\n\n<p>０．空のリポジトリ（READMEあるけど）がある【GitHub】<br>\n<a href=\"https://camo.qiitausercontent.com/ee9c727dd8f384bae3e6bdd37b7c020e482483d6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f38633764653938642d643131642d333066342d393938312d3361333039616264623163312e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/ee9c727dd8f384bae3e6bdd37b7c020e482483d6/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f38633764653938642d643131642d333066342d393938312d3361333039616264623163312e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/8c7de98d-d11d-30f4-9981-3a309abdb1c1.png\"></a></p>\n\n<h2>\n<span id=\"手順リポジトリの配下にプロジェクト\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E9%85%8D%E4%B8%8B%E3%81%AB%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\"><i class=\"fa fa-link\"></i></a>手順（①リポジトリの配下にプロジェクト）</h2>\n\n<p>１．リポジトリをクローンしてくる【SourceTree】<br>\n　　※必要に応じてブランチを切り替えること<br>\n<a href=\"https://camo.qiitausercontent.com/544a8a971b92535e0505fa908109f26450990dd4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f65383766633834302d346531312d633939642d626332392d3634306538346663383333612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/544a8a971b92535e0505fa908109f26450990dd4/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f65383766633834302d346531312d633939642d626332392d3634306538346663383333612e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/e87fc840-4e11-c99d-bc29-640e84fc833a.png\"></a></p>\n\n<p>２．「Add an existing local Git repository」でリポジトリを追加【STS】<br>\n<a href=\"https://camo.qiitausercontent.com/c40b04bd9de98fe9e205ff060ac4cdef7013d367/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f63326238616339362d363632642d336164642d343764342d3963626130623563636434382e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/c40b04bd9de98fe9e205ff060ac4cdef7013d367/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f63326238616339362d363632642d336164642d343764342d3963626130623563636434382e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/c2b8ac96-662d-3add-47d4-9cba0b5ccd48.png\"></a></p>\n\n<p><a href=\"https://camo.qiitausercontent.com/4d783ae20f1fd983209eed7ea06084839976778e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f65383863393234342d303365642d373166352d623138622d3337633561356530663366342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4d783ae20f1fd983209eed7ea06084839976778e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f65383863393234342d303365642d373166352d623138622d3337633561356530663366342e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/e88c9244-03ed-71f5-b18b-37c5a5e0f3f4.png\"></a></p>\n\n<p>３．追加対象のプロジェクトを 右クリック&gt;Team&gt;Shere Project【STS】<br>\n<a href=\"https://camo.qiitausercontent.com/e2c6e39da7071d11929c0f28be2ff31ff590d5c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f31366333636235612d616464352d326563652d613532352d6233653161396232376365612e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/e2c6e39da7071d11929c0f28be2ff31ff590d5c5/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f31366333636235612d616464352d326563652d613532352d6233653161396232376365612e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/16c3cb5a-add5-2ece-a525-b3e1a9b27cea.png\"></a></p>\n\n<p>[リポジトリ名]がつきました<br>\n<a href=\"https://camo.qiitausercontent.com/255065f1b92b0eeb098e88a6e4bd2fd4d334c638/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f63653336326561392d643832362d353233652d366465342d3634633336343530326530652e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/255065f1b92b0eeb098e88a6e4bd2fd4d334c638/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f63653336326561392d643832362d353233652d366465342d3634633336343530326530652e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/ce362ea9-d826-523e-6de4-64c364502e0e.png\"></a></p>\n\n<p>リポジトリのディレクトリを見てみると入ってるのがわかります<br>\n<a href=\"https://camo.qiitausercontent.com/cc168e7fd6d3dee429b6d489e7bcb52f166895a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f34333039613465372d393930632d313563622d356337362d6536313431333461393566332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/cc168e7fd6d3dee429b6d489e7bcb52f166895a3/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f34333039613465372d393930632d313563622d356337362d6536313431333461393566332e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/4309a4e7-990c-15cb-5c76-e614134a95f3.png\"></a></p>\n\n<p>４．プロジェクトのコミットとプッシュ【SourceTree】<br>\n　手順３でリポジトリ配下に移動されたので作業コピーに表示されています。<br>\n　ステージングしてコミット、プッシュしましょう。<br>\n<a href=\"https://camo.qiitausercontent.com/9377702a3807f36e68aa9b569f406e9bbde9703e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f30306533373864652d343637342d376137302d356232352d3433386534366238623265622e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/9377702a3807f36e68aa9b569f406e9bbde9703e/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f30306533373864652d343637342d376137302d356232352d3433386534366238623265622e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/00e378de-4674-7a70-5b25-438e46b8b2eb.png\"></a><br>\n　★デフォルト？だと「.gitignore」の除外設定に「.project」が入っているので、「.project」がコミット対象になりません。必要に応じて除外設定を修正してください。※これがないと追加したプロジェクトがプロジェクトとして扱われません。</p>\n\n<p>５．おわり<br>\ngithubでみるとプロジェクトが配下に入ってることが確認できます。<br>\n<a href=\"https://camo.qiitausercontent.com/4b759ee049e9344bc0f8e92816f2e42a58ea31cb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f35313662343432392d323765392d616239352d323363392d3463613835313235373065322e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/4b759ee049e9344bc0f8e92816f2e42a58ea31cb/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f35313662343432392d323765392d616239352d323363392d3463613835313235373065322e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/516b4429-27e9-ab95-23c9-4ca8512570e2.png\"></a></p>\n\n<p>複数のプロジェクトを１つのリポジトリにぶら下げる時は同様の手順で追加すればよさそうです。</p>\n\n<h2>\n<span id=\"手順リポジトリプロジェクト\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88\"><i class=\"fa fa-link\"></i></a>手順（②リポジトリ＝プロジェクト）</h2>\n\n<p>１．対象プロジェクトをgit管理（ローカルリポジトリ）にします。【SourceTree】<br>\n　SourceTreeからターミナルを起動して、<br>\n　対象プロジェクトのルートディレクトリに移動し「git init」と叩きます。<br>\n<a href=\"https://camo.qiitausercontent.com/fa8a746132c69df131d2b9434419d18ace767dbd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f35343561326537392d333632372d393265322d343137622d6561373365303262616362632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/fa8a746132c69df131d2b9434419d18ace767dbd/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f35343561326537392d333632372d393265322d343137622d6561373365303262616362632e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/545a2e79-3627-92e2-417b-ea73e02bacbc.png\"></a></p>\n\n<p>２．SourceTreeに、git管理（ローカルリポジトリ）にしたプロジェクトを追加します。<br>\n<a href=\"https://camo.qiitausercontent.com/64d2afea3b88c4fab721aa2d9027ab44971bfc91/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f66333634313963642d616338312d346638352d663638382d6337383738626139623964632e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/64d2afea3b88c4fab721aa2d9027ab44971bfc91/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f66333634313963642d616338312d346638352d663638382d6337383738626139623964632e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/f36419cd-ac81-4f85-f688-c7878ba9b9dc.png\"></a></p>\n\n<p>３．ローカルリポジトリにプロジェクトをコミットします。<br>\n　プッシュはしません。（この時点では紐付いているリモートがないです）<br>\n　※「.gitignore」の除外設定を必要に応じて修正してください。<br>\n<a href=\"https://camo.qiitausercontent.com/251920adc2b80ac06eae73015759c3361ed6975a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f34376636383465302d323831622d643665352d366162322d3464386637346538366433352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/251920adc2b80ac06eae73015759c3361ed6975a/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f34376636383465302d323831622d643665352d366162322d3464386637346538366433352e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/47f684e0-281b-d6e5-6ab2-4d8f74e86d35.png\"></a></p>\n\n<p>４．ローカルリポジトリにしたプロジェクトを、リモートリポジトリに紐付けます。<br>\n　設定を押下<br>\n<a href=\"https://camo.qiitausercontent.com/6c92a9391efafa36be8057ba309f5f207d7e5202/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f30393663373062622d656230632d376564622d653761312d6461643632313030616364342e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/6c92a9391efafa36be8057ba309f5f207d7e5202/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f30393663373062622d656230632d376564622d653761312d6461643632313030616364342e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/096c70bb-eb0c-7edb-e7a1-dad62100acd4.png\"></a><br>\n　リモートタブで「追加」を押下<br>\n<a href=\"https://camo.qiitausercontent.com/79a5fc5fa319dee3abb27b3590278c0ac660314f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f31666233353930632d633161622d383662622d336265622d6536386266653164376564332e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/79a5fc5fa319dee3abb27b3590278c0ac660314f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f31666233353930632d633161622d383662622d336265622d6536386266653164376564332e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/1fb3590c-c1ab-86bb-3beb-e68bfe1d7ed3.png\"></a><br>\n　リモートリポジトリの情報を入れます。<br>\n<a href=\"https://camo.qiitausercontent.com/a041907b1a0eb18f027beabe3ea6536a65865235/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f38373661323239392d653361322d396138372d663136632d3564366131623735373765662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/a041907b1a0eb18f027beabe3ea6536a65865235/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f38373661323239392d653361322d396138372d663136632d3564366131623735373765662e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/876a2299-e3a2-9a87-f16c-5d6a1b7577ef.png\"></a><br>\n　追加されました。<br>\n<a href=\"https://camo.qiitausercontent.com/2b63a56a63cb4db1e55fb4cb1d04eff5b5fee27f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f63616333653336662d666238622d626162362d343931302d3962313061336538333835352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/2b63a56a63cb4db1e55fb4cb1d04eff5b5fee27f/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f63616333653336662d666238622d626162362d343931302d3962313061336538333835352e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/cac3e36f-fb8b-bab6-4910-9b10a3e83855.png\"></a></p>\n\n<p>５．紐付けたリモートリポジトリにプッシュします。<br>\n　プッシュ先を紐付けたリモートリポジトリにして、<br>\n　リモートブランチを任意のリモートブランチにします。<br>\n<a href=\"https://camo.qiitausercontent.com/fb4a0a3a3908f0e8f0670f1430840962222c81df/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f35336230663465632d356462342d653336632d626136302d3234376630303165343633352e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/fb4a0a3a3908f0e8f0670f1430840962222c81df/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f35336230663465632d356462342d653336632d626136302d3234376630303165343633352e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/53b0f4ec-5db4-e36c-ba60-247f001e4635.png\"></a></p>\n\n<p>６．おわり<br>\ngithubでみるとリポジトリがプロジェクトの内容になっていることがわかります。<br>\n※gitignoreいじり忘れました<br>\n<a href=\"https://camo.qiitausercontent.com/183f74cbe2a19a327a09ef9a8468b4342ce7e9d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f38336166313933332d336132652d353564372d313831652d3938663230666263376231662e706e67\" target=\"_blank\" rel=\"nofollow noopener\"><img src=\"https://camo.qiitausercontent.com/183f74cbe2a19a327a09ef9a8468b4342ce7e9d9/68747470733a2f2f71696974612d696d6167652d73746f72652e73332e616d617a6f6e6177732e636f6d2f302f3234343834312f38336166313933332d336132652d353564372d313831652d3938663230666263376231662e706e67\" alt=\"image.png\" data-canonical-src=\"https://qiita-image-store.s3.amazonaws.com/0/244841/83af1933-3a2e-55d7-181e-98f20fbc7b1f.png\"></a></p>\n\n<h2>\n<span id=\"あとがき\" class=\"fragment\"></span><a href=\"#%E3%81%82%E3%81%A8%E3%81%8C%E3%81%8D\"><i class=\"fa fa-link\"></i></a>あとがき</h2>\n\n<p>7年くらいSEやっててこんなことで躓くとは恥ずかしい・・・。<br>\nでも、こういうことした経験が今までなかったのも事実。<br>\nいままでは既存リポジトリやプロジェクトが存在するところから、それに対して改修するってパターンが多かったので。。<br>\nよい経験となった。</p>\n",
        "body": "##経緯・概要\n職場のとある案件で新規プロジェクトを作成する機会があった。\nプロジェクトは、新規gitリポジトリで管理することとなっており、\nリポジトリ作成は運用上の都合により別チームの方が後から作成することとなっていたので、git管理外でローカルでプロジェクトを作成し開発を進めていた。\n\nいざ、作成された空のgitリポジトリに、開発したプロジェクトを入れようと思った時にいろいろ手間取ったので記録を残しておく。\n\n##環境\n・SpringToolSuite [Version: 3.9.2.RELEASE]\n・SourceTree [Version: 2.4.8.0]\n・GitHub\n\n##ゴール\n以下の2通りを試しましたので、それぞれの手順を記載します。\n\n①リポジトリの配下にプロジェクト\nプロジェクト「test-project1」とプロジェクト「test-project2」がリポジトリ配下に存在する\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/6bc25d85-3d90-2947-9d70-4267d98fca9c.png)\n\n\n②リポジトリ＝プロジェクト\nリポジトリがプロジェクトのルートディレクトリになっている感じです。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/83af1933-3a2e-55d7-181e-98f20fbc7b1f.png)\n\n\n##共通手順\nミスったときのために対象プロジェクトをzip等でコピって退避しておく\n\n０．空のリポジトリ（READMEあるけど）がある【GitHub】\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/8c7de98d-d11d-30f4-9981-3a309abdb1c1.png)\n\n\n##手順（①リポジトリの配下にプロジェクト）\n１．リポジトリをクローンしてくる【SourceTree】\n　　※必要に応じてブランチを切り替えること\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/e87fc840-4e11-c99d-bc29-640e84fc833a.png)\n\n２．「Add an existing local Git repository」でリポジトリを追加【STS】\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/c2b8ac96-662d-3add-47d4-9cba0b5ccd48.png)\n\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/e88c9244-03ed-71f5-b18b-37c5a5e0f3f4.png)\n\n３．追加対象のプロジェクトを 右クリック>Team>Shere Project【STS】\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/16c3cb5a-add5-2ece-a525-b3e1a9b27cea.png)\n\n[リポジトリ名]がつきました\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/ce362ea9-d826-523e-6de4-64c364502e0e.png)\n\nリポジトリのディレクトリを見てみると入ってるのがわかります\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/4309a4e7-990c-15cb-5c76-e614134a95f3.png)\n\n４．プロジェクトのコミットとプッシュ【SourceTree】\n　手順３でリポジトリ配下に移動されたので作業コピーに表示されています。\n　ステージングしてコミット、プッシュしましょう。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/00e378de-4674-7a70-5b25-438e46b8b2eb.png)\n　★デフォルト？だと「.gitignore」の除外設定に「.project」が入っているので、「.project」がコミット対象になりません。必要に応じて除外設定を修正してください。※これがないと追加したプロジェクトがプロジェクトとして扱われません。\n\n５．おわり\ngithubでみるとプロジェクトが配下に入ってることが確認できます。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/516b4429-27e9-ab95-23c9-4ca8512570e2.png)\n\n複数のプロジェクトを１つのリポジトリにぶら下げる時は同様の手順で追加すればよさそうです。\n\n\n##手順（②リポジトリ＝プロジェクト）\n１．対象プロジェクトをgit管理（ローカルリポジトリ）にします。【SourceTree】\n　SourceTreeからターミナルを起動して、\n　対象プロジェクトのルートディレクトリに移動し「git init」と叩きます。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/545a2e79-3627-92e2-417b-ea73e02bacbc.png)\n\n２．SourceTreeに、git管理（ローカルリポジトリ）にしたプロジェクトを追加します。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/f36419cd-ac81-4f85-f688-c7878ba9b9dc.png)\n\n３．ローカルリポジトリにプロジェクトをコミットします。\n　プッシュはしません。（この時点では紐付いているリモートがないです）\n　※「.gitignore」の除外設定を必要に応じて修正してください。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/47f684e0-281b-d6e5-6ab2-4d8f74e86d35.png)\n\n\n４．ローカルリポジトリにしたプロジェクトを、リモートリポジトリに紐付けます。\n　設定を押下\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/096c70bb-eb0c-7edb-e7a1-dad62100acd4.png)\n　リモートタブで「追加」を押下\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/1fb3590c-c1ab-86bb-3beb-e68bfe1d7ed3.png)\n　リモートリポジトリの情報を入れます。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/876a2299-e3a2-9a87-f16c-5d6a1b7577ef.png)\n　追加されました。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/cac3e36f-fb8b-bab6-4910-9b10a3e83855.png)\n\n５．紐付けたリモートリポジトリにプッシュします。\n　プッシュ先を紐付けたリモートリポジトリにして、\n　リモートブランチを任意のリモートブランチにします。\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/53b0f4ec-5db4-e36c-ba60-247f001e4635.png)\n\n６．おわり\ngithubでみるとリポジトリがプロジェクトの内容になっていることがわかります。\n※gitignoreいじり忘れました\n![image.png](https://qiita-image-store.s3.amazonaws.com/0/244841/83af1933-3a2e-55d7-181e-98f20fbc7b1f.png)\n\n\n##あとがき\n7年くらいSEやっててこんなことで躓くとは恥ずかしい・・・。\nでも、こういうことした経験が今までなかったのも事実。\nいままでは既存リポジトリやプロジェクトが存在するところから、それに対して改修するってパターンが多かったので。。\nよい経験となった。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:09:58+09:00",
        "group": null,
        "id": "2dfe52d5d124f3882aba",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Git",
                "versions": []
            },
            {
                "name": "SourceTree",
                "versions": []
            },
            {
                "name": "SpringToolsSuites",
                "versions": []
            }
        ],
        "title": "git管理していないプロジェクトを既存gitリポジトリに紐付ける",
        "updated_at": "2018-03-24T15:09:58+09:00",
        "url": "https://qiita.com/TOILET_PAPER/items/2dfe52d5d124f3882aba",
        "user": {
            "description": "光の戦士やってます。副業はWEBエンジニアです。\r\n趣味：サバゲー,スキー,釣り,カメラ,ネトゲ,オフゲ,アニメ全般",
            "facebook_id": "",
            "followees_count": 0,
            "followers_count": 0,
            "github_login_name": null,
            "id": "TOILET_PAPER",
            "items_count": 1,
            "linkedin_id": "",
            "location": "Chiba, Japan",
            "name": "",
            "organization": "",
            "permanent_id": 244841,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/244841/profile-images/1521605169",
            "twitter_screen_name": null,
            "website_url": ""
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p>タイトルの通り。<br>\nfacebook社による機械学習ライブラリであるprophetを使う環境を構築するのに何故だか手こずってしまったので、Dockerfileを書いてみました。</p>\n\n<div class=\"code-frame\" data-lang=\"dockerfile\"><div class=\"highlight\"><pre><span class=\"k\">FROM</span><span class=\"s\"> ubuntu:16.04</span>\n\n<span class=\"k\">RUN </span>apt-get <span class=\"nt\">-y</span> update\n<span class=\"k\">RUN </span>apt-get <span class=\"nt\">-y</span> <span class=\"nb\">install </span>python3\n<span class=\"k\">RUN </span>apt-get <span class=\"nt\">-y</span> <span class=\"nb\">install </span>python3-pip\n<span class=\"k\">RUN </span>pip3 <span class=\"nb\">install</span> <span class=\"nt\">--upgrade</span> pip\n<span class=\"k\">RUN </span>pip3 <span class=\"nb\">install </span>pystan\n<span class=\"k\">RUN </span>pip3 <span class=\"nb\">install </span>fbprophet\n\n</pre></div></div>\n\n<p>それだけ。</p>\n\n<p>なお、Prophetについてはこちらを参照してください。<br>\n<a href=\"https://facebook.github.io/prophet/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://facebook.github.io/prophet/</a></p>\n\n<p>また、Dockerそのもののインストール手順については、たまに変わっていたりするのでQiitaの記事よりも公式サイトを見たほうがいいと思います。ちゃんとかいてあるし。<br>\n<a href=\"https://docs.docker.com/install/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.docker.com/install/</a></p>\n",
        "body": "タイトルの通り。\nfacebook社による機械学習ライブラリであるprophetを使う環境を構築するのに何故だか手こずってしまったので、Dockerfileを書いてみました。\n\n```dockerfile\nFROM ubuntu:16.04\n\nRUN apt-get -y update\nRUN apt-get -y install python3\nRUN apt-get -y install python3-pip\nRUN pip3 install --upgrade pip\nRUN pip3 install pystan\nRUN pip3 install fbprophet\n\n```\n\nそれだけ。\n\nなお、Prophetについてはこちらを参照してください。\nhttps://facebook.github.io/prophet/\n\nまた、Dockerそのもののインストール手順については、たまに変わっていたりするのでQiitaの記事よりも公式サイトを見たほうがいいと思います。ちゃんとかいてあるし。\nhttps://docs.docker.com/install/\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:09:12+09:00",
        "group": null,
        "id": "4ee2927cee73c63f8dbf",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "Python",
                "versions": []
            },
            {
                "name": "docker",
                "versions": []
            },
            {
                "name": "prophet",
                "versions": []
            }
        ],
        "title": "Prophetを動かす環境を作るためのDockerfile",
        "updated_at": "2018-03-24T15:09:12+09:00",
        "url": "https://qiita.com/zurustar/items/4ee2927cee73c63f8dbf",
        "user": {
            "description": null,
            "facebook_id": null,
            "followees_count": 2,
            "followers_count": 0,
            "github_login_name": "zurustar",
            "id": "zurustar",
            "items_count": 4,
            "linkedin_id": null,
            "location": null,
            "name": "",
            "organization": null,
            "permanent_id": 133166,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/133166/profile-images/1494342755",
            "twitter_screen_name": null,
            "website_url": null
        },
        "page_views_count": null
    },
    {
        "rendered_body": "<p>process は、プログラム間の time share, failure isolation, interaction を提供する. interaction は file descriptor 経由で行われる (pipe)<br>\nkernel は pipe の片側が落ちたらそいつの代わりに eof を送るとか、世話をしてる</p>\n\n<p>x86 依存の実装もある:<br>\nuser mode のプログラムが kernel mode priviledged instruction を実行しようとしたら、kernel mode の handler に処理をわたし、clean up してそのプロセスを終了<br>\nsystem call: プロセッサが、priviledge level を上げ、kernel によってセットされた entry point に処理を渡す</p>\n\n<p>xv6 は monolithic kernel.</p>\n\n<p>process の実装に使われるメカニズム:</p>\n\n<ul>\n<li>user/kernel mode flag</li>\n<li>address 空間</li>\n<li>time slicing (コンテキストスイッチ)</li>\n</ul>\n\n<p>各プロセスがあたかもそれ専用のマシンで動いているかのような幻想(自分だけのCPU, アドレス空間)を提供する</p>\n\n<p>アドレス空間は、プロセスごとの page table (or <code>maps</code>): virtual addr -&gt; phys addr により実装. high address (&gt;= 0x80000000 = KERNBASE = 2GB)には kernel 用のメモリが置かれる。</p>\n\n<p>(high address を上に書いている)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>-------------------- &lt;- 0xFFFFFFFF |\n| kern memory      |               |\n--------------------               |\n| kern text &amp; data |               |  kernel 用\n-------------------- &lt;- 0x80100000 |\n| BIOS             |               |\n-------------------- &lt;- 0x80000000 |\n| heap             |\n--------------------\n| stack            |\n--------------------\n| user text &amp; data |\n-------------------- &lt;- 0x0\n</pre></div></div>\n\n<p>kernel を同じアドレス空間にマップしているのは、system call のときに 単に entry point に飛べ、また kernel が user のメモリを読めるように。</p>\n\n<h2>\n<span id=\"process\" class=\"fragment\"></span><a href=\"#process\"><i class=\"fa fa-link\"></i></a>Process</h2>\n\n<p>process の状態は、struct proc <code>p</code> により表される</p>\n\n<ul>\n<li>page table - <code>p-&gt;pgdir</code>\n</li>\n<li>kernel stack - <code>p-&gt;kstack</code> (kernel stack のlowest address)</li>\n<li>run state - <code>p-&gt;state</code>\n\n<ul>\n<li>allocated (EMBRYO)</li>\n<li>ready to run</li>\n<li>running</li>\n<li>waiting I/O - kernel のデバイス待ち</li>\n<li>exiting</li>\n</ul>\n</li>\n</ul>\n\n<p>kernel stack は実装的には、プロセスごとに kalloc で1ページ割り当てられる</p>\n\n<h2>\n<span id=\"initial-process\" class=\"fragment\"></span><a href=\"#initial-process\"><i class=\"fa fa-link\"></i></a>Initial process</h2>\n\n<p>順をおってみていく</p>\n\n<ul>\n<li>boot loader</li>\n<li>\n<code>entry</code> に飛ぶ. ここではページングをセットアップ\n\n<ul>\n<li>まだ仮想アドレスはないので、lower address (0x100000 = 1MB) にカーネルを置く\n\n<ul>\n<li>ちなみに 0x0 - 0x100000 は memory mapped I/O に使われている</li>\n</ul>\n</li>\n<li>page table を設定\n\n<ul>\n<li>0:4M -&gt; 0:4M</li>\n<li>KERNBASE:KERNBASE+4M -&gt; 0:4M</li>\n</ul>\n</li>\n<li>%cr3 &lt;- page table の physical address</li>\n<li>%cr0 &lt;- CP0_PG (paging を有効化)</li>\n<li>%esp を high address におき、high address version の main に飛ぶ (long jump)</li>\n</ul>\n</li>\n<li>\n<code>main</code>. 最初のプロセスを作る\n\n<ul>\n<li>色々なサブシステム（e.g. file system）をセットアップ</li>\n<li>\n<code>userinit</code>\n\n<ul>\n<li>最初のプロセス initproc が普通のプロセスのように動くよう下準備\n\n<ul>\n<li>上の図っぽくなるようにセットアップ (Chapter 2,3)</li>\n<li>initcode.S を 0 に貼り付け</li>\n<li>trap frame (user 空間にもどるときに restore されるやつ) をセットアップ</li>\n<li>%cs をセット -&gt; レベル3 のユーザプロセスは PTE_U bit のないページや、%cr3 などの重要なレジスタにアクセスできなくなる。</li>\n</ul>\n</li>\n<li>\n<code>allocproc</code>\n\n<ul>\n<li>これは、fork() でも(ようするにすべてのプロセスに対して)呼ばれる</li>\n<li>process table に struct proc を割り当てる\n\n<ol>\n<li>一番最初の UNUSED な slot を見つける</li>\n<li>state を EMBRYO にして pid を割り当て</li>\n<li>kernel stack を確保し割り当て (失敗したら手順を rollback)</li>\n</ol>\n</li>\n<li>その slot が実行可能なように状態をセットアップする ... (*)</li>\n<li>state を RUNNABLE にする</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>(*) の詳細<br>\nkernel stack を以下のようにする (high address が上。stack は下に伸びる)</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>--------------------\n| trap frame       |  (割り込み時の process の context)\n|                  |  eip は init process では 0 (forkedならforkの次)\n-------------------- &lt;- p-&gt;tf\n| `&amp;trapret`       |\n-------------------- &lt;- end of p-&gt;context\n| eip = `&amp;forkret` |\n--------------------\n| ...              |\n--------------------\n| edi              |\n-------------------- &lt;- p-&gt;context\n| (empty)          |\n-------------------- &lt;- p-&gt;kstack\n</pre></div></div>\n\n<ol>\n<li>\n<code>swich</code> (コンテキストスイッチ) により、p-&gt;context が restore され、それにより forkret に飛ぶ</li>\n<li>forkret からの ret で、trapret に飛ぶ</li>\n<li>trapret は trapframe をもどし、user コンテキストにもどる</li>\n</ol>\n\n<p>trap frame は、最初のプロセスだけ <code>userinit</code> でセットアップする。fork の場合は親からコピーされるのでよい。</p>\n\n<ul>\n<li>\n<code>main</code> の最後で、<code>mpmain</code> が呼ばれる\n\n<ul>\n<li>\n<code>schduler</code>\n\n<ul>\n<li>p-&gt;state が RUNNABLE なのを見つける (ただ一つ. initproc)</li>\n<li>per cpu variable である <code>cpu-&gt;proc</code> に initproc をセット</li>\n<li>\n<code>switchuvm</code> (switch to user virtual memory?)\n\n<ul>\n<li>hardware がこのプロセスの page table を使うようにする</li>\n<li>TSS を設定 (chapter 3)</li>\n</ul>\n</li>\n<li>state &lt;- RUNNING</li>\n</ul>\n</li>\n<li>\n<code>swtch</code> (chapter 5)\n\n<ul>\n<li>\n<code>cpu-&gt;scheduler</code> にレジスタを退避</li>\n<li>load <code>p-&gt;context</code>\n</li>\n<li>さっき store した eip = forkret が始まる</li>\n</ul>\n</li>\n<li>\n<code>forkret</code>\n\n<ul>\n<li>最初の実行でのみ必要な初期化</li>\n</ul>\n</li>\n<li>\n<code>trapret</code>\n\n<ul>\n<li>trap frame の restore</li>\n</ul>\n</li>\n<li>\n<code>initcode.S</code>: 0 に map されていたコードが走り始める\n\n<ul>\n<li>\n<code>/init</code> を <code>exec</code> (chapter 2) する</li>\n</ul>\n</li>\n<li>\n<code>Init</code>\n\n<ul>\n<li>fd 0,1,2 をconsole device にひもづけ、shell を立ち上げる。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n<p>以上で、システムが立ち上がった。</p>\n\n<h2>\n<span id=\"misc\" class=\"fragment\"></span><a href=\"#misc\"><i class=\"fa fa-link\"></i></a>Misc</h2>\n\n<p>mpmain はすべての CPUで呼ばれるので、multi processor main の略っぽい</p>\n",
        "body": "\nprocess は、プログラム間の time share, failure isolation, interaction を提供する. interaction は file descriptor 経由で行われる (pipe)\nkernel は pipe の片側が落ちたらそいつの代わりに eof を送るとか、世話をしてる\n\nx86 依存の実装もある:\nuser mode のプログラムが kernel mode priviledged instruction を実行しようとしたら、kernel mode の handler に処理をわたし、clean up してそのプロセスを終了\nsystem call: プロセッサが、priviledge level を上げ、kernel によってセットされた entry point に処理を渡す\n\nxv6 は monolithic kernel.\n\nprocess の実装に使われるメカニズム:\n\n- user/kernel mode flag\n- address 空間\n- time slicing (コンテキストスイッチ)\n\n各プロセスがあたかもそれ専用のマシンで動いているかのような幻想(自分だけのCPU, アドレス空間)を提供する\n\nアドレス空間は、プロセスごとの page table (or `maps`): virtual addr -> phys addr により実装. high address (>= 0x80000000 = KERNBASE = 2GB)には kernel 用のメモリが置かれる。\n\n(high address を上に書いている)\n\n```text\n-------------------- <- 0xFFFFFFFF |\n| kern memory      |               |\n--------------------               |\n| kern text & data |               |  kernel 用\n-------------------- <- 0x80100000 |\n| BIOS             |               |\n-------------------- <- 0x80000000 |\n| heap             |\n--------------------\n| stack            |\n--------------------\n| user text & data |\n-------------------- <- 0x0\n```\n\nkernel を同じアドレス空間にマップしているのは、system call のときに 単に entry point に飛べ、また kernel が user のメモリを読めるように。\n\n## Process\n\nprocess の状態は、struct proc `p` により表される\n\n- page table - `p->pgdir`\n- kernel stack - `p->kstack` (kernel stack のlowest address)\n- run state - `p->state`\n    - allocated (EMBRYO)\n    - ready to run\n    - running\n    - waiting I/O - kernel のデバイス待ち\n    - exiting\n\nkernel stack は実装的には、プロセスごとに kalloc で1ページ割り当てられる\n\n## Initial process\n \n順をおってみていく\n\n- boot loader\n- `entry` に飛ぶ. ここではページングをセットアップ\n    - まだ仮想アドレスはないので、lower address (0x100000 = 1MB) にカーネルを置く\n        - ちなみに 0x0 - 0x100000 は memory mapped I/O に使われている\n    - page table を設定\n        - 0:4M -> 0:4M\n        - KERNBASE:KERNBASE+4M -> 0:4M\n    - %cr3 <- page table の physical address\n    - %cr0 <- CP0_PG (paging を有効化)\n    - %esp を high address におき、high address version の main に飛ぶ (long jump)\n- `main`. 最初のプロセスを作る\n    - 色々なサブシステム（e.g. file system）をセットアップ\n    - `userinit`\n        - 最初のプロセス initproc が普通のプロセスのように動くよう下準備\n            - 上の図っぽくなるようにセットアップ (Chapter 2,3)\n            - initcode.S を 0 に貼り付け\n            - trap frame (user 空間にもどるときに restore されるやつ) をセットアップ\n            - %cs をセット -> レベル3 のユーザプロセスは PTE_U bit のないページや、%cr3 などの重要なレジスタにアクセスできなくなる。\n        - `allocproc`\n            - これは、fork() でも(ようするにすべてのプロセスに対して)呼ばれる\n            - process table に struct proc を割り当てる\n                1. 一番最初の UNUSED な slot を見つける\n                1. state を EMBRYO にして pid を割り当て\n                1. kernel stack を確保し割り当て (失敗したら手順を rollback)\n            - その slot が実行可能なように状態をセットアップする ... (*)\n            - state を RUNNABLE にする\n            \n(*) の詳細\nkernel stack を以下のようにする (high address が上。stack は下に伸びる)\n\n```text\n--------------------\n| trap frame       |  (割り込み時の process の context)\n|                  |  eip は init process では 0 (forkedならforkの次)\n-------------------- <- p->tf\n| `&trapret`       |\n-------------------- <- end of p->context\n| eip = `&forkret` |\n--------------------\n| ...              |\n--------------------\n| edi              |\n-------------------- <- p->context\n| (empty)          |\n-------------------- <- p->kstack\n```\n\n1. `swich` (コンテキストスイッチ) により、p->context が restore され、それにより forkret に飛ぶ\n2. forkret からの ret で、trapret に飛ぶ\n3. trapret は trapframe をもどし、user コンテキストにもどる\n\ntrap frame は、最初のプロセスだけ `userinit` でセットアップする。fork の場合は親からコピーされるのでよい。\n\n- `main` の最後で、`mpmain` が呼ばれる\n    - `schduler`\n        - p->state が RUNNABLE なのを見つける (ただ一つ. initproc)\n        - per cpu variable である `cpu->proc` に initproc をセット\n        - `switchuvm` (switch to user virtual memory?)\n            - hardware がこのプロセスの page table を使うようにする\n            - TSS を設定 (chapter 3)\n        - state <- RUNNING\n    - `swtch` (chapter 5)\n        - `cpu->scheduler` にレジスタを退避\n        - load `p->context`\n        - さっき store した eip = forkret が始まる\n    - `forkret`\n        - 最初の実行でのみ必要な初期化\n    - `trapret`\n        - trap frame の restore\n    - `initcode.S`: 0 に map されていたコードが走り始める\n        - `/init` を `exec` (chapter 2) する\n    - `Init`\n        - fd 0,1,2 をconsole device にひもづけ、shell を立ち上げる。\n\n以上で、システムが立ち上がった。\n\n## Misc\n\nmpmain はすべての CPUで呼ばれるので、multi processor main の略っぽい\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:06:12+09:00",
        "group": null,
        "id": "d5f5e59d63c7cedffa7a",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "xv6",
                "versions": []
            }
        ],
        "title": "読書メモ: xv6 book - Chapter 1: Operating System Organization",
        "updated_at": "2018-03-24T15:44:57+09:00",
        "url": "https://qiita.com/ogiekako/items/d5f5e59d63c7cedffa7a",
        "user": {
            "description": "",
            "facebook_id": "",
            "followees_count": 8,
            "followers_count": 4,
            "github_login_name": "ogiekako",
            "id": "ogiekako",
            "items_count": 17,
            "linkedin_id": "",
            "location": "",
            "name": "Keigo Oka",
            "organization": "",
            "permanent_id": 10671,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/10671/profile-images/1479466529",
            "twitter_screen_name": "ogiekako",
            "website_url": ""
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h1>\n<span id=\"経緯\" class=\"fragment\"></span><a href=\"#%E7%B5%8C%E7%B7%AF\"><i class=\"fa fa-link\"></i></a>経緯</h1>\n\n<p>Kubernetes(k8s)は永続ボリューム（PersistentVolume）に対応していますが、アプリケーション側がこれをコントロールする場合、サーバ上の物理的な情報を意識する必要があります。例えばNFSのPersistentVolumeの定義は以下のように行います。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>apiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfsvol1\n  annotations:\n    volume.beta.kubernetes.io/storage-class: \"nfs\"\nspec:\n  capacity:\n    storage: 8Gi\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Recycle\n  nfs:\n    server: 192.168.11.25\n    path: /var/share/nfs\n</pre></div></div>\n\n<p>NFSサーバの接続情報が必要になっています。</p>\n\n<p>k8sを1人や少数で利用する環境ならこれでもいいですが、商用システムの運用を想定すると、基盤系とアプリ系で役割分担や責務が分かれる場合が多いですし、何よりもアプリがサーバの物理的な情報を意識するのは、アプリと基盤の独立性を損なう要因にもなり、k8sの思想にも反します。</p>\n\n<p>そこで、永続ボリューム要求（PersistentVolumeClaim）があります。アプリ側はあらかじめ基盤側で定義されたStorage Class名を指定するだけで、必要なボリュームの動的プロビジョンを行うことができます。</p>\n\n<p>一方、動的プロビジョンを行うためにはそれに対応したストレージを利用する必要があります。具体的には、以下リンクのInternal Provisionerにチェックのついているものにk8sは対応しています。</p>\n\n<blockquote>\n<p><a href=\"https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner</a></p>\n</blockquote>\n\n<p>クラウドストレージや比較的新しい分散ファイルシステムには対応していますが、NFSのような気軽なものには対応していないことがわかります。しかし、k8sをパブリッククラウドではなくオンプレミスで利用したいケース（ICP: IBM Cloud Privateなど）では、NFSのような枯れた仕組みを使いたいというニーズもあるはずです。</p>\n\n<p>k8sにはExternal Provisionerという仕組みがあり、上表で対応していないストレージにも対応することが出来ます。今回はNFSのExternal Provisionerを利用して、NFSボリュームのPersistentVolumeClaimに対応してみます。</p>\n\n<p>検証環境は次のとおりです。<br>\n- クラスタ: IBM Cloud Private 2.1.0.2 (Kubernetes 1.9.3)<br>\n- NFSサーバ: CentOS 7</p>\n\n<h1>\n<span id=\"手順\" class=\"fragment\"></span><a href=\"#%E6%89%8B%E9%A0%86\"><i class=\"fa fa-link\"></i></a>手順</h1>\n\n<h2>\n<span id=\"external-provisionerの準備\" class=\"fragment\"></span><a href=\"#external-provisioner%E3%81%AE%E6%BA%96%E5%82%99\"><i class=\"fa fa-link\"></i></a>External Provisionerの準備</h2>\n\n<h3>\n<span id=\"provisionerの選定\" class=\"fragment\"></span><a href=\"#provisioner%E3%81%AE%E9%81%B8%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>Provisionerの選定</h3>\n\n<p>以下のサイトにさまざまなExternal Provisionerが公開されています。</p>\n\n<blockquote>\n<p><a href=\"https://github.com/kubernetes-incubator/external-storage\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/kubernetes-incubator/external-storage</a></p>\n</blockquote>\n\n<p>NFSに対応したProvisionerはnfsとnfs-clientの2つがあります。違いですが、nfsはWorkerノードにマウントされたNFSのパスをhostPathとしてボリューム定義し、PersistentVolumeClaimに割り当てる方式のようです。nfs-clientはマウントは不要で、NFSサーバのアドレスとパスを指定して直接ボリュームを定義します。</p>\n\n<p>好みの問題かもしれませんが、WorkerノードにわざわざNFSマウントをしたくないので、今回はnfs-clientを使用します。</p>\n\n<h3>\n<span id=\"storage-classの作成\" class=\"fragment\"></span><a href=\"#storage-class%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Storage Classの作成</h3>\n\n<p>以下のようにStorage Classを作成します。provisionerの値は任意のものに変更してください。</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">storage-class.yaml</span></div>\n<div class=\"highlight\"><pre><span class=\"s\">$ kubectl apply -f storage-class.yaml</span>\n\n<span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">storage.k8s.io/v1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">StorageClass</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs</span>\n<span class=\"na\">provisioner</span><span class=\"pi\">:</span> <span class=\"s\">lab.hoge.jp/nfs</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"deploymentの作成\" class=\"fragment\"></span><a href=\"#deployment%E3%81%AE%E4%BD%9C%E6%88%90\"><i class=\"fa fa-link\"></i></a>Deploymentの作成</h3>\n\n<p>以下のようにDeploymentを作成します。env.PROVISIONER_NAMEはStorage Classのprovisionerと同じ値を、env.NFS_SERVERとnfs.serverは実際のNFSサーバのアドレスを、env.NFS_PATHとnfs.pathは実際のエクスポートされたディレクトリのパスを指定してください。</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">deployment.yaml</span></div>\n<div class=\"highlight\"><pre><span class=\"s\">$ kubectl apply -f deployment.yaml</span>\n\n<span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">extensions/v1beta1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Deployment</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-provisioner</span>\n<span class=\"na\">spec</span><span class=\"pi\">:</span>\n  <span class=\"na\">replicas</span><span class=\"pi\">:</span> <span class=\"s\">1</span>\n  <span class=\"na\">strategy</span><span class=\"pi\">:</span>\n    <span class=\"na\">type</span><span class=\"pi\">:</span> <span class=\"s\">Recreate</span>\n  <span class=\"na\">template</span><span class=\"pi\">:</span>\n    <span class=\"na\">metadata</span><span class=\"pi\">:</span>\n      <span class=\"na\">labels</span><span class=\"pi\">:</span>\n        <span class=\"na\">app</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-provisioner</span>\n    <span class=\"na\">spec</span><span class=\"pi\">:</span>\n      <span class=\"na\">serviceAccountName</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-provisioner</span>\n      <span class=\"na\">containers</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-provisioner</span>\n          <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">quay.io/external_storage/nfs-client-provisioner:latest</span>\n          <span class=\"na\">volumeMounts</span><span class=\"pi\">:</span>\n            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-root</span>\n              <span class=\"na\">mountPath</span><span class=\"pi\">:</span> <span class=\"s\">/persistentvolumes</span>\n          <span class=\"na\">env</span><span class=\"pi\">:</span>\n            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">PROVISIONER_NAME</span>\n              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">lab.hoge.jp/nfs</span>\n            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">NFS_SERVER</span>\n              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">icp-nfs</span>\n            <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">NFS_PATH</span>\n              <span class=\"na\">value</span><span class=\"pi\">:</span> <span class=\"s\">/var/share/nfs</span>\n      <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n        <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-root</span>\n          <span class=\"na\">nfs</span><span class=\"pi\">:</span>\n            <span class=\"na\">server</span><span class=\"pi\">:</span> <span class=\"s\">icp-nfs</span>\n            <span class=\"na\">path</span><span class=\"pi\">:</span> <span class=\"s\">/var/share/nfs</span>\n</pre></div>\n</div>\n\n<h3>\n<span id=\"rbacの設定\" class=\"fragment\"></span><a href=\"#rbac%E3%81%AE%E8%A8%AD%E5%AE%9A\"><i class=\"fa fa-link\"></i></a>RBACの設定</h3>\n\n<p>ServiceAccountはdefaultではなくこれ用のものを用意するのがいいようです。deployment.yamlで<code>serviceAccountName: nfs-client-provisioner</code>として宣言していました。このServiceAccountに権限を付与します。</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">rbac.yaml</span></div>\n<div class=\"highlight\"><pre><span class=\"s\">$ kubectl apply -f rbac.yaml</span>\n\n<span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">v1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ServiceAccount</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-provisioner</span>\n\n<span class=\"nn\">---</span>\n<span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">rbac.authorization.k8s.io/v1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRole</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-provisioner-runner</span>\n<span class=\"na\">rules</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">apiGroups</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">\"</span><span class=\"pi\">]</span>\n    <span class=\"na\">resources</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">persistentvolumes\"</span><span class=\"pi\">]</span>\n    <span class=\"na\">verbs</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">get\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">list\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">watch\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">create\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">delete\"</span><span class=\"pi\">]</span>\n  <span class=\"pi\">-</span> <span class=\"na\">apiGroups</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">\"</span><span class=\"pi\">]</span>\n    <span class=\"na\">resources</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">persistentvolumeclaims\"</span><span class=\"pi\">]</span>\n    <span class=\"na\">verbs</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">get\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">list\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">watch\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">update\"</span><span class=\"pi\">]</span>\n  <span class=\"pi\">-</span> <span class=\"na\">apiGroups</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">storage.k8s.io\"</span><span class=\"pi\">]</span>\n    <span class=\"na\">resources</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">storageclasses\"</span><span class=\"pi\">]</span>\n    <span class=\"na\">verbs</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">get\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">list\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">watch\"</span><span class=\"pi\">]</span>\n  <span class=\"pi\">-</span> <span class=\"na\">apiGroups</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">\"</span><span class=\"pi\">]</span>\n    <span class=\"na\">resources</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">events\"</span><span class=\"pi\">]</span>\n    <span class=\"na\">verbs</span><span class=\"pi\">:</span> <span class=\"pi\">[</span><span class=\"s2\">\"</span><span class=\"s\">list\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">watch\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">create\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">update\"</span><span class=\"pi\">,</span> <span class=\"s2\">\"</span><span class=\"s\">patch\"</span><span class=\"pi\">]</span>\n\n<span class=\"nn\">---</span>\n<span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">rbac.authorization.k8s.io/v1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRoleBinding</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">run-nfs-client-provisioner</span>\n<span class=\"na\">subjects</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ServiceAccount</span>\n    <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-provisioner</span>\n    <span class=\"na\">namespace</span><span class=\"pi\">:</span> <span class=\"s\">default</span>\n<span class=\"na\">roleRef</span><span class=\"pi\">:</span>\n  <span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">ClusterRole</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-client-provisioner-runner</span>\n  <span class=\"na\">apiGroup</span><span class=\"pi\">:</span> <span class=\"s\">rbac.authorization.k8s.io</span>\n</pre></div>\n</div>\n\n<h2>\n<span id=\"テスト\" class=\"fragment\"></span><a href=\"#%E3%83%86%E3%82%B9%E3%83%88\"><i class=\"fa fa-link\"></i></a>テスト</h2>\n\n<p>上記サイトにテスト用のyamlも置かれていますので簡単にテストできます。<code>volume.beta.kubernetes.io/storage-class: \"nfs\"</code>は先ほど定義したStorage Class名です。それ以外に環境に依存する情報がないというところがポイントです。</p>\n\n<p>provisionerはdefaultネームスペースに作りましたが、PersistentVolumeClaimは試しにを別のネームスペースで作ってみます。成功すればNFSボリューム上にSUCCESSというファイルが作成されます。</p>\n\n<div class=\"code-frame\" data-lang=\"yaml\">\n<div class=\"code-lang\"><span class=\"bold\">test.yaml</span></div>\n<div class=\"highlight\"><pre><span class=\"s\">$ kubectl apply -f test.yaml -n teru</span>\n\n<span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">v1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">PersistentVolumeClaim</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">test-claim</span>\n  <span class=\"na\">annotations</span><span class=\"pi\">:</span>\n    <span class=\"s\">volume.kubernetes.io/storage-class</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">nfs\"</span>\n<span class=\"na\">spec</span><span class=\"pi\">:</span>\n  <span class=\"na\">accessModes</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"s\">ReadWriteMany</span>\n  <span class=\"na\">resources</span><span class=\"pi\">:</span>\n    <span class=\"na\">requests</span><span class=\"pi\">:</span>\n      <span class=\"na\">storage</span><span class=\"pi\">:</span> <span class=\"s\">1Mi</span>\n\n<span class=\"nn\">---</span>\n<span class=\"na\">apiVersion</span><span class=\"pi\">:</span> <span class=\"s\">v1</span>\n<span class=\"na\">kind</span><span class=\"pi\">:</span> <span class=\"s\">Pod</span>\n<span class=\"na\">metadata</span><span class=\"pi\">:</span>\n  <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">test-pod</span>\n<span class=\"na\">spec</span><span class=\"pi\">:</span>\n  <span class=\"na\">containers</span><span class=\"pi\">:</span>\n  <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">test-pod</span>\n    <span class=\"na\">image</span><span class=\"pi\">:</span> <span class=\"s\">gcr.io/google_containers/busybox:1.24</span>\n    <span class=\"na\">command</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">/bin/sh\"</span>\n    <span class=\"na\">args</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">-c\"</span>\n      <span class=\"pi\">-</span> <span class=\"s2\">\"</span><span class=\"s\">touch</span><span class=\"nv\"> </span><span class=\"s\">/mnt/SUCCESS</span><span class=\"nv\"> </span><span class=\"s\">&amp;&amp;</span><span class=\"nv\"> </span><span class=\"s\">exit</span><span class=\"nv\"> </span><span class=\"s\">0</span><span class=\"nv\"> </span><span class=\"s\">||</span><span class=\"nv\"> </span><span class=\"s\">exit</span><span class=\"nv\"> </span><span class=\"s\">1\"</span>\n    <span class=\"na\">volumeMounts</span><span class=\"pi\">:</span>\n      <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-pvc</span>\n        <span class=\"na\">mountPath</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">/mnt\"</span>\n  <span class=\"na\">restartPolicy</span><span class=\"pi\">:</span> <span class=\"s2\">\"</span><span class=\"s\">Never\"</span>\n  <span class=\"na\">volumes</span><span class=\"pi\">:</span>\n    <span class=\"pi\">-</span> <span class=\"na\">name</span><span class=\"pi\">:</span> <span class=\"s\">nfs-pvc</span>\n      <span class=\"na\">persistentVolumeClaim</span><span class=\"pi\">:</span>\n        <span class=\"na\">claimName</span><span class=\"pi\">:</span> <span class=\"s\">test-claim</span>\n</pre></div>\n</div>\n\n<p>結果を見てみます。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>$ kubectl get pvc -n teru\nNAME         STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\ntest-claim   Bound     pvc-075b7858-2f24-11e8-8c09-000c29ebfd54   1Mi        RWX            nfs            22s\n</pre></div></div>\n\n<p>test-claimというPersistentVolumeClaimの状態がBoundとなり、pvc-〜というVolumeが割り当てられたことがわかります。</p>\n\n<div class=\"code-frame\" data-lang=\"text\"><div class=\"highlight\"><pre>[NFSサーバ]$ find /var/share/nfs/ | grep pvc-075b\n/var/share/nfs/teru-test-claim-pvc-075b7858-2f24-11e8-8c09-000c29ebfd54\n/var/share/nfs/teru-test-claim-pvc-075b7858-2f24-11e8-8c09-000c29ebfd54/SUCCESS\n</pre></div></div>\n\n<p>NFS上にSUCCESSファイルも無事作成されていました。</p>\n\n<p>以上です。</p>\n",
        "body": "# 経緯\n\nKubernetes(k8s)は永続ボリューム（PersistentVolume）に対応していますが、アプリケーション側がこれをコントロールする場合、サーバ上の物理的な情報を意識する必要があります。例えばNFSのPersistentVolumeの定義は以下のように行います。\n\n```\napiVersion: v1\nkind: PersistentVolume\nmetadata:\n  name: nfsvol1\n  annotations:\n    volume.beta.kubernetes.io/storage-class: \"nfs\"\nspec:\n  capacity:\n    storage: 8Gi\n  accessModes:\n    - ReadWriteOnce\n  persistentVolumeReclaimPolicy: Recycle\n  nfs:\n    server: 192.168.11.25\n    path: /var/share/nfs\n```\n\nNFSサーバの接続情報が必要になっています。\n\nk8sを1人や少数で利用する環境ならこれでもいいですが、商用システムの運用を想定すると、基盤系とアプリ系で役割分担や責務が分かれる場合が多いですし、何よりもアプリがサーバの物理的な情報を意識するのは、アプリと基盤の独立性を損なう要因にもなり、k8sの思想にも反します。\n\nそこで、永続ボリューム要求（PersistentVolumeClaim）があります。アプリ側はあらかじめ基盤側で定義されたStorage Class名を指定するだけで、必要なボリュームの動的プロビジョンを行うことができます。\n\n一方、動的プロビジョンを行うためにはそれに対応したストレージを利用する必要があります。具体的には、以下リンクのInternal Provisionerにチェックのついているものにk8sは対応しています。\n\n> https://kubernetes.io/docs/concepts/storage/storage-classes/#provisioner\n\nクラウドストレージや比較的新しい分散ファイルシステムには対応していますが、NFSのような気軽なものには対応していないことがわかります。しかし、k8sをパブリッククラウドではなくオンプレミスで利用したいケース（ICP: IBM Cloud Privateなど）では、NFSのような枯れた仕組みを使いたいというニーズもあるはずです。\n\nk8sにはExternal Provisionerという仕組みがあり、上表で対応していないストレージにも対応することが出来ます。今回はNFSのExternal Provisionerを利用して、NFSボリュームのPersistentVolumeClaimに対応してみます。\n\n検証環境は次のとおりです。\n- クラスタ: IBM Cloud Private 2.1.0.2 (Kubernetes 1.9.3)\n- NFSサーバ: CentOS 7\n\n# 手順\n\n## External Provisionerの準備\n\n### Provisionerの選定\n\n以下のサイトにさまざまなExternal Provisionerが公開されています。\n\n> https://github.com/kubernetes-incubator/external-storage\n\nNFSに対応したProvisionerはnfsとnfs-clientの2つがあります。違いですが、nfsはWorkerノードにマウントされたNFSのパスをhostPathとしてボリューム定義し、PersistentVolumeClaimに割り当てる方式のようです。nfs-clientはマウントは不要で、NFSサーバのアドレスとパスを指定して直接ボリュームを定義します。\n\n好みの問題かもしれませんが、WorkerノードにわざわざNFSマウントをしたくないので、今回はnfs-clientを使用します。\n\n### Storage Classの作成\n\n以下のようにStorage Classを作成します。provisionerの値は任意のものに変更してください。\n\n```storage-class.yaml\n$ kubectl apply -f storage-class.yaml\n\napiVersion: storage.k8s.io/v1\nkind: StorageClass\nmetadata:\n  name: nfs\nprovisioner: lab.hoge.jp/nfs\n```\n\n### Deploymentの作成\n\n以下のようにDeploymentを作成します。env.PROVISIONER_NAMEはStorage Classのprovisionerと同じ値を、env.NFS_SERVERとnfs.serverは実際のNFSサーバのアドレスを、env.NFS_PATHとnfs.pathは実際のエクスポートされたディレクトリのパスを指定してください。\n\n```deployment.yaml\n$ kubectl apply -f deployment.yaml\n\napiVersion: extensions/v1beta1\nkind: Deployment\nmetadata:\n  name: nfs-client-provisioner\nspec:\n  replicas: 1\n  strategy:\n    type: Recreate\n  template:\n    metadata:\n      labels:\n        app: nfs-client-provisioner\n    spec:\n      serviceAccountName: nfs-client-provisioner\n      containers:\n        - name: nfs-client-provisioner\n          image: quay.io/external_storage/nfs-client-provisioner:latest\n          volumeMounts:\n            - name: nfs-client-root\n              mountPath: /persistentvolumes\n          env:\n            - name: PROVISIONER_NAME\n              value: lab.hoge.jp/nfs\n            - name: NFS_SERVER\n              value: icp-nfs\n            - name: NFS_PATH\n              value: /var/share/nfs\n      volumes:\n        - name: nfs-client-root\n          nfs:\n            server: icp-nfs\n            path: /var/share/nfs\n```\n\n### RBACの設定\n\nServiceAccountはdefaultではなくこれ用のものを用意するのがいいようです。deployment.yamlで`serviceAccountName: nfs-client-provisioner`として宣言していました。このServiceAccountに権限を付与します。\n\n```rbac.yaml\n$ kubectl apply -f rbac.yaml\n\napiVersion: v1\nkind: ServiceAccount\nmetadata:\n  name: nfs-client-provisioner\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRole\nmetadata:\n  name: nfs-client-provisioner-runner\nrules:\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumes\"]\n    verbs: [\"get\", \"list\", \"watch\", \"create\", \"delete\"]\n  - apiGroups: [\"\"]\n    resources: [\"persistentvolumeclaims\"]\n    verbs: [\"get\", \"list\", \"watch\", \"update\"]\n  - apiGroups: [\"storage.k8s.io\"]\n    resources: [\"storageclasses\"]\n    verbs: [\"get\", \"list\", \"watch\"]\n  - apiGroups: [\"\"]\n    resources: [\"events\"]\n    verbs: [\"list\", \"watch\", \"create\", \"update\", \"patch\"]\n\n---\napiVersion: rbac.authorization.k8s.io/v1\nkind: ClusterRoleBinding\nmetadata:\n  name: run-nfs-client-provisioner\nsubjects:\n  - kind: ServiceAccount\n    name: nfs-client-provisioner\n    namespace: default\nroleRef:\n  kind: ClusterRole\n  name: nfs-client-provisioner-runner\n  apiGroup: rbac.authorization.k8s.io\n```\n\n## テスト\n\n上記サイトにテスト用のyamlも置かれていますので簡単にテストできます。`volume.beta.kubernetes.io/storage-class: \"nfs\"`は先ほど定義したStorage Class名です。それ以外に環境に依存する情報がないというところがポイントです。\n\n\n\nprovisionerはdefaultネームスペースに作りましたが、PersistentVolumeClaimは試しにを別のネームスペースで作ってみます。成功すればNFSボリューム上にSUCCESSというファイルが作成されます。\n\n```test.yaml\n$ kubectl apply -f test.yaml -n teru\n\napiVersion: v1\nkind: PersistentVolumeClaim\nmetadata:\n  name: test-claim\n  annotations:\n    volume.kubernetes.io/storage-class: \"nfs\"\nspec:\n  accessModes:\n    - ReadWriteMany\n  resources:\n    requests:\n      storage: 1Mi\n\n---\napiVersion: v1\nkind: Pod\nmetadata:\n  name: test-pod\nspec:\n  containers:\n  - name: test-pod\n    image: gcr.io/google_containers/busybox:1.24\n    command:\n      - \"/bin/sh\"\n    args:\n      - \"-c\"\n      - \"touch /mnt/SUCCESS && exit 0 || exit 1\"\n    volumeMounts:\n      - name: nfs-pvc\n        mountPath: \"/mnt\"\n  restartPolicy: \"Never\"\n  volumes:\n    - name: nfs-pvc\n      persistentVolumeClaim:\n        claimName: test-claim\n```\n\n結果を見てみます。\n\n```\n$ kubectl get pvc -n teru\nNAME         STATUS    VOLUME                                     CAPACITY   ACCESS MODES   STORAGECLASS   AGE\ntest-claim   Bound     pvc-075b7858-2f24-11e8-8c09-000c29ebfd54   1Mi        RWX            nfs            22s\n```\n\ntest-claimというPersistentVolumeClaimの状態がBoundとなり、pvc-〜というVolumeが割り当てられたことがわかります。\n\n```\n[NFSサーバ]$ find /var/share/nfs/ | grep pvc-075b\n/var/share/nfs/teru-test-claim-pvc-075b7858-2f24-11e8-8c09-000c29ebfd54\n/var/share/nfs/teru-test-claim-pvc-075b7858-2f24-11e8-8c09-000c29ebfd54/SUCCESS\n```\n\nNFS上にSUCCESSファイルも無事作成されていました。\n\n以上です。\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:04:33+09:00",
        "group": null,
        "id": "17609eecc29b70e2cbe7",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "nfs",
                "versions": []
            },
            {
                "name": "kubernetes",
                "versions": []
            },
            {
                "name": "ibmcloudprivate",
                "versions": []
            }
        ],
        "title": "KubernetesのPersistentVolumeClaimでNFSを使う",
        "updated_at": "2018-03-24T15:43:34+09:00",
        "url": "https://qiita.com/teruq/items/17609eecc29b70e2cbe7",
        "user": {
            "description": "ガチSIer\r\n\r\n※私の記事は私の所属する会社・組織の公式見解ではなく私個人の意見となります",
            "facebook_id": "",
            "followees_count": 0,
            "followers_count": 1,
            "github_login_name": "teruz",
            "id": "teruq",
            "items_count": 8,
            "linkedin_id": "",
            "location": "",
            "name": "Teruyuki Takazawa",
            "organization": "",
            "permanent_id": 241424,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/241424/profile-images/1520102841",
            "twitter_screen_name": null,
            "website_url": ""
        },
        "page_views_count": null
    },
    {
        "rendered_body": "\n<h1>\n<span id=\"背景\" class=\"fragment\"></span><a href=\"#%E8%83%8C%E6%99%AF\"><i class=\"fa fa-link\"></i></a>背景</h1>\n\n<p>HTMLで、ID属性の値はページ内で一意である必要があります。重複してはいけません。<br>\n<a href=\"http://www.html5.jp/tag/attributes/id.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://www.html5.jp/tag/attributes/id.html</a></p>\n\n<p>しかし、JavaScriptライブラリなど使うとIDが重複してしまう場合があります。<br>\nたとえば、<a href=\"http://www.html5.jp/tag/attributes/id.html\" rel=\"nofollow noopener\" target=\"_blank\">FixedMidashi</a>というテーブルのヘッダを固定するライブラリでは、対象のテーブルをコピーして固定するヘッダ部分を作成します。対象テーブル内の要素にIDが指定されていると、IDが重複しまいます。</p>\n\n<p>工夫すればIDがユニークになるように実現できますが、上記ライブラリを使った場合は「IDが重複している」ことを諦めた方がラクでした。</p>\n\n<p>そこで、IDが重複している場合の動きをまとめます。<br>\n以下のようなHTMLで動作を確認します。</p>\n\n<div class=\"code-frame\" data-lang=\"html\">\n<div class=\"code-lang\"><span class=\"bold\">sample.html</span></div>\n<div class=\"highlight\"><pre><span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"bar\"</span><span class=\"nt\">&gt;</span>\n  #bar 1個目\n  <span class=\"nt\">&lt;p&gt;</span>Pタグ<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n\n<span class=\"nt\">&lt;div</span> <span class=\"na\">id=</span><span class=\"s\">\"bar\"</span><span class=\"nt\">&gt;</span>\n  #bar 2個目\n  <span class=\"nt\">&lt;p&gt;</span>Pタグ<span class=\"nt\">&lt;/p&gt;</span>\n<span class=\"nt\">&lt;/div&gt;</span>\n</pre></div>\n</div>\n\n<p data-height=\"265\" data-slug-hash=\"jzLmpZ\" data-embed-version=\"2\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/yuji38kwmt/pen/jzLmpZ/\" rel=\"nofollow noopener\" target=\"_blank\">IDが重複している場合の動き</a> by yuji38kwmt (<a href=\"https://codepen.io/yuji38kwmt\" rel=\"nofollow noopener\" target=\"_blank\">@yuji38kwmt</a>) on <a href=\"https://codepen.io\" rel=\"nofollow noopener\" target=\"_blank\">CodePen</a>.</p>\n\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n<h1>\n<span id=\"環境\" class=\"fragment\"></span><a href=\"#%E7%92%B0%E5%A2%83\"><i class=\"fa fa-link\"></i></a>環境</h1>\n\n<ul>\n<li>Google Chrome 65.0.3325.181</li>\n<li>jQuery 3.3.1</li>\n</ul>\n\n<h1>\n<span id=\"javascriptの動き\" class=\"fragment\"></span><a href=\"#javascript%E3%81%AE%E5%8B%95%E3%81%8D\"><i class=\"fa fa-link\"></i></a>JavaScriptの動き</h1>\n\n<div class=\"code-frame\" data-lang=\"javascript\">\n<div class=\"code-lang\"><span class=\"bold\">console</span></div>\n<div class=\"highlight\"><pre><span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s2\">\"#bar\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"c1\">//⇒ 2</span>\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#bar\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"c1\">//⇒ 1</span>\n\n<span class=\"nx\">$</span><span class=\"p\">(</span><span class=\"s2\">\"#bar p\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"c1\">//⇒ 2</span>\n<span class=\"nb\">document</span><span class=\"p\">.</span><span class=\"nx\">querySelectorAll</span><span class=\"p\">(</span><span class=\"s2\">\"#bar p\"</span><span class=\"p\">).</span><span class=\"nx\">length</span><span class=\"p\">;</span> <span class=\"c1\">//⇒2</span>\n</pre></div>\n</div>\n\n<ul>\n<li>\n<code>document.querySelectorAll</code>とjQueryで取得できる件数に違いありました。</li>\n<li>jQuryは「IDはユニーク」という前提を考慮した結果を返す（\"1\"）のに対して、<code>document.querySelectorAll</code>は考慮していませんでした。</li>\n<li>\n<code>#bar p</code>のようにIDが指定された要素の子孫を指定した場合、jQueryは「IDはユニーク」という前提を考慮していませんでした。<strong>ハマったところです。</strong>\n</li>\n</ul>\n\n<h1>\n<span id=\"cssの動き\" class=\"fragment\"></span><a href=\"#css%E3%81%AE%E5%8B%95%E3%81%8D\"><i class=\"fa fa-link\"></i></a>CSSの動き</h1>\n\n<div class=\"code-frame\" data-lang=\"css\">\n<div class=\"code-lang\"><span class=\"bold\">sample.css</span></div>\n<div class=\"highlight\"><pre><span class=\"nf\">#bar</span> <span class=\"p\">{</span> <span class=\"c\">/* 重複しているIDを指定 */</span>\n  <span class=\"nl\">color</span><span class=\"p\">:</span><span class=\"no\">red</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre></div>\n</div>\n\n<ul>\n<li>CSSは「IDはユニーク」という前提を考慮していませんでした。</li>\n</ul>\n\n<h1>\n<span id=\"参考サイト\" class=\"fragment\"></span><a href=\"#%E5%8F%82%E8%80%83%E3%82%B5%E3%82%A4%E3%83%88\"><i class=\"fa fa-link\"></i></a>参考サイト</h1>\n\n<p><a href=\"http://oredon.guitarkouza.net/blog/2015/11/jquery-id-select.php\" rel=\"nofollow noopener\" target=\"_blank\">jQueryセレクタ id重複時の挙動テスト</a></p>\n",
        "body": "\n\n\n# 背景\nHTMLで、ID属性の値はページ内で一意である必要があります。重複してはいけません。\nhttp://www.html5.jp/tag/attributes/id.html\n\nしかし、JavaScriptライブラリなど使うとIDが重複してしまう場合があります。\nたとえば、[FixedMidashi](http://www.html5.jp/tag/attributes/id.html)というテーブルのヘッダを固定するライブラリでは、対象のテーブルをコピーして固定するヘッダ部分を作成します。対象テーブル内の要素にIDが指定されていると、IDが重複しまいます。\n\n工夫すればIDがユニークになるように実現できますが、上記ライブラリを使った場合は「IDが重複している」ことを諦めた方がラクでした。\n\n\nそこで、IDが重複している場合の動きをまとめます。\n以下のようなHTMLで動作を確認します。\n\n```html:sample.html\n<div id=\"bar\">\n  #bar 1個目\n  <p>Pタグ</p>\n</div>\n\n<div id=\"bar\">\n  #bar 2個目\n  <p>Pタグ</p>\n</div>\n```\n\n<p data-height=\"265\" data-theme-id=\"0\" data-slug-hash=\"jzLmpZ\" data-default-tab=\"js,result\" data-user=\"yuji38kwmt\" data-embed-version=\"2\" data-pen-title=\"IDが重複している場合の動き\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/yuji38kwmt/pen/jzLmpZ/\">IDが重複している場合の動き</a> by yuji38kwmt (<a href=\"https://codepen.io/yuji38kwmt\">@yuji38kwmt</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n<script async src=\"https://static.codepen.io/assets/embed/ei.js\"></script>\n\n# 環境\n* Google Chrome 65.0.3325.181\n* jQuery 3.3.1\n\n\n# JavaScriptの動き\n\n```javascript:console\ndocument.querySelectorAll(\"#bar\").length; //⇒ 2\n$(\"#bar\").length; //⇒ 1\n\n$(\"#bar p\").length; //⇒ 2\ndocument.querySelectorAll(\"#bar p\").length; //⇒2\n```\n\n* `document.querySelectorAll`とjQueryで取得できる件数に違いありました。\n* jQuryは「IDはユニーク」という前提を考慮した結果を返す（\"1\"）のに対して、`document.querySelectorAll`は考慮していませんでした。\n* `#bar p`のようにIDが指定された要素の子孫を指定した場合、jQueryは「IDはユニーク」という前提を考慮していませんでした。**ハマったところです。**\n\n\n\n# CSSの動き\n\n```css:sample.css\n#bar { /* 重複しているIDを指定 */\n  color:red;\n}\n```\n\n* CSSは「IDはユニーク」という前提を考慮していませんでした。\n\n\n\n\n\n# 参考サイト\n\n[jQueryセレクタ id重複時の挙動テスト](http://oredon.guitarkouza.net/blog/2015/11/jquery-id-select.php)\n\n\n",
        "coediting": false,
        "comments_count": 0,
        "created_at": "2018-03-24T15:03:33+09:00",
        "group": null,
        "id": "e1117b30cb557f7376fd",
        "likes_count": 0,
        "private": false,
        "reactions_count": 0,
        "tags": [
            {
                "name": "HTML",
                "versions": []
            },
            {
                "name": "CSS",
                "versions": []
            }
        ],
        "title": "IDが重複している場合の動き",
        "updated_at": "2018-03-24T15:08:05+09:00",
        "url": "https://qiita.com/yuji38kwmt/items/e1117b30cb557f7376fd",
        "user": {
            "description": "terasolunaでWeb開発しています。",
            "facebook_id": "",
            "followees_count": 147,
            "followers_count": 35,
            "github_login_name": null,
            "id": "yuji38kwmt",
            "items_count": 120,
            "linkedin_id": "",
            "location": "Aichi,Japan",
            "name": "",
            "organization": "中小IT企業",
            "permanent_id": 37903,
            "profile_image_url": "https://qiita-image-store.s3.amazonaws.com/0/37903/profile-images/1495549638",
            "twitter_screen_name": null,
            "website_url": ""
        },
        "page_views_count": null
    }
]
